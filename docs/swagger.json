{
    "swagger": "2.0",
    "info": {
        "description": "Create accounts, schemas, buckets and objects in a scalable way utilizing the Sonr architecture.",
        "title": "Speedway API",
        "termsOfService": "https://sonr.io/terms",
        "contact": {
            "name": "API Support",
            "url": "https://sonr.io/",
            "email": "team@sonr.io"
        },
        "license": {
            "name": "OpenGLv3",
            "url": "https://www.gnu.org/licenses/gpl-3.0.en.html"
        },
        "version": "2.0"
    },
    "host": "localhost:8080",
    "basePath": "/api/v1",
    "paths": {
        "/account/create": {
            "post": {
                "description": "Create a new account on Sonr using the Registry module of Sonr's Blockchain.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Account"
                ],
                "summary": "CreateAccount",
                "parameters": [
                    {
                        "example": "\"Password\"",
                        "description": "password",
                        "name": "password",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/routes.CreateAccountResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/routes.FailedResponse"
                        }
                    }
                }
            }
        },
        "/account/info": {
            "get": {
                "description": "Get Account information from the Sonr Blockchain. This is a read-only endpoint.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Account"
                ],
                "summary": "GetAccount",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/routes.uResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/routes.FailedResponse"
                        }
                    }
                }
            }
        },
        "/account/login": {
            "post": {
                "description": "Login to an existing account on Sonr using the Registry module of Sonr's Blockchain.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Account"
                ],
                "summary": "LoginAccount",
                "parameters": [
                    {
                        "example": "\"snr172ljvam8m7xxlv59v6w27lula58zwwct3vgn9p\"",
                        "description": "did",
                        "name": "Did",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "example": "\"Password\"",
                        "description": "password",
                        "name": "Password",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/routes.SuccessfulLogin"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/routes.FailedLogin"
                        }
                    }
                }
            }
        },
        "/alias/buy": {
            "post": {
                "description": "Buy an alias",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Alias"
                ],
                "summary": "BuyAlias",
                "parameters": [
                    {
                        "description": "Creator",
                        "name": "creator",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Alias",
                        "name": "alias",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.MsgBuyAliasResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/routes.FailedResponse"
                        }
                    }
                }
            }
        },
        "/alias/sell": {
            "post": {
                "description": "Sell an alias",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Alias"
                ],
                "summary": "SellAlias",
                "parameters": [
                    {
                        "description": "Creator",
                        "name": "creator",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Alias",
                        "name": "alias",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Amount",
                        "name": "amount",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.MsgSellAliasResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/routes.FailedResponse"
                        }
                    }
                }
            }
        },
        "/alias/transfer": {
            "post": {
                "description": "Transfer an alias",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Alias"
                ],
                "summary": "TransferAlias",
                "parameters": [
                    {
                        "description": "Creator",
                        "name": "creator",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Alias",
                        "name": "alias",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Recipient",
                        "name": "recipient",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Amount",
                        "name": "amount",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.MsgTransferAliasResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/routes.FailedResponse"
                        }
                    }
                }
            }
        },
        "/bucket/create": {
            "post": {
                "description": "Create a bucket on Sonr using the bucket module of Sonr's Blockchain.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Bucket"
                ],
                "summary": "CreateBucket",
                "parameters": [
                    {
                        "example": "\"snr172ljvam8m7xxlv59v6w27lula58zwwct3vgn9p\"",
                        "description": "creator",
                        "name": "Creator",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "example": "\"My Bucket\"",
                        "description": "label",
                        "name": "Label",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "example": "\"public\" or \"private\"",
                        "description": "visibility",
                        "name": "Visibility",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "example": "\"application\" or \"user\"",
                        "description": "role",
                        "name": "Role",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "example": "\"name: My Bucket, uri: bafyreifqum26tv4wprgri5t4ddef7tozknnicuayjcvd4m5gag5avgtvsa\"",
                        "description": "content",
                        "name": "Content",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "example": "\"did\" or \"cid\"",
                        "description": "ResourceIdentifier",
                        "name": "ResourceIdentifier",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/routes.CreateBucketResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/routes.FailedResponse"
                        }
                    }
                }
            }
        },
        "/bucket/get": {
            "post": {
                "description": "Get a bucket on Sonr using the bucket module of Sonr's Blockchain.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Bucket"
                ],
                "summary": "GetBucket",
                "parameters": [
                    {
                        "example": "\"did:snr:172ljvam8m7xxlv59v6w27lula58zwwct3vgn9p\"",
                        "description": "BucketDid",
                        "name": "bucketDid",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/routes.GetBucketResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/routes.FailedResponse"
                        }
                    }
                }
            }
        },
        "/bucket/get-by-schema": {
            "post": {
                "description": "Get a bucket on Sonr using a Schema.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Bucket"
                ],
                "summary": "GetBucketBySchema",
                "parameters": [
                    {
                        "example": "\"snr172ljvam8m7xxlv59v6w27lula58zwwct3vgn9p\"",
                        "description": "Creator",
                        "name": "Creator",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "example": "\"did:snr:172ljvam8m7xxlv59v6w27lula58zwwct3vgn9p\"",
                        "description": "bucketDid",
                        "name": "BucketDid",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "example": "\"did:snr:172ljvam8m7xxlv59v6w27lula58zwwct3vgn9p\"",
                        "description": "schemaDid",
                        "name": "SchemaDid",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1.SearchBucketContentBySchemaResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/routes.FailedResponse"
                        }
                    }
                }
            }
        },
        "/bucket/update-items": {
            "post": {
                "description": "Update a bucket on Sonr using the bucket module of Sonr's Blockchain.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Bucket"
                ],
                "summary": "UpdateBucketItems",
                "parameters": [
                    {
                        "example": "\"did:snr:172ljvam8m7xxlv59v6w27lula58zwwct3vgn9p\"",
                        "description": "BucketDid",
                        "name": "bucketDid",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "example": "\"name: My Bucket, uri: bafyreifqum26tv4wprgri5t4ddef7tozknnicuayjcvd4m5gag5avgtvsa\"",
                        "description": "Content",
                        "name": "Content",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.BucketItem"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/routes.FailedResponse"
                        }
                    }
                }
            }
        },
        "/bucket/update-label": {
            "post": {
                "description": "Update a bucket on Sonr using the bucket module of Sonr's Blockchain.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Bucket"
                ],
                "summary": "UpdateBucketLabel",
                "parameters": [
                    {
                        "example": "\"did:snr:172ljvam8m7xxlv59v6w27lula58zwwct3vgn9p\"",
                        "description": "BucketDid",
                        "name": "bucketDid",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "example": "\"My Bucket\"",
                        "description": "Label",
                        "name": "label",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/routes.FailedResponse"
                        }
                    }
                }
            }
        },
        "/bucket/update-visibility": {
            "post": {
                "description": "Update a bucket on Sonr using the bucket module of Sonr's Blockchain.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Bucket"
                ],
                "summary": "UpdateBucketVisibility",
                "parameters": [
                    {
                        "example": "\"did:snr:172ljvam8m7xxlv59v6w27lula58zwwct3vgn9p\"",
                        "description": "BucketDid",
                        "name": "bucketDid",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "example": "\"public\"",
                        "description": "Visibility",
                        "name": "visibility",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/routes.FailedResponse"
                        }
                    }
                }
            }
        },
        "/object/build": {
            "post": {
                "description": "Build an object on Sonr using the object module of Sonr's Blockchain.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Object"
                ],
                "summary": "BuildObject",
                "parameters": [
                    {
                        "example": "\"did:sonr:172ljvam8m7xxlv59v6w27lula58zwwct3vgn9p\"",
                        "description": "schemaDid",
                        "name": "SchemaDid",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "example": "\"MyObject\"",
                        "description": "label",
                        "name": "Label",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "object",
                        "name": "Object",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1.UploadObjectResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/routes.FailedResponse"
                        }
                    }
                }
            }
        },
        "/object/get": {
            "post": {
                "description": "Get an object on Sonr using the object module of Sonr's Blockchain.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Object"
                ],
                "summary": "GetObject",
                "parameters": [
                    {
                        "example": "\"did:sonr:172ljvam8m7xxlv59v6w27lula58zwwct3vgn9p\"",
                        "description": "SchemaDid",
                        "name": "SchemaDid",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "example": "\"bafyreigfzxrtvfzuaoyhn5vgndneeeirq62efgf2s3igmoenxgx7jxy2cm\"",
                        "description": "ObjectCid",
                        "name": "ObjectCid",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/routes.GetObjectResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/routes.FailedResponse"
                        }
                    }
                }
            }
        },
        "/schema-document/create": {
            "post": {
                "description": "Create a new schema document on Sonr using the Registry module of Sonr's Blockchain.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Schema"
                ],
                "summary": "CreateSchemaDocument",
                "parameters": [
                    {
                        "example": "\"did:sonr:0x1234\"",
                        "description": "creator",
                        "name": "creator",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "example": "\"My Schema\"",
                        "description": "label",
                        "name": "label",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "example": "\"did:sonr:0x1234\"",
                        "description": "schema_did",
                        "name": "schema_did",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "example": "\"did:sonr:0x1234\"",
                        "description": "fields",
                        "name": "fields",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1.UploadDocumentResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/routes.FailedResponse"
                        }
                    }
                }
            }
        },
        "/schema-document/get": {
            "post": {
                "description": "Get a schema document utilizing motor client. Returns the schema document.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Schema"
                ],
                "summary": "GetSchemaDocument",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Cid of the schema",
                        "name": "cid",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1.GetDocumentResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/routes.FailedResponse"
                        }
                    }
                }
            }
        },
        "/schema/create": {
            "post": {
                "description": "Create a schema utilizing motor client. Returns the WhatIs of the schema created.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Schema"
                ],
                "summary": "CreateSchema",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Label of the schema",
                        "name": "label",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Fields of the schema",
                        "name": "fields",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/routes.CreateSchemaResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/routes.FailedResponse"
                        }
                    }
                }
            }
        },
        "/schema/get": {
            "post": {
                "description": "Get a schema utilizing motor client. Returns the WhatIs of the schema that is retrieved.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Schema"
                ],
                "summary": "GetSchema",
                "parameters": [
                    {
                        "description": "Creator",
                        "name": "creator",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Schema",
                        "name": "schema",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/routes.QuerySchemaResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/routes.FailedResponse"
                        }
                    }
                }
            }
        },
        "/schema/query": {
            "get": {
                "description": "Query the Sonr Blockchain for all public schemas on the Blockchain. This is a read-only endpoint.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Schema"
                ],
                "summary": "QuerySchemas",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/routes.SchemaResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/routes.FailedResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "did.Service": {
            "type": "object",
            "properties": {
                "id": {
                    "$ref": "#/definitions/ssi.URI"
                },
                "serviceEndpoint": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "object.Object": {
            "type": "object",
            "additionalProperties": true
        },
        "routes.ConvertBucketRes": {
            "type": "object",
            "properties": {
                "content": {
                    "$ref": "#/definitions/types.BucketContent"
                },
                "name": {
                    "type": "string"
                },
                "schemaDid": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "integer"
                },
                "uri": {
                    "type": "string"
                }
            }
        },
        "routes.CreateAccountResponse": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                }
            }
        },
        "routes.CreateBucketResponse": {
            "type": "object",
            "properties": {
                "bucket": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.BucketItem"
                    }
                },
                "service": {
                    "$ref": "#/definitions/did.Service"
                }
            }
        },
        "routes.CreateSchemaResponse": {
            "type": "object",
            "properties": {
                "whatIs": {
                    "$ref": "#/definitions/types.WhatIs"
                }
            }
        },
        "routes.FailedLogin": {
            "type": "object",
            "properties": {
                "success": {
                    "type": "boolean"
                }
            }
        },
        "routes.FailedResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "routes.GetBucketResponse": {
            "type": "object",
            "properties": {
                "bucket": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/routes.ConvertBucketRes"
                    }
                }
            }
        },
        "routes.GetObjectResponse": {
            "type": "object",
            "properties": {
                "object": {
                    "$ref": "#/definitions/object.Object"
                }
            }
        },
        "routes.QuerySchemaResponse": {
            "type": "object",
            "properties": {
                "definition": {
                    "$ref": "#/definitions/types.SchemaDefinition"
                }
            }
        },
        "routes.SchemaResponse": {
            "type": "object",
            "properties": {
                "pagination": {
                    "type": "object",
                    "properties": {
                        "next_key": {},
                        "total": {
                            "type": "string"
                        }
                    }
                },
                "what_is": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "creator": {
                                "type": "string"
                            },
                            "did": {
                                "type": "string"
                            },
                            "is_active": {
                                "type": "boolean"
                            },
                            "metadata": {
                                "type": "object"
                            },
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "cid": {
                                        "type": "string"
                                    },
                                    "did": {
                                        "type": "string"
                                    },
                                    "label": {
                                        "type": "string"
                                    }
                                }
                            },
                            "timestamp": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "routes.SuccessfulLogin": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "routes.uResponse": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "didDocument": {}
            }
        },
        "ssi.URI": {
            "type": "object",
            "properties": {
                "forceQuery": {
                    "description": "append a query ('?') even if RawQuery is empty",
                    "type": "boolean"
                },
                "fragment": {
                    "description": "fragment for references, without '#'",
                    "type": "string"
                },
                "host": {
                    "description": "host or host:port",
                    "type": "string"
                },
                "opaque": {
                    "description": "encoded opaque data",
                    "type": "string"
                },
                "path": {
                    "description": "path (relative paths may omit leading slash)",
                    "type": "string"
                },
                "rawFragment": {
                    "description": "encoded fragment hint (see EscapedFragment method)",
                    "type": "string"
                },
                "rawPath": {
                    "description": "encoded path hint (see EscapedPath method)",
                    "type": "string"
                },
                "rawQuery": {
                    "description": "encoded query values, without '?'",
                    "type": "string"
                },
                "scheme": {
                    "type": "string"
                },
                "user": {
                    "description": "username and password information",
                    "$ref": "#/definitions/url.Userinfo"
                }
            }
        },
        "types.Alias": {
            "type": "object",
            "properties": {
                "amount": {
                    "description": "Amount is the amount listed for purchasing the Alias from the User/Application",
                    "type": "integer"
                },
                "is_for_sale": {
                    "description": "IsForSale is the boolean value indicating if the Alias is for sale",
                    "type": "boolean"
                },
                "name": {
                    "description": "Name is the string name of an Alias",
                    "type": "string"
                }
            }
        },
        "types.ArrayValue": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.SchemaDocumentValue"
                    }
                }
            }
        },
        "types.BoolValue": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "boolean"
                }
            }
        },
        "types.BucketContent": {
            "type": "object",
            "properties": {
                "content_type": {
                    "description": "Type of the resource",
                    "type": "integer"
                },
                "id": {
                    "description": "Content id a CID, DID, or unspecified",
                    "type": "string"
                },
                "item": {
                    "description": "Raw content serialized to bytes",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "types.BucketItem": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name of the bucket item.",
                    "type": "string"
                },
                "schema_did": {
                    "description": "References the schema and item within the bucket is associated with.\nBucket items do not need to use the same schema if the bucket is \"generic\" // optional",
                    "type": "string"
                },
                "timestamp": {
                    "description": "Timestamp of the last update. // optional",
                    "type": "integer"
                },
                "type": {
                    "description": "Type of the resource",
                    "type": "integer"
                },
                "uri": {
                    "description": "DID of the item. If applicable // optional",
                    "type": "string"
                }
            }
        },
        "types.BytesValue": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "types.DIDDocument": {
            "type": "object",
            "properties": {
                "also_known_as": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "assertion_method": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "authentication": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "capability_delegation": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "capability_invocation": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "context": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "controller": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "string"
                },
                "key_agreement": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "service": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.Service"
                    }
                },
                "verification_method": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.VerificationMethod"
                    }
                }
            }
        },
        "types.FloatValue": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "number"
                }
            }
        },
        "types.IntValue": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "integer"
                }
            }
        },
        "types.KeyValuePair": {
            "type": "object",
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "types.LinkValue": {
            "type": "object",
            "properties": {
                "link": {
                    "description": "Optional field for a link context if `SchemaKind` is of type `Link`",
                    "type": "integer"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "types.MsgBuyAliasResponse": {
            "type": "object",
            "properties": {
                "success": {
                    "description": "Did is the top level DID of the WhoIs.",
                    "type": "boolean"
                },
                "who_is": {
                    "description": "WhoIs is the updated WhoIs, contains the DID document and associated metadata.",
                    "$ref": "#/definitions/types.WhoIs"
                }
            }
        },
        "types.MsgSellAliasResponse": {
            "type": "object",
            "properties": {
                "success": {
                    "description": "Success is true if the Alias was successfully transferred.",
                    "type": "boolean"
                },
                "who_is": {
                    "description": "WhoIs is the updated WhoIs, contains the DID document and associated metadata.",
                    "$ref": "#/definitions/types.WhoIs"
                }
            }
        },
        "types.MsgTransferAliasResponse": {
            "type": "object",
            "properties": {
                "success": {
                    "description": "Success is true if the Alias was successfully transferred.",
                    "type": "boolean"
                },
                "who_is": {
                    "description": "WhoIs is the updated WhoIs, contains the DID document and associated metadata.",
                    "$ref": "#/definitions/types.WhoIs"
                }
            }
        },
        "types.SchemaDefinition": {
            "type": "object",
            "properties": {
                "creator": {
                    "type": "string"
                },
                "did": {
                    "description": "the DID for this schema should not be populated by request",
                    "type": "string"
                },
                "fields": {
                    "description": "the properties of this schema",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.SchemaKindDefinition"
                    }
                },
                "label": {
                    "description": "an alternative reference point",
                    "type": "string"
                }
            }
        },
        "types.SchemaDocument": {
            "type": "object",
            "properties": {
                "cid": {
                    "type": "string"
                },
                "creator": {
                    "type": "string"
                },
                "definition": {
                    "description": "The definition of the document used to build the values",
                    "$ref": "#/definitions/types.SchemaDefinition"
                },
                "did": {
                    "description": "the DID for this schema should not be populated by request",
                    "type": "string"
                },
                "fields": {
                    "description": "the properties of this schemadocument",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.SchemaDocumentValue"
                    }
                }
            }
        },
        "types.SchemaDocumentValue": {
            "type": "object",
            "properties": {
                "array_value": {
                    "$ref": "#/definitions/types.ArrayValue"
                },
                "bool_value": {
                    "description": "The value of the field",
                    "$ref": "#/definitions/types.BoolValue"
                },
                "bytes_value": {
                    "$ref": "#/definitions/types.BytesValue"
                },
                "field": {
                    "description": "Type of a single schema property",
                    "type": "integer"
                },
                "float_value": {
                    "$ref": "#/definitions/types.FloatValue"
                },
                "int_value": {
                    "$ref": "#/definitions/types.IntValue"
                },
                "link_value": {
                    "$ref": "#/definitions/types.LinkValue"
                },
                "name": {
                    "type": "string"
                },
                "string_value": {
                    "$ref": "#/definitions/types.StringValue"
                }
            }
        },
        "types.SchemaKindDefinition": {
            "type": "object",
            "properties": {
                "field": {
                    "description": "Type of a single schema property",
                    "type": "integer"
                },
                "link": {
                    "type": "string"
                },
                "link_kind": {
                    "description": "Optional field for a link context if `SchemaKind` is of type `Link`",
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "types.Service": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "service_endpoint": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.KeyValuePair"
                    }
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "types.StringValue": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "string"
                }
            }
        },
        "types.VerificationMethod": {
            "type": "object",
            "properties": {
                "controller": {
                    "type": "string"
                },
                "credential_json": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "id": {
                    "type": "string"
                },
                "public_key_base58": {
                    "type": "string"
                },
                "public_key_jwk": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.KeyValuePair"
                    }
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "types.WhatIs": {
            "type": "object",
            "properties": {
                "creator": {
                    "description": "Creator is the DID of the creator",
                    "type": "string"
                },
                "did": {
                    "description": "DID is the DID of the object",
                    "type": "string"
                },
                "is_active": {
                    "description": "IsActive is the status of the DID Document",
                    "type": "boolean"
                },
                "metadata": {
                    "description": "Metadata is a map of key-value pairs that can be used to store additional information about the WhatIs (Schema)",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "schema": {
                    "description": "Object_doc is the object document",
                    "$ref": "#/definitions/types.SchemaDefinition"
                },
                "timestamp": {
                    "description": "Timestamp is the time of the last update of the DID Document",
                    "type": "integer"
                }
            }
        },
        "types.WhoIs": {
            "type": "object",
            "properties": {
                "alias": {
                    "description": "Alias is the list of registered `alsoKnownAs` identifiers of the User or Application",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.Alias"
                    }
                },
                "controllers": {
                    "description": "Credentials are the biometric info of the registered name and account encoded with public key",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "did_document": {
                    "description": "DIDDocument is the bytes representation of DIDDocument within the WhoIs. Initially marshalled as JSON.",
                    "$ref": "#/definitions/types.DIDDocument"
                },
                "is_active": {
                    "description": "IsActive is the status of the DID Document",
                    "type": "boolean"
                },
                "metadata": {
                    "description": "Metadata is a map of key-value pairs that can be used to store additional information about the DID Document",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "owner": {
                    "description": "Owner is the top level DID of the User or Application derived from the multisignature wallet.",
                    "type": "string"
                },
                "timestamp": {
                    "description": "Timestamp is the time of the last update of the DID Document",
                    "type": "integer"
                },
                "type": {
                    "description": "Type is the kind of the entity. Possible values are: \"user\", \"application\"",
                    "type": "integer"
                }
            }
        },
        "url.Userinfo": {
            "type": "object"
        },
        "v1.GetDocumentResponse": {
            "type": "object",
            "properties": {
                "cid": {
                    "type": "string"
                },
                "did": {
                    "type": "string"
                },
                "document": {
                    "$ref": "#/definitions/types.SchemaDocument"
                },
                "status": {
                    "type": "integer"
                }
            }
        },
        "v1.ObjectReference": {
            "type": "object",
            "properties": {
                "cid": {
                    "type": "string"
                },
                "did": {
                    "type": "string"
                },
                "label": {
                    "type": "string"
                }
            }
        },
        "v1.SearchBucketContentBySchemaResponse": {
            "type": "object",
            "properties": {
                "bucket_did": {
                    "type": "string"
                },
                "content": {
                    "type": "array",
                    "items": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    }
                },
                "schema_did": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                }
            }
        },
        "v1.UploadDocumentResponse": {
            "type": "object",
            "properties": {
                "cid": {
                    "type": "string"
                },
                "did": {
                    "type": "string"
                },
                "document": {
                    "$ref": "#/definitions/types.SchemaDocument"
                },
                "status": {
                    "type": "integer"
                }
            }
        },
        "v1.UploadObjectResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "reference": {
                    "$ref": "#/definitions/v1.ObjectReference"
                }
            }
        }
    }
}