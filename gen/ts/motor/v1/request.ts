// @generated by protobuf-ts 2.8.1 with parameter generate_dependencies,long_type_string
// @generated from protobuf file "motor/v1/request.proto" (package "sonrio.motor.api.v1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { SchemaDocumentValue } from "../../schema/v1/document";
import { SchemaDefinition } from "../../schema/v1/schema";
import { BucketItem } from "../../bucket/where_is";
import { BucketRole } from "../../bucket/where_is";
import { BucketVisibility } from "../../bucket/where_is";
import { PageRequest } from "../../cosmos/base/query/v1beta1/pagination";
import { SchemaKind } from "../../schema/v1/schema";
import { BlockchainModule } from "../../common/v1/info";
import { EntityKind } from "../../common/v1/info";
import { AuthInfo } from "../../common/v1/info";
/**
 * -----------------------------------------------------------------------------
 * Motor Node API
 * -----------------------------------------------------------------------------
 * (Client) InitializeRequest Message to Establish Sonr Host/API/Room
 *
 * @generated from protobuf message sonrio.motor.api.v1.InitializeRequest
 */
export interface InitializeRequest {
    /**
     * Identifier of this Device
     *
     * @generated from protobuf field: string device_id = 1;
     */
    deviceId: string;
    /**
     * Device Home Directory
     *
     * @generated from protobuf field: string home_dir = 2;
     */
    homeDir: string;
    /**
     * Device Library Support Directory
     *
     * @generated from protobuf field: string support_dir = 3;
     */
    supportDir: string;
    /**
     * Device Temporary Storage Directory
     *
     * @generated from protobuf field: string temp_dir = 4;
     */
    tempDir: string;
    /**
     * Enable Libp2p Host
     *
     * @generated from protobuf field: bool enable_host = 5;
     */
    enableHost: boolean;
    /**
     * Enable Discovery Service
     *
     * @generated from protobuf field: bool enable_discovery = 6;
     */
    enableDiscovery: boolean;
    /**
     * Enable Query Clients
     *
     * @generated from protobuf field: bool enable_query = 7;
     */
    enableQuery: boolean;
    /**
     * Discovery Latitude
     *
     * @generated from protobuf field: double discovery_latitude = 8;
     */
    discoveryLatitude: number; // optional - Default: 40.673010 (Sonr HQ)
    /**
     * Discovery Longitude
     *
     * @generated from protobuf field: double discovery_longitude = 9;
     */
    discoveryLongitude: number; // optional - Default: -73.994450 (Sonr HQ)
    /**
     * Public Key used for Device Authentication as DID Controller
     *
     * @generated from protobuf field: sonrio.common.v1.AuthInfo auth_info = 10;
     */
    authInfo?: AuthInfo; // optional
    /**
     * Application DID
     *
     * @generated from protobuf field: string app_did = 11;
     */
    appDid: string; // optional
}
/**
 * CreateAccount Request contains the three keys needed to create an account on Sonr
 *
 * @generated from protobuf message sonrio.motor.api.v1.CreateAccountRequest
 */
export interface CreateAccountRequest {
    /**
     * @generated from protobuf field: string password = 1;
     */
    password: string;
    /**
     * @generated from protobuf field: map<string, string> metadata = 2;
     */
    metadata: {
        [key: string]: string;
    };
}
/**
 * CreateAccountWithKeyRequest allows the DSC to be specified manually when creating a request.
 * Necessary for android (for now)
 *
 * @generated from protobuf message sonrio.motor.api.v1.CreateAccountWithKeysRequest
 */
export interface CreateAccountWithKeysRequest {
    /**
     * @generated from protobuf field: string password = 1;
     */
    password: string;
    /**
     * @generated from protobuf field: bytes aes_dsc_key = 2;
     */
    aesDscKey: Uint8Array;
    /**
     * @generated from protobuf field: bytes aes_psk_key = 3;
     */
    aesPskKey: Uint8Array;
    /**
     * @generated from protobuf field: map<string, string> metadata = 4;
     */
    metadata: {
        [key: string]: string;
    };
}
/**
 * Login requires the DID of the account being logged into,
 * and optionally a password if the vault pw is being used
 * The PSK and DSC will be fetched from the keychain
 *
 * @generated from protobuf message sonrio.motor.api.v1.LoginRequest
 */
export interface LoginRequest {
    /**
     * @generated from protobuf field: string did = 1;
     */
    did: string;
    /**
     * @generated from protobuf field: string password = 2;
     */
    password: string;
}
/**
 * @generated from protobuf message sonrio.motor.api.v1.LoginWithKeysRequest
 */
export interface LoginWithKeysRequest {
    /**
     * @generated from protobuf field: string did = 1;
     */
    did: string;
    /**
     * @generated from protobuf field: string password = 2;
     */
    password: string;
    /**
     * @generated from protobuf field: bytes aes_dsc_key = 3;
     */
    aesDscKey: Uint8Array;
    /**
     * @generated from protobuf field: bytes aes_psk_key = 4;
     */
    aesPskKey: Uint8Array;
}
/**
 * @generated from protobuf message sonrio.motor.api.v1.QueryRequest
 */
export interface QueryRequest {
    /**
     * @generated from protobuf field: string query = 1;
     */
    query: string;
    /**
     * @generated from protobuf field: sonrio.common.v1.EntityKind kind = 2;
     */
    kind: EntityKind;
    /**
     * @generated from protobuf field: sonrio.common.v1.BlockchainModule module = 3;
     */
    module: BlockchainModule;
}
/**
 * @generated from protobuf message sonrio.motor.api.v1.PaymentRequest
 */
export interface PaymentRequest {
    /**
     * @generated from protobuf field: string to = 1;
     */
    to: string;
    /**
     * @generated from protobuf field: string from = 2;
     */
    from: string;
    /**
     * @generated from protobuf field: int64 amount = 3;
     */
    amount: string;
    /**
     * @generated from protobuf field: string memo = 4;
     */
    memo: string;
}
/**
 * -----------------------------------------------------------------------------
 * Registry Models
 * -----------------------------------------------------------------------------
 *
 * @generated from protobuf message sonrio.motor.api.v1.QueryWhoIsRequest
 */
export interface QueryWhoIsRequest {
    /**
     * @generated from protobuf field: string did = 1;
     */
    did: string;
}
/**
 * -----------------------------------------------------------------------------
 * Schema Models
 * -----------------------------------------------------------------------------
 *
 * @generated from protobuf message sonrio.motor.api.v1.CreateSchemaRequest
 */
export interface CreateSchemaRequest {
    /**
     * @generated from protobuf field: string label = 1;
     */
    label: string;
    /**
     * @generated from protobuf field: map<string, sonrio.sonr.schema.SchemaKind> fields = 2;
     */
    fields: {
        [key: string]: SchemaKind;
    };
    /**
     * @generated from protobuf field: map<string, string> metadata = 3;
     */
    metadata: {
        [key: string]: string;
    };
}
/**
 * @generated from protobuf message sonrio.motor.api.v1.QueryWhatIsRequest
 */
export interface QueryWhatIsRequest {
    /**
     * @generated from protobuf field: string creator = 1;
     */
    creator: string;
    /**
     * @generated from protobuf field: string did = 2;
     */
    did: string;
}
/**
 * @generated from protobuf message sonrio.motor.api.v1.QueryWhatIsByCreatorRequest
 */
export interface QueryWhatIsByCreatorRequest {
    /**
     * @generated from protobuf field: string creator = 1;
     */
    creator: string;
    /**
     * @generated from protobuf field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
     */
    pagination?: PageRequest;
}
/**
 * @generated from protobuf message sonrio.motor.api.v1.QuerySchemaRequest
 */
export interface QuerySchemaRequest {
    /**
     * @generated from protobuf field: string creator = 1;
     */
    creator: string;
    /**
     * @generated from protobuf field: string did = 2;
     */
    did: string;
}
/**
 * -----------------------------------------------------------------------------
 * Bucket Models
 * -----------------------------------------------------------------------------
 *
 * @generated from protobuf message sonrio.motor.api.v1.QueryWhereIsRequest
 */
export interface QueryWhereIsRequest {
    /**
     * @generated from protobuf field: string creator = 1;
     */
    creator: string;
    /**
     * @generated from protobuf field: string did = 2;
     */
    did: string;
}
/**
 * @generated from protobuf message sonrio.motor.api.v1.QueryWhereIsByCreatorRequest
 */
export interface QueryWhereIsByCreatorRequest {
    /**
     * @generated from protobuf field: string creator = 1;
     */
    creator: string;
    /**
     * @generated from protobuf field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
     */
    pagination?: PageRequest;
}
/**
 * @generated from protobuf message sonrio.motor.api.v1.CreateBucketRequest
 */
export interface CreateBucketRequest {
    /**
     * @generated from protobuf field: string creator = 1;
     */
    creator: string;
    /**
     * @generated from protobuf field: string label = 2;
     */
    label: string;
    /**
     * @generated from protobuf field: sonrio.sonr.bucket.BucketVisibility visibility = 3;
     */
    visibility: BucketVisibility;
    /**
     * @generated from protobuf field: sonrio.sonr.bucket.BucketRole role = 4;
     */
    role: BucketRole;
    /**
     * @generated from protobuf field: repeated sonrio.sonr.bucket.BucketItem content = 5;
     */
    content: BucketItem[];
}
/**
 * @generated from protobuf message sonrio.motor.api.v1.UpdateBucketRequest
 */
export interface UpdateBucketRequest {
    /**
     * @generated from protobuf field: string creator = 1;
     */
    creator: string;
    /**
     * @generated from protobuf field: string did = 2;
     */
    did: string;
    /**
     * @generated from protobuf field: string label = 3;
     */
    label: string;
    /**
     * @generated from protobuf field: sonrio.sonr.bucket.BucketVisibility visibility = 4;
     */
    visibility: BucketVisibility;
    /**
     * @generated from protobuf field: sonrio.sonr.bucket.BucketRole role = 5;
     */
    role: BucketRole;
    /**
     * @generated from protobuf field: repeated sonrio.sonr.bucket.BucketItem content = 6;
     */
    content: BucketItem[];
}
/**
 * @generated from protobuf message sonrio.motor.api.v1.SeachBucketContentBySchemaRequest
 */
export interface SeachBucketContentBySchemaRequest {
    /**
     * Address of bucket owner
     *
     * @generated from protobuf field: string creator = 1;
     */
    creator: string;
    /**
     * bucket identifier
     *
     * @generated from protobuf field: string bucket_did = 2;
     */
    bucketDid: string;
    /**
     * schema identifier
     *
     * @generated from protobuf field: string schema_did = 3;
     */
    schemaDid: string;
}
/**
 * @generated from protobuf message sonrio.motor.api.v1.StatRequest
 */
export interface StatRequest {
}
/**
 * @generated from protobuf message sonrio.motor.api.v1.UploadDocumentRequest
 */
export interface UploadDocumentRequest {
    /**
     * @generated from protobuf field: string creator = 1;
     */
    creator: string;
    /**
     * @generated from protobuf field: string label = 2;
     */
    label: string;
    /**
     * The definition of the document used to build the values
     *
     * @generated from protobuf field: sonrio.sonr.schema.SchemaDefinition definition = 3;
     */
    definition?: SchemaDefinition;
    /**
     * the properties of this schemadocument
     *
     * @generated from protobuf field: repeated sonrio.sonr.schema.SchemaDocumentValue fields = 4;
     */
    fields: SchemaDocumentValue[];
}
/**
 * @generated from protobuf message sonrio.motor.api.v1.GetDocumentRequest
 */
export interface GetDocumentRequest {
    /**
     * @generated from protobuf field: string cid = 1;
     */
    cid: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class InitializeRequest$Type extends MessageType<InitializeRequest> {
    constructor() {
        super("sonrio.motor.api.v1.InitializeRequest", [
            { no: 1, name: "device_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "home_dir", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "support_dir", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "temp_dir", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "enable_host", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "enable_discovery", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "enable_query", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "discovery_latitude", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 9, name: "discovery_longitude", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 10, name: "auth_info", kind: "message", T: () => AuthInfo },
            { no: 11, name: "app_did", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<InitializeRequest>): InitializeRequest {
        const message = { deviceId: "", homeDir: "", supportDir: "", tempDir: "", enableHost: false, enableDiscovery: false, enableQuery: false, discoveryLatitude: 0, discoveryLongitude: 0, appDid: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<InitializeRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InitializeRequest): InitializeRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string device_id */ 1:
                    message.deviceId = reader.string();
                    break;
                case /* string home_dir */ 2:
                    message.homeDir = reader.string();
                    break;
                case /* string support_dir */ 3:
                    message.supportDir = reader.string();
                    break;
                case /* string temp_dir */ 4:
                    message.tempDir = reader.string();
                    break;
                case /* bool enable_host */ 5:
                    message.enableHost = reader.bool();
                    break;
                case /* bool enable_discovery */ 6:
                    message.enableDiscovery = reader.bool();
                    break;
                case /* bool enable_query */ 7:
                    message.enableQuery = reader.bool();
                    break;
                case /* double discovery_latitude */ 8:
                    message.discoveryLatitude = reader.double();
                    break;
                case /* double discovery_longitude */ 9:
                    message.discoveryLongitude = reader.double();
                    break;
                case /* sonrio.common.v1.AuthInfo auth_info */ 10:
                    message.authInfo = AuthInfo.internalBinaryRead(reader, reader.uint32(), options, message.authInfo);
                    break;
                case /* string app_did */ 11:
                    message.appDid = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InitializeRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string device_id = 1; */
        if (message.deviceId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.deviceId);
        /* string home_dir = 2; */
        if (message.homeDir !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.homeDir);
        /* string support_dir = 3; */
        if (message.supportDir !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.supportDir);
        /* string temp_dir = 4; */
        if (message.tempDir !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.tempDir);
        /* bool enable_host = 5; */
        if (message.enableHost !== false)
            writer.tag(5, WireType.Varint).bool(message.enableHost);
        /* bool enable_discovery = 6; */
        if (message.enableDiscovery !== false)
            writer.tag(6, WireType.Varint).bool(message.enableDiscovery);
        /* bool enable_query = 7; */
        if (message.enableQuery !== false)
            writer.tag(7, WireType.Varint).bool(message.enableQuery);
        /* double discovery_latitude = 8; */
        if (message.discoveryLatitude !== 0)
            writer.tag(8, WireType.Bit64).double(message.discoveryLatitude);
        /* double discovery_longitude = 9; */
        if (message.discoveryLongitude !== 0)
            writer.tag(9, WireType.Bit64).double(message.discoveryLongitude);
        /* sonrio.common.v1.AuthInfo auth_info = 10; */
        if (message.authInfo)
            AuthInfo.internalBinaryWrite(message.authInfo, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* string app_did = 11; */
        if (message.appDid !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.appDid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.motor.api.v1.InitializeRequest
 */
export const InitializeRequest = new InitializeRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateAccountRequest$Type extends MessageType<CreateAccountRequest> {
    constructor() {
        super("sonrio.motor.api.v1.CreateAccountRequest", [
            { no: 1, name: "password", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "metadata", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } }
        ]);
    }
    create(value?: PartialMessage<CreateAccountRequest>): CreateAccountRequest {
        const message = { password: "", metadata: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateAccountRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateAccountRequest): CreateAccountRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string password */ 1:
                    message.password = reader.string();
                    break;
                case /* map<string, string> metadata */ 2:
                    this.binaryReadMap2(message.metadata, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap2(map: CreateAccountRequest["metadata"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof CreateAccountRequest["metadata"] | undefined, val: CreateAccountRequest["metadata"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field sonrio.motor.api.v1.CreateAccountRequest.metadata");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message: CreateAccountRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string password = 1; */
        if (message.password !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.password);
        /* map<string, string> metadata = 2; */
        for (let k of Object.keys(message.metadata))
            writer.tag(2, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.metadata[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.motor.api.v1.CreateAccountRequest
 */
export const CreateAccountRequest = new CreateAccountRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateAccountWithKeysRequest$Type extends MessageType<CreateAccountWithKeysRequest> {
    constructor() {
        super("sonrio.motor.api.v1.CreateAccountWithKeysRequest", [
            { no: 1, name: "password", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "aes_dsc_key", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 3, name: "aes_psk_key", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 4, name: "metadata", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } }
        ]);
    }
    create(value?: PartialMessage<CreateAccountWithKeysRequest>): CreateAccountWithKeysRequest {
        const message = { password: "", aesDscKey: new Uint8Array(0), aesPskKey: new Uint8Array(0), metadata: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateAccountWithKeysRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateAccountWithKeysRequest): CreateAccountWithKeysRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string password */ 1:
                    message.password = reader.string();
                    break;
                case /* bytes aes_dsc_key */ 2:
                    message.aesDscKey = reader.bytes();
                    break;
                case /* bytes aes_psk_key */ 3:
                    message.aesPskKey = reader.bytes();
                    break;
                case /* map<string, string> metadata */ 4:
                    this.binaryReadMap4(message.metadata, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap4(map: CreateAccountWithKeysRequest["metadata"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof CreateAccountWithKeysRequest["metadata"] | undefined, val: CreateAccountWithKeysRequest["metadata"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field sonrio.motor.api.v1.CreateAccountWithKeysRequest.metadata");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message: CreateAccountWithKeysRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string password = 1; */
        if (message.password !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.password);
        /* bytes aes_dsc_key = 2; */
        if (message.aesDscKey.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.aesDscKey);
        /* bytes aes_psk_key = 3; */
        if (message.aesPskKey.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.aesPskKey);
        /* map<string, string> metadata = 4; */
        for (let k of Object.keys(message.metadata))
            writer.tag(4, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.metadata[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.motor.api.v1.CreateAccountWithKeysRequest
 */
export const CreateAccountWithKeysRequest = new CreateAccountWithKeysRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoginRequest$Type extends MessageType<LoginRequest> {
    constructor() {
        super("sonrio.motor.api.v1.LoginRequest", [
            { no: 1, name: "did", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "password", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LoginRequest>): LoginRequest {
        const message = { did: "", password: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LoginRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoginRequest): LoginRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string did */ 1:
                    message.did = reader.string();
                    break;
                case /* string password */ 2:
                    message.password = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoginRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string did = 1; */
        if (message.did !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.did);
        /* string password = 2; */
        if (message.password !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.password);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.motor.api.v1.LoginRequest
 */
export const LoginRequest = new LoginRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoginWithKeysRequest$Type extends MessageType<LoginWithKeysRequest> {
    constructor() {
        super("sonrio.motor.api.v1.LoginWithKeysRequest", [
            { no: 1, name: "did", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "password", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "aes_dsc_key", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 4, name: "aes_psk_key", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<LoginWithKeysRequest>): LoginWithKeysRequest {
        const message = { did: "", password: "", aesDscKey: new Uint8Array(0), aesPskKey: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LoginWithKeysRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoginWithKeysRequest): LoginWithKeysRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string did */ 1:
                    message.did = reader.string();
                    break;
                case /* string password */ 2:
                    message.password = reader.string();
                    break;
                case /* bytes aes_dsc_key */ 3:
                    message.aesDscKey = reader.bytes();
                    break;
                case /* bytes aes_psk_key */ 4:
                    message.aesPskKey = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoginWithKeysRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string did = 1; */
        if (message.did !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.did);
        /* string password = 2; */
        if (message.password !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.password);
        /* bytes aes_dsc_key = 3; */
        if (message.aesDscKey.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.aesDscKey);
        /* bytes aes_psk_key = 4; */
        if (message.aesPskKey.length)
            writer.tag(4, WireType.LengthDelimited).bytes(message.aesPskKey);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.motor.api.v1.LoginWithKeysRequest
 */
export const LoginWithKeysRequest = new LoginWithKeysRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryRequest$Type extends MessageType<QueryRequest> {
    constructor() {
        super("sonrio.motor.api.v1.QueryRequest", [
            { no: 1, name: "query", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "kind", kind: "enum", T: () => ["sonrio.common.v1.EntityKind", EntityKind] },
            { no: 3, name: "module", kind: "enum", T: () => ["sonrio.common.v1.BlockchainModule", BlockchainModule] }
        ]);
    }
    create(value?: PartialMessage<QueryRequest>): QueryRequest {
        const message = { query: "", kind: 0, module: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryRequest): QueryRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string query */ 1:
                    message.query = reader.string();
                    break;
                case /* sonrio.common.v1.EntityKind kind */ 2:
                    message.kind = reader.int32();
                    break;
                case /* sonrio.common.v1.BlockchainModule module */ 3:
                    message.module = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string query = 1; */
        if (message.query !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.query);
        /* sonrio.common.v1.EntityKind kind = 2; */
        if (message.kind !== 0)
            writer.tag(2, WireType.Varint).int32(message.kind);
        /* sonrio.common.v1.BlockchainModule module = 3; */
        if (message.module !== 0)
            writer.tag(3, WireType.Varint).int32(message.module);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.motor.api.v1.QueryRequest
 */
export const QueryRequest = new QueryRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PaymentRequest$Type extends MessageType<PaymentRequest> {
    constructor() {
        super("sonrio.motor.api.v1.PaymentRequest", [
            { no: 1, name: "to", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "from", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "amount", kind: "scalar", T: 3 /*ScalarType.INT64*/ },
            { no: 4, name: "memo", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PaymentRequest>): PaymentRequest {
        const message = { to: "", from: "", amount: "0", memo: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PaymentRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PaymentRequest): PaymentRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string to */ 1:
                    message.to = reader.string();
                    break;
                case /* string from */ 2:
                    message.from = reader.string();
                    break;
                case /* int64 amount */ 3:
                    message.amount = reader.int64().toString();
                    break;
                case /* string memo */ 4:
                    message.memo = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PaymentRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string to = 1; */
        if (message.to !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.to);
        /* string from = 2; */
        if (message.from !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.from);
        /* int64 amount = 3; */
        if (message.amount !== "0")
            writer.tag(3, WireType.Varint).int64(message.amount);
        /* string memo = 4; */
        if (message.memo !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.memo);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.motor.api.v1.PaymentRequest
 */
export const PaymentRequest = new PaymentRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryWhoIsRequest$Type extends MessageType<QueryWhoIsRequest> {
    constructor() {
        super("sonrio.motor.api.v1.QueryWhoIsRequest", [
            { no: 1, name: "did", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<QueryWhoIsRequest>): QueryWhoIsRequest {
        const message = { did: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryWhoIsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryWhoIsRequest): QueryWhoIsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string did */ 1:
                    message.did = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryWhoIsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string did = 1; */
        if (message.did !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.did);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.motor.api.v1.QueryWhoIsRequest
 */
export const QueryWhoIsRequest = new QueryWhoIsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateSchemaRequest$Type extends MessageType<CreateSchemaRequest> {
    constructor() {
        super("sonrio.motor.api.v1.CreateSchemaRequest", [
            { no: 1, name: "label", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "fields", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "enum", T: () => ["sonrio.sonr.schema.SchemaKind", SchemaKind] } },
            { no: 3, name: "metadata", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } }
        ]);
    }
    create(value?: PartialMessage<CreateSchemaRequest>): CreateSchemaRequest {
        const message = { label: "", fields: {}, metadata: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateSchemaRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateSchemaRequest): CreateSchemaRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string label */ 1:
                    message.label = reader.string();
                    break;
                case /* map<string, sonrio.sonr.schema.SchemaKind> fields */ 2:
                    this.binaryReadMap2(message.fields, reader, options);
                    break;
                case /* map<string, string> metadata */ 3:
                    this.binaryReadMap3(message.metadata, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap2(map: CreateSchemaRequest["fields"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof CreateSchemaRequest["fields"] | undefined, val: CreateSchemaRequest["fields"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.int32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field sonrio.motor.api.v1.CreateSchemaRequest.fields");
            }
        }
        map[key ?? ""] = val ?? 0;
    }
    private binaryReadMap3(map: CreateSchemaRequest["metadata"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof CreateSchemaRequest["metadata"] | undefined, val: CreateSchemaRequest["metadata"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field sonrio.motor.api.v1.CreateSchemaRequest.metadata");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message: CreateSchemaRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string label = 1; */
        if (message.label !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.label);
        /* map<string, sonrio.sonr.schema.SchemaKind> fields = 2; */
        for (let k of Object.keys(message.fields))
            writer.tag(2, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.Varint).int32(message.fields[k]).join();
        /* map<string, string> metadata = 3; */
        for (let k of Object.keys(message.metadata))
            writer.tag(3, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.metadata[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.motor.api.v1.CreateSchemaRequest
 */
export const CreateSchemaRequest = new CreateSchemaRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryWhatIsRequest$Type extends MessageType<QueryWhatIsRequest> {
    constructor() {
        super("sonrio.motor.api.v1.QueryWhatIsRequest", [
            { no: 1, name: "creator", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "did", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<QueryWhatIsRequest>): QueryWhatIsRequest {
        const message = { creator: "", did: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryWhatIsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryWhatIsRequest): QueryWhatIsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string creator */ 1:
                    message.creator = reader.string();
                    break;
                case /* string did */ 2:
                    message.did = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryWhatIsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string creator = 1; */
        if (message.creator !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.creator);
        /* string did = 2; */
        if (message.did !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.did);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.motor.api.v1.QueryWhatIsRequest
 */
export const QueryWhatIsRequest = new QueryWhatIsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryWhatIsByCreatorRequest$Type extends MessageType<QueryWhatIsByCreatorRequest> {
    constructor() {
        super("sonrio.motor.api.v1.QueryWhatIsByCreatorRequest", [
            { no: 1, name: "creator", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "pagination", kind: "message", T: () => PageRequest }
        ]);
    }
    create(value?: PartialMessage<QueryWhatIsByCreatorRequest>): QueryWhatIsByCreatorRequest {
        const message = { creator: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryWhatIsByCreatorRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryWhatIsByCreatorRequest): QueryWhatIsByCreatorRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string creator */ 1:
                    message.creator = reader.string();
                    break;
                case /* cosmos.base.query.v1beta1.PageRequest pagination */ 2:
                    message.pagination = PageRequest.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryWhatIsByCreatorRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string creator = 1; */
        if (message.creator !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.creator);
        /* cosmos.base.query.v1beta1.PageRequest pagination = 2; */
        if (message.pagination)
            PageRequest.internalBinaryWrite(message.pagination, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.motor.api.v1.QueryWhatIsByCreatorRequest
 */
export const QueryWhatIsByCreatorRequest = new QueryWhatIsByCreatorRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QuerySchemaRequest$Type extends MessageType<QuerySchemaRequest> {
    constructor() {
        super("sonrio.motor.api.v1.QuerySchemaRequest", [
            { no: 1, name: "creator", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "did", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<QuerySchemaRequest>): QuerySchemaRequest {
        const message = { creator: "", did: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QuerySchemaRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QuerySchemaRequest): QuerySchemaRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string creator */ 1:
                    message.creator = reader.string();
                    break;
                case /* string did */ 2:
                    message.did = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QuerySchemaRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string creator = 1; */
        if (message.creator !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.creator);
        /* string did = 2; */
        if (message.did !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.did);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.motor.api.v1.QuerySchemaRequest
 */
export const QuerySchemaRequest = new QuerySchemaRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryWhereIsRequest$Type extends MessageType<QueryWhereIsRequest> {
    constructor() {
        super("sonrio.motor.api.v1.QueryWhereIsRequest", [
            { no: 1, name: "creator", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "did", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<QueryWhereIsRequest>): QueryWhereIsRequest {
        const message = { creator: "", did: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryWhereIsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryWhereIsRequest): QueryWhereIsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string creator */ 1:
                    message.creator = reader.string();
                    break;
                case /* string did */ 2:
                    message.did = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryWhereIsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string creator = 1; */
        if (message.creator !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.creator);
        /* string did = 2; */
        if (message.did !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.did);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.motor.api.v1.QueryWhereIsRequest
 */
export const QueryWhereIsRequest = new QueryWhereIsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryWhereIsByCreatorRequest$Type extends MessageType<QueryWhereIsByCreatorRequest> {
    constructor() {
        super("sonrio.motor.api.v1.QueryWhereIsByCreatorRequest", [
            { no: 1, name: "creator", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "pagination", kind: "message", T: () => PageRequest }
        ]);
    }
    create(value?: PartialMessage<QueryWhereIsByCreatorRequest>): QueryWhereIsByCreatorRequest {
        const message = { creator: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryWhereIsByCreatorRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryWhereIsByCreatorRequest): QueryWhereIsByCreatorRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string creator */ 1:
                    message.creator = reader.string();
                    break;
                case /* cosmos.base.query.v1beta1.PageRequest pagination */ 2:
                    message.pagination = PageRequest.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryWhereIsByCreatorRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string creator = 1; */
        if (message.creator !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.creator);
        /* cosmos.base.query.v1beta1.PageRequest pagination = 2; */
        if (message.pagination)
            PageRequest.internalBinaryWrite(message.pagination, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.motor.api.v1.QueryWhereIsByCreatorRequest
 */
export const QueryWhereIsByCreatorRequest = new QueryWhereIsByCreatorRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateBucketRequest$Type extends MessageType<CreateBucketRequest> {
    constructor() {
        super("sonrio.motor.api.v1.CreateBucketRequest", [
            { no: 1, name: "creator", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "label", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "visibility", kind: "enum", T: () => ["sonrio.sonr.bucket.BucketVisibility", BucketVisibility] },
            { no: 4, name: "role", kind: "enum", T: () => ["sonrio.sonr.bucket.BucketRole", BucketRole] },
            { no: 5, name: "content", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => BucketItem }
        ]);
    }
    create(value?: PartialMessage<CreateBucketRequest>): CreateBucketRequest {
        const message = { creator: "", label: "", visibility: 0, role: 0, content: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateBucketRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateBucketRequest): CreateBucketRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string creator */ 1:
                    message.creator = reader.string();
                    break;
                case /* string label */ 2:
                    message.label = reader.string();
                    break;
                case /* sonrio.sonr.bucket.BucketVisibility visibility */ 3:
                    message.visibility = reader.int32();
                    break;
                case /* sonrio.sonr.bucket.BucketRole role */ 4:
                    message.role = reader.int32();
                    break;
                case /* repeated sonrio.sonr.bucket.BucketItem content */ 5:
                    message.content.push(BucketItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateBucketRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string creator = 1; */
        if (message.creator !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.creator);
        /* string label = 2; */
        if (message.label !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.label);
        /* sonrio.sonr.bucket.BucketVisibility visibility = 3; */
        if (message.visibility !== 0)
            writer.tag(3, WireType.Varint).int32(message.visibility);
        /* sonrio.sonr.bucket.BucketRole role = 4; */
        if (message.role !== 0)
            writer.tag(4, WireType.Varint).int32(message.role);
        /* repeated sonrio.sonr.bucket.BucketItem content = 5; */
        for (let i = 0; i < message.content.length; i++)
            BucketItem.internalBinaryWrite(message.content[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.motor.api.v1.CreateBucketRequest
 */
export const CreateBucketRequest = new CreateBucketRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateBucketRequest$Type extends MessageType<UpdateBucketRequest> {
    constructor() {
        super("sonrio.motor.api.v1.UpdateBucketRequest", [
            { no: 1, name: "creator", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "did", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "label", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "visibility", kind: "enum", T: () => ["sonrio.sonr.bucket.BucketVisibility", BucketVisibility] },
            { no: 5, name: "role", kind: "enum", T: () => ["sonrio.sonr.bucket.BucketRole", BucketRole] },
            { no: 6, name: "content", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => BucketItem }
        ]);
    }
    create(value?: PartialMessage<UpdateBucketRequest>): UpdateBucketRequest {
        const message = { creator: "", did: "", label: "", visibility: 0, role: 0, content: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateBucketRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateBucketRequest): UpdateBucketRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string creator */ 1:
                    message.creator = reader.string();
                    break;
                case /* string did */ 2:
                    message.did = reader.string();
                    break;
                case /* string label */ 3:
                    message.label = reader.string();
                    break;
                case /* sonrio.sonr.bucket.BucketVisibility visibility */ 4:
                    message.visibility = reader.int32();
                    break;
                case /* sonrio.sonr.bucket.BucketRole role */ 5:
                    message.role = reader.int32();
                    break;
                case /* repeated sonrio.sonr.bucket.BucketItem content */ 6:
                    message.content.push(BucketItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateBucketRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string creator = 1; */
        if (message.creator !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.creator);
        /* string did = 2; */
        if (message.did !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.did);
        /* string label = 3; */
        if (message.label !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.label);
        /* sonrio.sonr.bucket.BucketVisibility visibility = 4; */
        if (message.visibility !== 0)
            writer.tag(4, WireType.Varint).int32(message.visibility);
        /* sonrio.sonr.bucket.BucketRole role = 5; */
        if (message.role !== 0)
            writer.tag(5, WireType.Varint).int32(message.role);
        /* repeated sonrio.sonr.bucket.BucketItem content = 6; */
        for (let i = 0; i < message.content.length; i++)
            BucketItem.internalBinaryWrite(message.content[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.motor.api.v1.UpdateBucketRequest
 */
export const UpdateBucketRequest = new UpdateBucketRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SeachBucketContentBySchemaRequest$Type extends MessageType<SeachBucketContentBySchemaRequest> {
    constructor() {
        super("sonrio.motor.api.v1.SeachBucketContentBySchemaRequest", [
            { no: 1, name: "creator", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "bucket_did", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "schema_did", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SeachBucketContentBySchemaRequest>): SeachBucketContentBySchemaRequest {
        const message = { creator: "", bucketDid: "", schemaDid: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SeachBucketContentBySchemaRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SeachBucketContentBySchemaRequest): SeachBucketContentBySchemaRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string creator */ 1:
                    message.creator = reader.string();
                    break;
                case /* string bucket_did */ 2:
                    message.bucketDid = reader.string();
                    break;
                case /* string schema_did */ 3:
                    message.schemaDid = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SeachBucketContentBySchemaRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string creator = 1; */
        if (message.creator !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.creator);
        /* string bucket_did = 2; */
        if (message.bucketDid !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.bucketDid);
        /* string schema_did = 3; */
        if (message.schemaDid !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.schemaDid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.motor.api.v1.SeachBucketContentBySchemaRequest
 */
export const SeachBucketContentBySchemaRequest = new SeachBucketContentBySchemaRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StatRequest$Type extends MessageType<StatRequest> {
    constructor() {
        super("sonrio.motor.api.v1.StatRequest", []);
    }
    create(value?: PartialMessage<StatRequest>): StatRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StatRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StatRequest): StatRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: StatRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.motor.api.v1.StatRequest
 */
export const StatRequest = new StatRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UploadDocumentRequest$Type extends MessageType<UploadDocumentRequest> {
    constructor() {
        super("sonrio.motor.api.v1.UploadDocumentRequest", [
            { no: 1, name: "creator", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "label", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "definition", kind: "message", T: () => SchemaDefinition },
            { no: 4, name: "fields", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => SchemaDocumentValue }
        ]);
    }
    create(value?: PartialMessage<UploadDocumentRequest>): UploadDocumentRequest {
        const message = { creator: "", label: "", fields: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UploadDocumentRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UploadDocumentRequest): UploadDocumentRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string creator */ 1:
                    message.creator = reader.string();
                    break;
                case /* string label */ 2:
                    message.label = reader.string();
                    break;
                case /* sonrio.sonr.schema.SchemaDefinition definition */ 3:
                    message.definition = SchemaDefinition.internalBinaryRead(reader, reader.uint32(), options, message.definition);
                    break;
                case /* repeated sonrio.sonr.schema.SchemaDocumentValue fields */ 4:
                    message.fields.push(SchemaDocumentValue.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UploadDocumentRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string creator = 1; */
        if (message.creator !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.creator);
        /* string label = 2; */
        if (message.label !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.label);
        /* sonrio.sonr.schema.SchemaDefinition definition = 3; */
        if (message.definition)
            SchemaDefinition.internalBinaryWrite(message.definition, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated sonrio.sonr.schema.SchemaDocumentValue fields = 4; */
        for (let i = 0; i < message.fields.length; i++)
            SchemaDocumentValue.internalBinaryWrite(message.fields[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.motor.api.v1.UploadDocumentRequest
 */
export const UploadDocumentRequest = new UploadDocumentRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetDocumentRequest$Type extends MessageType<GetDocumentRequest> {
    constructor() {
        super("sonrio.motor.api.v1.GetDocumentRequest", [
            { no: 1, name: "cid", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetDocumentRequest>): GetDocumentRequest {
        const message = { cid: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetDocumentRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetDocumentRequest): GetDocumentRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string cid */ 1:
                    message.cid = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetDocumentRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string cid = 1; */
        if (message.cid !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.cid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.motor.api.v1.GetDocumentRequest
 */
export const GetDocumentRequest = new GetDocumentRequest$Type();
