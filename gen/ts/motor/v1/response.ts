// @generated by protobuf-ts 2.8.1 with parameter generate_dependencies,long_type_string
// @generated from protobuf file "motor/v1/response.proto" (package "sonrio.motor.api.v1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { SchemaDocument } from "../../schema/v1/document";
import { DIDDocument } from "../../registry/did";
import { BucketContent } from "../../bucket/bucket";
import { PageResponse } from "../../cosmos/base/query/v1beta1/pagination";
import { WhereIs } from "../../bucket/where_is";
import { EntityKind } from "../../common/v1/info";
import { BlockchainModule } from "../../common/v1/info";
import { WhatIs } from "../../schema/v1/what_is";
import { WhoIs } from "../../registry/who_is";
import { SchemaDefinition } from "../../schema/v1/schema";
/**
 * @generated from protobuf message sonrio.motor.api.v1.InitializeResponse
 */
export interface InitializeResponse {
    /**
     * @generated from protobuf field: bool success = 1;
     */
    success: boolean;
    /**
     * @generated from protobuf field: repeated sonrio.sonr.schema.SchemaDefinition definitions = 2;
     */
    definitions: SchemaDefinition[];
}
/**
 * @generated from protobuf message sonrio.motor.api.v1.CreateAccountResponse
 */
export interface CreateAccountResponse {
    /**
     * @generated from protobuf field: string address = 1;
     */
    address: string;
    /**
     * @generated from protobuf field: sonrio.sonr.registry.WhoIs who_is = 2;
     */
    whoIs?: WhoIs;
}
/**
 * @generated from protobuf message sonrio.motor.api.v1.CreateAccountWithKeysResponse
 */
export interface CreateAccountWithKeysResponse {
    /**
     * @generated from protobuf field: string address = 1;
     */
    address: string;
    /**
     * @generated from protobuf field: bytes aes_psk_key = 2;
     */
    aesPskKey: Uint8Array;
    /**
     * @generated from protobuf field: sonrio.sonr.registry.WhoIs who_is = 3;
     */
    whoIs?: WhoIs;
}
/**
 * @generated from protobuf message sonrio.motor.api.v1.LoginResponse
 */
export interface LoginResponse {
    /**
     * @generated from protobuf field: bool success = 1;
     */
    success: boolean;
    /**
     * @generated from protobuf field: sonrio.sonr.registry.WhoIs who_is = 2;
     */
    whoIs?: WhoIs;
}
/**
 * @generated from protobuf message sonrio.motor.api.v1.CreateSchemaResponse
 */
export interface CreateSchemaResponse {
    /**
     * @generated from protobuf field: int32 status = 1;
     */
    status: number;
    /**
     * @generated from protobuf field: sonrio.sonr.schema.WhatIs what_is = 2;
     */
    whatIs?: WhatIs;
    /**
     * @generated from protobuf field: sonrio.sonr.schema.SchemaDefinition schema_definition = 3;
     */
    schemaDefinition?: SchemaDefinition;
}
/**
 * @generated from protobuf message sonrio.motor.api.v1.QueryResponse
 */
export interface QueryResponse {
    /**
     * @generated from protobuf field: int32 code = 1;
     */
    code: number;
    /**
     * @generated from protobuf field: string query = 2;
     */
    query: string;
    /**
     * @generated from protobuf field: sonrio.common.v1.BlockchainModule module = 3;
     */
    module: BlockchainModule;
    /**
     * @generated from protobuf field: repeated sonrio.motor.api.v1.QueryResultItem results = 4;
     */
    results: QueryResultItem[];
}
/**
 * @generated from protobuf message sonrio.motor.api.v1.QueryResultItem
 */
export interface QueryResultItem {
    /**
     * @generated from protobuf field: string did = 1;
     */
    did: string;
    /**
     * @generated from protobuf field: sonrio.common.v1.EntityKind kind = 2;
     */
    kind: EntityKind;
    /**
     * @generated from protobuf field: sonrio.sonr.registry.WhoIs who_is = 3;
     */
    whoIs?: WhoIs; // optional
    /**
     * @generated from protobuf field: sonrio.sonr.schema.WhatIs what_is = 4;
     */
    whatIs?: WhatIs; // optional
    /**
     * @generated from protobuf field: sonrio.sonr.schema.SchemaDefinition schema_definition = 5;
     */
    schemaDefinition?: SchemaDefinition; // optional
    /**
     * @generated from protobuf field: sonrio.sonr.bucket.WhereIs where_is = 6;
     */
    whereIs?: WhereIs; // optional
    /**
     * @generated from protobuf field: repeated sonrio.sonr.bucket.WhereIs where_is_list = 7;
     */
    whereIsList: WhereIs[]; // optional
}
/**
 * @generated from protobuf message sonrio.motor.api.v1.QueryWhoIsResponse
 */
export interface QueryWhoIsResponse {
    /**
     * @generated from protobuf field: int32 code = 1;
     */
    code: number;
    /**
     * @generated from protobuf field: sonrio.sonr.registry.WhoIs who_is = 2;
     */
    whoIs?: WhoIs;
}
/**
 * @generated from protobuf message sonrio.motor.api.v1.QueryWhatIsResponse
 */
export interface QueryWhatIsResponse {
    /**
     * @generated from protobuf field: int32 code = 1;
     */
    code: number;
    /**
     * @generated from protobuf field: sonrio.sonr.schema.WhatIs what_is = 2;
     */
    whatIs?: WhatIs;
    /**
     * @generated from protobuf field: sonrio.sonr.schema.SchemaDefinition schema = 3;
     */
    schema?: SchemaDefinition;
}
/**
 * @generated from protobuf message sonrio.motor.api.v1.QueryWhatIsByCreatorResponse
 */
export interface QueryWhatIsByCreatorResponse {
    /**
     * @generated from protobuf field: int32 code = 1;
     */
    code: number;
    /**
     * @generated from protobuf field: repeated sonrio.sonr.schema.WhatIs what_is = 2;
     */
    whatIs: WhatIs[];
    /**
     * @generated from protobuf field: map<string, sonrio.sonr.schema.SchemaDefinition> schemas = 3;
     */
    schemas: {
        [key: string]: SchemaDefinition;
    };
    /**
     * @generated from protobuf field: cosmos.base.query.v1beta1.PageResponse pagination = 4;
     */
    pagination?: PageResponse;
}
/**
 * @generated from protobuf message sonrio.motor.api.v1.QueryWhereIsByCreatorResponse
 */
export interface QueryWhereIsByCreatorResponse {
    /**
     * @generated from protobuf field: int32 code = 1;
     */
    code: number;
    /**
     * @generated from protobuf field: repeated sonrio.sonr.bucket.WhereIs where_is = 2;
     */
    whereIs: WhereIs[];
    /**
     * @generated from protobuf field: cosmos.base.query.v1beta1.PageResponse pagination = 3;
     */
    pagination?: PageResponse;
}
/**
 * @generated from protobuf message sonrio.motor.api.v1.ObjectReference
 */
export interface ObjectReference {
    /**
     * @generated from protobuf field: string did = 1;
     */
    did: string;
    /**
     * @generated from protobuf field: string label = 2;
     */
    label: string;
    /**
     * @generated from protobuf field: string cid = 3;
     */
    cid: string;
}
/**
 * @generated from protobuf message sonrio.motor.api.v1.UploadObjectResponse
 */
export interface UploadObjectResponse {
    /**
     * @generated from protobuf field: int32 code = 1;
     */
    code: number;
    /**
     * @generated from protobuf field: sonrio.motor.api.v1.ObjectReference reference = 2;
     */
    reference?: ObjectReference;
    /**
     * @generated from protobuf field: string message = 3;
     */
    message: string;
}
/**
 * @generated from protobuf message sonrio.motor.api.v1.CreateBucketResponse
 */
export interface CreateBucketResponse {
    /**
     * @generated from protobuf field: string did = 1;
     */
    did: string;
}
/**
 * @generated from protobuf message sonrio.motor.api.v1.UpdateBucketResponse
 */
export interface UpdateBucketResponse {
    /**
     * @generated from protobuf field: int32 status = 1;
     */
    status: number;
    /**
     * @generated from protobuf field: sonrio.sonr.bucket.WhereIs where_is = 2;
     */
    whereIs?: WhereIs;
}
/**
 * @generated from protobuf message sonrio.motor.api.v1.QueryWhereIsResponse
 */
export interface QueryWhereIsResponse {
    /**
     * @generated from protobuf field: int32 code = 1;
     */
    code: number;
    /**
     * @generated from protobuf field: sonrio.sonr.bucket.WhereIs where_is = 2;
     */
    whereIs?: WhereIs;
}
/**
 * @generated from protobuf message sonrio.motor.api.v1.BucketContentList
 */
export interface BucketContentList {
    /**
     * @generated from protobuf field: repeated sonrio.sonr.bucket.BucketContent buckets = 1;
     */
    buckets: BucketContent[];
}
/**
 * @generated from protobuf message sonrio.motor.api.v1.StatResponse
 */
export interface StatResponse {
    /**
     * @generated from protobuf field: string address = 1;
     */
    address: string;
    /**
     * @generated from protobuf field: sonrio.sonr.registry.DIDDocument did_document = 2;
     */
    didDocument?: DIDDocument;
    /**
     * @generated from protobuf field: int32 balance = 3;
     */
    balance: number;
    /**
     * @generated from protobuf field: int32 stake = 4;
     */
    stake: number;
}
/**
 * @generated from protobuf message sonrio.motor.api.v1.PaymentResponse
 */
export interface PaymentResponse {
    /**
     * @generated from protobuf field: int32 code = 1;
     */
    code: number;
    /**
     * @generated from protobuf field: string message = 2;
     */
    message: string;
    /**
     * @generated from protobuf field: string tx_hash = 3;
     */
    txHash: string;
    /**
     * @generated from protobuf field: int32 updated_balance = 4;
     */
    updatedBalance: number;
}
/**
 * @generated from protobuf message sonrio.motor.api.v1.SearchBucketContentBySchemaResponse
 */
export interface SearchBucketContentBySchemaResponse {
    /**
     * @generated from protobuf field: int32 status = 1;
     */
    status: number;
    /**
     * @generated from protobuf field: string bucket_did = 2;
     */
    bucketDid: string;
    /**
     * @generated from protobuf field: string schema_did = 3;
     */
    schemaDid: string;
    /**
     * @generated from protobuf field: repeated bytes content = 4;
     */
    content: Uint8Array[];
}
/**
 * @generated from protobuf message sonrio.motor.api.v1.SearchResponse
 */
export interface SearchResponse {
    /**
     * @generated from protobuf field: int32 status = 1;
     */
    status: number;
    /**
     * @generated from protobuf field: string resource_did = 2;
     */
    resourceDid: string;
    /**
     * @generated from protobuf field: string content_did = 3;
     */
    contentDid: string;
    /**
     * @generated from protobuf field: repeated bytes content = 4;
     */
    content: Uint8Array[];
}
/**
 * @generated from protobuf message sonrio.motor.api.v1.UploadDocumentResponse
 */
export interface UploadDocumentResponse {
    /**
     * @generated from protobuf field: int32 status = 1;
     */
    status: number;
    /**
     * @generated from protobuf field: string did = 2;
     */
    did: string;
    /**
     * @generated from protobuf field: string cid = 3;
     */
    cid: string;
    /**
     * @generated from protobuf field: sonrio.sonr.schema.SchemaDocument document = 4;
     */
    document?: SchemaDocument;
}
/**
 * @generated from protobuf message sonrio.motor.api.v1.GetDocumentResponse
 */
export interface GetDocumentResponse {
    /**
     * @generated from protobuf field: int32 status = 1;
     */
    status: number;
    /**
     * @generated from protobuf field: string did = 2;
     */
    did: string;
    /**
     * @generated from protobuf field: string cid = 3;
     */
    cid: string;
    /**
     * @generated from protobuf field: sonrio.sonr.schema.SchemaDocument document = 4;
     */
    document?: SchemaDocument;
}
// @generated message type with reflection information, may provide speed optimized methods
class InitializeResponse$Type extends MessageType<InitializeResponse> {
    constructor() {
        super("sonrio.motor.api.v1.InitializeResponse", [
            { no: 1, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "definitions", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => SchemaDefinition }
        ]);
    }
    create(value?: PartialMessage<InitializeResponse>): InitializeResponse {
        const message = { success: false, definitions: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<InitializeResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InitializeResponse): InitializeResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool success */ 1:
                    message.success = reader.bool();
                    break;
                case /* repeated sonrio.sonr.schema.SchemaDefinition definitions */ 2:
                    message.definitions.push(SchemaDefinition.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InitializeResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool success = 1; */
        if (message.success !== false)
            writer.tag(1, WireType.Varint).bool(message.success);
        /* repeated sonrio.sonr.schema.SchemaDefinition definitions = 2; */
        for (let i = 0; i < message.definitions.length; i++)
            SchemaDefinition.internalBinaryWrite(message.definitions[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.motor.api.v1.InitializeResponse
 */
export const InitializeResponse = new InitializeResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateAccountResponse$Type extends MessageType<CreateAccountResponse> {
    constructor() {
        super("sonrio.motor.api.v1.CreateAccountResponse", [
            { no: 1, name: "address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "who_is", kind: "message", T: () => WhoIs }
        ]);
    }
    create(value?: PartialMessage<CreateAccountResponse>): CreateAccountResponse {
        const message = { address: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateAccountResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateAccountResponse): CreateAccountResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string address */ 1:
                    message.address = reader.string();
                    break;
                case /* sonrio.sonr.registry.WhoIs who_is */ 2:
                    message.whoIs = WhoIs.internalBinaryRead(reader, reader.uint32(), options, message.whoIs);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateAccountResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string address = 1; */
        if (message.address !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.address);
        /* sonrio.sonr.registry.WhoIs who_is = 2; */
        if (message.whoIs)
            WhoIs.internalBinaryWrite(message.whoIs, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.motor.api.v1.CreateAccountResponse
 */
export const CreateAccountResponse = new CreateAccountResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateAccountWithKeysResponse$Type extends MessageType<CreateAccountWithKeysResponse> {
    constructor() {
        super("sonrio.motor.api.v1.CreateAccountWithKeysResponse", [
            { no: 1, name: "address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "aes_psk_key", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 3, name: "who_is", kind: "message", T: () => WhoIs }
        ]);
    }
    create(value?: PartialMessage<CreateAccountWithKeysResponse>): CreateAccountWithKeysResponse {
        const message = { address: "", aesPskKey: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateAccountWithKeysResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateAccountWithKeysResponse): CreateAccountWithKeysResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string address */ 1:
                    message.address = reader.string();
                    break;
                case /* bytes aes_psk_key */ 2:
                    message.aesPskKey = reader.bytes();
                    break;
                case /* sonrio.sonr.registry.WhoIs who_is */ 3:
                    message.whoIs = WhoIs.internalBinaryRead(reader, reader.uint32(), options, message.whoIs);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateAccountWithKeysResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string address = 1; */
        if (message.address !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.address);
        /* bytes aes_psk_key = 2; */
        if (message.aesPskKey.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.aesPskKey);
        /* sonrio.sonr.registry.WhoIs who_is = 3; */
        if (message.whoIs)
            WhoIs.internalBinaryWrite(message.whoIs, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.motor.api.v1.CreateAccountWithKeysResponse
 */
export const CreateAccountWithKeysResponse = new CreateAccountWithKeysResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoginResponse$Type extends MessageType<LoginResponse> {
    constructor() {
        super("sonrio.motor.api.v1.LoginResponse", [
            { no: 1, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "who_is", kind: "message", T: () => WhoIs }
        ]);
    }
    create(value?: PartialMessage<LoginResponse>): LoginResponse {
        const message = { success: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LoginResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoginResponse): LoginResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool success */ 1:
                    message.success = reader.bool();
                    break;
                case /* sonrio.sonr.registry.WhoIs who_is */ 2:
                    message.whoIs = WhoIs.internalBinaryRead(reader, reader.uint32(), options, message.whoIs);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoginResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool success = 1; */
        if (message.success !== false)
            writer.tag(1, WireType.Varint).bool(message.success);
        /* sonrio.sonr.registry.WhoIs who_is = 2; */
        if (message.whoIs)
            WhoIs.internalBinaryWrite(message.whoIs, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.motor.api.v1.LoginResponse
 */
export const LoginResponse = new LoginResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateSchemaResponse$Type extends MessageType<CreateSchemaResponse> {
    constructor() {
        super("sonrio.motor.api.v1.CreateSchemaResponse", [
            { no: 1, name: "status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "what_is", kind: "message", T: () => WhatIs },
            { no: 3, name: "schema_definition", kind: "message", T: () => SchemaDefinition }
        ]);
    }
    create(value?: PartialMessage<CreateSchemaResponse>): CreateSchemaResponse {
        const message = { status: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateSchemaResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateSchemaResponse): CreateSchemaResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 status */ 1:
                    message.status = reader.int32();
                    break;
                case /* sonrio.sonr.schema.WhatIs what_is */ 2:
                    message.whatIs = WhatIs.internalBinaryRead(reader, reader.uint32(), options, message.whatIs);
                    break;
                case /* sonrio.sonr.schema.SchemaDefinition schema_definition */ 3:
                    message.schemaDefinition = SchemaDefinition.internalBinaryRead(reader, reader.uint32(), options, message.schemaDefinition);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateSchemaResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 status = 1; */
        if (message.status !== 0)
            writer.tag(1, WireType.Varint).int32(message.status);
        /* sonrio.sonr.schema.WhatIs what_is = 2; */
        if (message.whatIs)
            WhatIs.internalBinaryWrite(message.whatIs, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* sonrio.sonr.schema.SchemaDefinition schema_definition = 3; */
        if (message.schemaDefinition)
            SchemaDefinition.internalBinaryWrite(message.schemaDefinition, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.motor.api.v1.CreateSchemaResponse
 */
export const CreateSchemaResponse = new CreateSchemaResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryResponse$Type extends MessageType<QueryResponse> {
    constructor() {
        super("sonrio.motor.api.v1.QueryResponse", [
            { no: 1, name: "code", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "query", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "module", kind: "enum", T: () => ["sonrio.common.v1.BlockchainModule", BlockchainModule] },
            { no: 4, name: "results", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => QueryResultItem }
        ]);
    }
    create(value?: PartialMessage<QueryResponse>): QueryResponse {
        const message = { code: 0, query: "", module: 0, results: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryResponse): QueryResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 code */ 1:
                    message.code = reader.int32();
                    break;
                case /* string query */ 2:
                    message.query = reader.string();
                    break;
                case /* sonrio.common.v1.BlockchainModule module */ 3:
                    message.module = reader.int32();
                    break;
                case /* repeated sonrio.motor.api.v1.QueryResultItem results */ 4:
                    message.results.push(QueryResultItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 code = 1; */
        if (message.code !== 0)
            writer.tag(1, WireType.Varint).int32(message.code);
        /* string query = 2; */
        if (message.query !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.query);
        /* sonrio.common.v1.BlockchainModule module = 3; */
        if (message.module !== 0)
            writer.tag(3, WireType.Varint).int32(message.module);
        /* repeated sonrio.motor.api.v1.QueryResultItem results = 4; */
        for (let i = 0; i < message.results.length; i++)
            QueryResultItem.internalBinaryWrite(message.results[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.motor.api.v1.QueryResponse
 */
export const QueryResponse = new QueryResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryResultItem$Type extends MessageType<QueryResultItem> {
    constructor() {
        super("sonrio.motor.api.v1.QueryResultItem", [
            { no: 1, name: "did", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "kind", kind: "enum", T: () => ["sonrio.common.v1.EntityKind", EntityKind] },
            { no: 3, name: "who_is", kind: "message", T: () => WhoIs },
            { no: 4, name: "what_is", kind: "message", T: () => WhatIs },
            { no: 5, name: "schema_definition", kind: "message", T: () => SchemaDefinition },
            { no: 6, name: "where_is", kind: "message", T: () => WhereIs },
            { no: 7, name: "where_is_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => WhereIs }
        ]);
    }
    create(value?: PartialMessage<QueryResultItem>): QueryResultItem {
        const message = { did: "", kind: 0, whereIsList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryResultItem>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryResultItem): QueryResultItem {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string did */ 1:
                    message.did = reader.string();
                    break;
                case /* sonrio.common.v1.EntityKind kind */ 2:
                    message.kind = reader.int32();
                    break;
                case /* sonrio.sonr.registry.WhoIs who_is */ 3:
                    message.whoIs = WhoIs.internalBinaryRead(reader, reader.uint32(), options, message.whoIs);
                    break;
                case /* sonrio.sonr.schema.WhatIs what_is */ 4:
                    message.whatIs = WhatIs.internalBinaryRead(reader, reader.uint32(), options, message.whatIs);
                    break;
                case /* sonrio.sonr.schema.SchemaDefinition schema_definition */ 5:
                    message.schemaDefinition = SchemaDefinition.internalBinaryRead(reader, reader.uint32(), options, message.schemaDefinition);
                    break;
                case /* sonrio.sonr.bucket.WhereIs where_is */ 6:
                    message.whereIs = WhereIs.internalBinaryRead(reader, reader.uint32(), options, message.whereIs);
                    break;
                case /* repeated sonrio.sonr.bucket.WhereIs where_is_list */ 7:
                    message.whereIsList.push(WhereIs.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryResultItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string did = 1; */
        if (message.did !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.did);
        /* sonrio.common.v1.EntityKind kind = 2; */
        if (message.kind !== 0)
            writer.tag(2, WireType.Varint).int32(message.kind);
        /* sonrio.sonr.registry.WhoIs who_is = 3; */
        if (message.whoIs)
            WhoIs.internalBinaryWrite(message.whoIs, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* sonrio.sonr.schema.WhatIs what_is = 4; */
        if (message.whatIs)
            WhatIs.internalBinaryWrite(message.whatIs, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* sonrio.sonr.schema.SchemaDefinition schema_definition = 5; */
        if (message.schemaDefinition)
            SchemaDefinition.internalBinaryWrite(message.schemaDefinition, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* sonrio.sonr.bucket.WhereIs where_is = 6; */
        if (message.whereIs)
            WhereIs.internalBinaryWrite(message.whereIs, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* repeated sonrio.sonr.bucket.WhereIs where_is_list = 7; */
        for (let i = 0; i < message.whereIsList.length; i++)
            WhereIs.internalBinaryWrite(message.whereIsList[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.motor.api.v1.QueryResultItem
 */
export const QueryResultItem = new QueryResultItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryWhoIsResponse$Type extends MessageType<QueryWhoIsResponse> {
    constructor() {
        super("sonrio.motor.api.v1.QueryWhoIsResponse", [
            { no: 1, name: "code", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "who_is", kind: "message", T: () => WhoIs }
        ]);
    }
    create(value?: PartialMessage<QueryWhoIsResponse>): QueryWhoIsResponse {
        const message = { code: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryWhoIsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryWhoIsResponse): QueryWhoIsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 code */ 1:
                    message.code = reader.int32();
                    break;
                case /* sonrio.sonr.registry.WhoIs who_is */ 2:
                    message.whoIs = WhoIs.internalBinaryRead(reader, reader.uint32(), options, message.whoIs);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryWhoIsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 code = 1; */
        if (message.code !== 0)
            writer.tag(1, WireType.Varint).int32(message.code);
        /* sonrio.sonr.registry.WhoIs who_is = 2; */
        if (message.whoIs)
            WhoIs.internalBinaryWrite(message.whoIs, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.motor.api.v1.QueryWhoIsResponse
 */
export const QueryWhoIsResponse = new QueryWhoIsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryWhatIsResponse$Type extends MessageType<QueryWhatIsResponse> {
    constructor() {
        super("sonrio.motor.api.v1.QueryWhatIsResponse", [
            { no: 1, name: "code", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "what_is", kind: "message", T: () => WhatIs },
            { no: 3, name: "schema", kind: "message", T: () => SchemaDefinition }
        ]);
    }
    create(value?: PartialMessage<QueryWhatIsResponse>): QueryWhatIsResponse {
        const message = { code: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryWhatIsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryWhatIsResponse): QueryWhatIsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 code */ 1:
                    message.code = reader.int32();
                    break;
                case /* sonrio.sonr.schema.WhatIs what_is */ 2:
                    message.whatIs = WhatIs.internalBinaryRead(reader, reader.uint32(), options, message.whatIs);
                    break;
                case /* sonrio.sonr.schema.SchemaDefinition schema */ 3:
                    message.schema = SchemaDefinition.internalBinaryRead(reader, reader.uint32(), options, message.schema);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryWhatIsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 code = 1; */
        if (message.code !== 0)
            writer.tag(1, WireType.Varint).int32(message.code);
        /* sonrio.sonr.schema.WhatIs what_is = 2; */
        if (message.whatIs)
            WhatIs.internalBinaryWrite(message.whatIs, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* sonrio.sonr.schema.SchemaDefinition schema = 3; */
        if (message.schema)
            SchemaDefinition.internalBinaryWrite(message.schema, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.motor.api.v1.QueryWhatIsResponse
 */
export const QueryWhatIsResponse = new QueryWhatIsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryWhatIsByCreatorResponse$Type extends MessageType<QueryWhatIsByCreatorResponse> {
    constructor() {
        super("sonrio.motor.api.v1.QueryWhatIsByCreatorResponse", [
            { no: 1, name: "code", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "what_is", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => WhatIs },
            { no: 3, name: "schemas", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => SchemaDefinition } },
            { no: 4, name: "pagination", kind: "message", T: () => PageResponse }
        ]);
    }
    create(value?: PartialMessage<QueryWhatIsByCreatorResponse>): QueryWhatIsByCreatorResponse {
        const message = { code: 0, whatIs: [], schemas: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryWhatIsByCreatorResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryWhatIsByCreatorResponse): QueryWhatIsByCreatorResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 code */ 1:
                    message.code = reader.int32();
                    break;
                case /* repeated sonrio.sonr.schema.WhatIs what_is */ 2:
                    message.whatIs.push(WhatIs.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* map<string, sonrio.sonr.schema.SchemaDefinition> schemas */ 3:
                    this.binaryReadMap3(message.schemas, reader, options);
                    break;
                case /* cosmos.base.query.v1beta1.PageResponse pagination */ 4:
                    message.pagination = PageResponse.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap3(map: QueryWhatIsByCreatorResponse["schemas"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof QueryWhatIsByCreatorResponse["schemas"] | undefined, val: QueryWhatIsByCreatorResponse["schemas"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = SchemaDefinition.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field sonrio.motor.api.v1.QueryWhatIsByCreatorResponse.schemas");
            }
        }
        map[key ?? ""] = val ?? SchemaDefinition.create();
    }
    internalBinaryWrite(message: QueryWhatIsByCreatorResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 code = 1; */
        if (message.code !== 0)
            writer.tag(1, WireType.Varint).int32(message.code);
        /* repeated sonrio.sonr.schema.WhatIs what_is = 2; */
        for (let i = 0; i < message.whatIs.length; i++)
            WhatIs.internalBinaryWrite(message.whatIs[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* map<string, sonrio.sonr.schema.SchemaDefinition> schemas = 3; */
        for (let k of Object.keys(message.schemas)) {
            writer.tag(3, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            SchemaDefinition.internalBinaryWrite(message.schemas[k], writer, options);
            writer.join().join();
        }
        /* cosmos.base.query.v1beta1.PageResponse pagination = 4; */
        if (message.pagination)
            PageResponse.internalBinaryWrite(message.pagination, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.motor.api.v1.QueryWhatIsByCreatorResponse
 */
export const QueryWhatIsByCreatorResponse = new QueryWhatIsByCreatorResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryWhereIsByCreatorResponse$Type extends MessageType<QueryWhereIsByCreatorResponse> {
    constructor() {
        super("sonrio.motor.api.v1.QueryWhereIsByCreatorResponse", [
            { no: 1, name: "code", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "where_is", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => WhereIs },
            { no: 3, name: "pagination", kind: "message", T: () => PageResponse }
        ]);
    }
    create(value?: PartialMessage<QueryWhereIsByCreatorResponse>): QueryWhereIsByCreatorResponse {
        const message = { code: 0, whereIs: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryWhereIsByCreatorResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryWhereIsByCreatorResponse): QueryWhereIsByCreatorResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 code */ 1:
                    message.code = reader.int32();
                    break;
                case /* repeated sonrio.sonr.bucket.WhereIs where_is */ 2:
                    message.whereIs.push(WhereIs.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* cosmos.base.query.v1beta1.PageResponse pagination */ 3:
                    message.pagination = PageResponse.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryWhereIsByCreatorResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 code = 1; */
        if (message.code !== 0)
            writer.tag(1, WireType.Varint).int32(message.code);
        /* repeated sonrio.sonr.bucket.WhereIs where_is = 2; */
        for (let i = 0; i < message.whereIs.length; i++)
            WhereIs.internalBinaryWrite(message.whereIs[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* cosmos.base.query.v1beta1.PageResponse pagination = 3; */
        if (message.pagination)
            PageResponse.internalBinaryWrite(message.pagination, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.motor.api.v1.QueryWhereIsByCreatorResponse
 */
export const QueryWhereIsByCreatorResponse = new QueryWhereIsByCreatorResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ObjectReference$Type extends MessageType<ObjectReference> {
    constructor() {
        super("sonrio.motor.api.v1.ObjectReference", [
            { no: 1, name: "did", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "label", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "cid", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ObjectReference>): ObjectReference {
        const message = { did: "", label: "", cid: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ObjectReference>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ObjectReference): ObjectReference {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string did */ 1:
                    message.did = reader.string();
                    break;
                case /* string label */ 2:
                    message.label = reader.string();
                    break;
                case /* string cid */ 3:
                    message.cid = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ObjectReference, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string did = 1; */
        if (message.did !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.did);
        /* string label = 2; */
        if (message.label !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.label);
        /* string cid = 3; */
        if (message.cid !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.cid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.motor.api.v1.ObjectReference
 */
export const ObjectReference = new ObjectReference$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UploadObjectResponse$Type extends MessageType<UploadObjectResponse> {
    constructor() {
        super("sonrio.motor.api.v1.UploadObjectResponse", [
            { no: 1, name: "code", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "reference", kind: "message", T: () => ObjectReference },
            { no: 3, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UploadObjectResponse>): UploadObjectResponse {
        const message = { code: 0, message: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UploadObjectResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UploadObjectResponse): UploadObjectResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 code */ 1:
                    message.code = reader.int32();
                    break;
                case /* sonrio.motor.api.v1.ObjectReference reference */ 2:
                    message.reference = ObjectReference.internalBinaryRead(reader, reader.uint32(), options, message.reference);
                    break;
                case /* string message */ 3:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UploadObjectResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 code = 1; */
        if (message.code !== 0)
            writer.tag(1, WireType.Varint).int32(message.code);
        /* sonrio.motor.api.v1.ObjectReference reference = 2; */
        if (message.reference)
            ObjectReference.internalBinaryWrite(message.reference, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string message = 3; */
        if (message.message !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.motor.api.v1.UploadObjectResponse
 */
export const UploadObjectResponse = new UploadObjectResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateBucketResponse$Type extends MessageType<CreateBucketResponse> {
    constructor() {
        super("sonrio.motor.api.v1.CreateBucketResponse", [
            { no: 1, name: "did", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateBucketResponse>): CreateBucketResponse {
        const message = { did: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateBucketResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateBucketResponse): CreateBucketResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string did */ 1:
                    message.did = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateBucketResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string did = 1; */
        if (message.did !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.did);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.motor.api.v1.CreateBucketResponse
 */
export const CreateBucketResponse = new CreateBucketResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateBucketResponse$Type extends MessageType<UpdateBucketResponse> {
    constructor() {
        super("sonrio.motor.api.v1.UpdateBucketResponse", [
            { no: 1, name: "status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "where_is", kind: "message", T: () => WhereIs }
        ]);
    }
    create(value?: PartialMessage<UpdateBucketResponse>): UpdateBucketResponse {
        const message = { status: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateBucketResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateBucketResponse): UpdateBucketResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 status */ 1:
                    message.status = reader.int32();
                    break;
                case /* sonrio.sonr.bucket.WhereIs where_is */ 2:
                    message.whereIs = WhereIs.internalBinaryRead(reader, reader.uint32(), options, message.whereIs);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateBucketResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 status = 1; */
        if (message.status !== 0)
            writer.tag(1, WireType.Varint).int32(message.status);
        /* sonrio.sonr.bucket.WhereIs where_is = 2; */
        if (message.whereIs)
            WhereIs.internalBinaryWrite(message.whereIs, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.motor.api.v1.UpdateBucketResponse
 */
export const UpdateBucketResponse = new UpdateBucketResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryWhereIsResponse$Type extends MessageType<QueryWhereIsResponse> {
    constructor() {
        super("sonrio.motor.api.v1.QueryWhereIsResponse", [
            { no: 1, name: "code", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "where_is", kind: "message", T: () => WhereIs }
        ]);
    }
    create(value?: PartialMessage<QueryWhereIsResponse>): QueryWhereIsResponse {
        const message = { code: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryWhereIsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryWhereIsResponse): QueryWhereIsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 code */ 1:
                    message.code = reader.int32();
                    break;
                case /* sonrio.sonr.bucket.WhereIs where_is */ 2:
                    message.whereIs = WhereIs.internalBinaryRead(reader, reader.uint32(), options, message.whereIs);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryWhereIsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 code = 1; */
        if (message.code !== 0)
            writer.tag(1, WireType.Varint).int32(message.code);
        /* sonrio.sonr.bucket.WhereIs where_is = 2; */
        if (message.whereIs)
            WhereIs.internalBinaryWrite(message.whereIs, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.motor.api.v1.QueryWhereIsResponse
 */
export const QueryWhereIsResponse = new QueryWhereIsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BucketContentList$Type extends MessageType<BucketContentList> {
    constructor() {
        super("sonrio.motor.api.v1.BucketContentList", [
            { no: 1, name: "buckets", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => BucketContent }
        ]);
    }
    create(value?: PartialMessage<BucketContentList>): BucketContentList {
        const message = { buckets: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BucketContentList>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BucketContentList): BucketContentList {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated sonrio.sonr.bucket.BucketContent buckets */ 1:
                    message.buckets.push(BucketContent.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BucketContentList, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated sonrio.sonr.bucket.BucketContent buckets = 1; */
        for (let i = 0; i < message.buckets.length; i++)
            BucketContent.internalBinaryWrite(message.buckets[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.motor.api.v1.BucketContentList
 */
export const BucketContentList = new BucketContentList$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StatResponse$Type extends MessageType<StatResponse> {
    constructor() {
        super("sonrio.motor.api.v1.StatResponse", [
            { no: 1, name: "address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "did_document", kind: "message", T: () => DIDDocument },
            { no: 3, name: "balance", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "stake", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<StatResponse>): StatResponse {
        const message = { address: "", balance: 0, stake: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StatResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StatResponse): StatResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string address */ 1:
                    message.address = reader.string();
                    break;
                case /* sonrio.sonr.registry.DIDDocument did_document */ 2:
                    message.didDocument = DIDDocument.internalBinaryRead(reader, reader.uint32(), options, message.didDocument);
                    break;
                case /* int32 balance */ 3:
                    message.balance = reader.int32();
                    break;
                case /* int32 stake */ 4:
                    message.stake = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StatResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string address = 1; */
        if (message.address !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.address);
        /* sonrio.sonr.registry.DIDDocument did_document = 2; */
        if (message.didDocument)
            DIDDocument.internalBinaryWrite(message.didDocument, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int32 balance = 3; */
        if (message.balance !== 0)
            writer.tag(3, WireType.Varint).int32(message.balance);
        /* int32 stake = 4; */
        if (message.stake !== 0)
            writer.tag(4, WireType.Varint).int32(message.stake);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.motor.api.v1.StatResponse
 */
export const StatResponse = new StatResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PaymentResponse$Type extends MessageType<PaymentResponse> {
    constructor() {
        super("sonrio.motor.api.v1.PaymentResponse", [
            { no: 1, name: "code", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "tx_hash", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "updated_balance", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<PaymentResponse>): PaymentResponse {
        const message = { code: 0, message: "", txHash: "", updatedBalance: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PaymentResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PaymentResponse): PaymentResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 code */ 1:
                    message.code = reader.int32();
                    break;
                case /* string message */ 2:
                    message.message = reader.string();
                    break;
                case /* string tx_hash */ 3:
                    message.txHash = reader.string();
                    break;
                case /* int32 updated_balance */ 4:
                    message.updatedBalance = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PaymentResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 code = 1; */
        if (message.code !== 0)
            writer.tag(1, WireType.Varint).int32(message.code);
        /* string message = 2; */
        if (message.message !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.message);
        /* string tx_hash = 3; */
        if (message.txHash !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.txHash);
        /* int32 updated_balance = 4; */
        if (message.updatedBalance !== 0)
            writer.tag(4, WireType.Varint).int32(message.updatedBalance);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.motor.api.v1.PaymentResponse
 */
export const PaymentResponse = new PaymentResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SearchBucketContentBySchemaResponse$Type extends MessageType<SearchBucketContentBySchemaResponse> {
    constructor() {
        super("sonrio.motor.api.v1.SearchBucketContentBySchemaResponse", [
            { no: 1, name: "status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "bucket_did", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "schema_did", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "content", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<SearchBucketContentBySchemaResponse>): SearchBucketContentBySchemaResponse {
        const message = { status: 0, bucketDid: "", schemaDid: "", content: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SearchBucketContentBySchemaResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SearchBucketContentBySchemaResponse): SearchBucketContentBySchemaResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 status */ 1:
                    message.status = reader.int32();
                    break;
                case /* string bucket_did */ 2:
                    message.bucketDid = reader.string();
                    break;
                case /* string schema_did */ 3:
                    message.schemaDid = reader.string();
                    break;
                case /* repeated bytes content */ 4:
                    message.content.push(reader.bytes());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SearchBucketContentBySchemaResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 status = 1; */
        if (message.status !== 0)
            writer.tag(1, WireType.Varint).int32(message.status);
        /* string bucket_did = 2; */
        if (message.bucketDid !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.bucketDid);
        /* string schema_did = 3; */
        if (message.schemaDid !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.schemaDid);
        /* repeated bytes content = 4; */
        for (let i = 0; i < message.content.length; i++)
            writer.tag(4, WireType.LengthDelimited).bytes(message.content[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.motor.api.v1.SearchBucketContentBySchemaResponse
 */
export const SearchBucketContentBySchemaResponse = new SearchBucketContentBySchemaResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SearchResponse$Type extends MessageType<SearchResponse> {
    constructor() {
        super("sonrio.motor.api.v1.SearchResponse", [
            { no: 1, name: "status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "resource_did", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "content_did", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "content", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<SearchResponse>): SearchResponse {
        const message = { status: 0, resourceDid: "", contentDid: "", content: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SearchResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SearchResponse): SearchResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 status */ 1:
                    message.status = reader.int32();
                    break;
                case /* string resource_did */ 2:
                    message.resourceDid = reader.string();
                    break;
                case /* string content_did */ 3:
                    message.contentDid = reader.string();
                    break;
                case /* repeated bytes content */ 4:
                    message.content.push(reader.bytes());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SearchResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 status = 1; */
        if (message.status !== 0)
            writer.tag(1, WireType.Varint).int32(message.status);
        /* string resource_did = 2; */
        if (message.resourceDid !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.resourceDid);
        /* string content_did = 3; */
        if (message.contentDid !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.contentDid);
        /* repeated bytes content = 4; */
        for (let i = 0; i < message.content.length; i++)
            writer.tag(4, WireType.LengthDelimited).bytes(message.content[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.motor.api.v1.SearchResponse
 */
export const SearchResponse = new SearchResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UploadDocumentResponse$Type extends MessageType<UploadDocumentResponse> {
    constructor() {
        super("sonrio.motor.api.v1.UploadDocumentResponse", [
            { no: 1, name: "status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "did", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "cid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "document", kind: "message", T: () => SchemaDocument }
        ]);
    }
    create(value?: PartialMessage<UploadDocumentResponse>): UploadDocumentResponse {
        const message = { status: 0, did: "", cid: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UploadDocumentResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UploadDocumentResponse): UploadDocumentResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 status */ 1:
                    message.status = reader.int32();
                    break;
                case /* string did */ 2:
                    message.did = reader.string();
                    break;
                case /* string cid */ 3:
                    message.cid = reader.string();
                    break;
                case /* sonrio.sonr.schema.SchemaDocument document */ 4:
                    message.document = SchemaDocument.internalBinaryRead(reader, reader.uint32(), options, message.document);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UploadDocumentResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 status = 1; */
        if (message.status !== 0)
            writer.tag(1, WireType.Varint).int32(message.status);
        /* string did = 2; */
        if (message.did !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.did);
        /* string cid = 3; */
        if (message.cid !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.cid);
        /* sonrio.sonr.schema.SchemaDocument document = 4; */
        if (message.document)
            SchemaDocument.internalBinaryWrite(message.document, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.motor.api.v1.UploadDocumentResponse
 */
export const UploadDocumentResponse = new UploadDocumentResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetDocumentResponse$Type extends MessageType<GetDocumentResponse> {
    constructor() {
        super("sonrio.motor.api.v1.GetDocumentResponse", [
            { no: 1, name: "status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "did", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "cid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "document", kind: "message", T: () => SchemaDocument }
        ]);
    }
    create(value?: PartialMessage<GetDocumentResponse>): GetDocumentResponse {
        const message = { status: 0, did: "", cid: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetDocumentResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetDocumentResponse): GetDocumentResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 status */ 1:
                    message.status = reader.int32();
                    break;
                case /* string did */ 2:
                    message.did = reader.string();
                    break;
                case /* string cid */ 3:
                    message.cid = reader.string();
                    break;
                case /* sonrio.sonr.schema.SchemaDocument document */ 4:
                    message.document = SchemaDocument.internalBinaryRead(reader, reader.uint32(), options, message.document);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetDocumentResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 status = 1; */
        if (message.status !== 0)
            writer.tag(1, WireType.Varint).int32(message.status);
        /* string did = 2; */
        if (message.did !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.did);
        /* string cid = 3; */
        if (message.cid !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.cid);
        /* sonrio.sonr.schema.SchemaDocument document = 4; */
        if (message.document)
            SchemaDocument.internalBinaryWrite(message.document, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.motor.api.v1.GetDocumentResponse
 */
export const GetDocumentResponse = new GetDocumentResponse$Type();
