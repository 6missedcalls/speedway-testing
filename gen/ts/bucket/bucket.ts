// @generated by protobuf-ts 2.8.1 with parameter generate_dependencies,long_type_string
// @generated from protobuf file "bucket/bucket.proto" (package "sonrio.sonr.bucket", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { ResourceIdentifier } from "./where_is";
/**
 *
 * Wraps items within a bucket. Items will be one of the following
 * DID -> reference to another bucket (WhereIs)
 * CID -> reference to content (map[string]interface{})
 *
 * @generated from protobuf message sonrio.sonr.bucket.BucketContent
 */
export interface BucketContent {
    /**
     * Raw content serialized to bytes
     *
     * @generated from protobuf field: bytes item = 1;
     */
    item: Uint8Array;
    /**
     * Content id a CID, DID, or unspecified
     *
     * @generated from protobuf field: string id = 2;
     */
    id: string;
    /**
     * @generated from protobuf field: sonrio.sonr.bucket.ResourceIdentifier content_type = 3;
     */
    contentType: ResourceIdentifier;
}
// @generated message type with reflection information, may provide speed optimized methods
class BucketContent$Type extends MessageType<BucketContent> {
    constructor() {
        super("sonrio.sonr.bucket.BucketContent", [
            { no: 1, name: "item", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "content_type", kind: "enum", T: () => ["sonrio.sonr.bucket.ResourceIdentifier", ResourceIdentifier] }
        ]);
    }
    create(value?: PartialMessage<BucketContent>): BucketContent {
        const message = { item: new Uint8Array(0), id: "", contentType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BucketContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BucketContent): BucketContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes item */ 1:
                    message.item = reader.bytes();
                    break;
                case /* string id */ 2:
                    message.id = reader.string();
                    break;
                case /* sonrio.sonr.bucket.ResourceIdentifier content_type */ 3:
                    message.contentType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BucketContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes item = 1; */
        if (message.item.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.item);
        /* string id = 2; */
        if (message.id !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.id);
        /* sonrio.sonr.bucket.ResourceIdentifier content_type = 3; */
        if (message.contentType !== 0)
            writer.tag(3, WireType.Varint).int32(message.contentType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.sonr.bucket.BucketContent
 */
export const BucketContent = new BucketContent$Type();
