// @generated by protobuf-ts 2.8.1 with parameter generate_dependencies,long_type_string
// @generated from protobuf file "bucket/tx.proto" (package "sonrio.sonr.bucket", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { WhereIs } from "./where_is";
import { AclJwks } from "./where_is";
import { BucketItem } from "./where_is";
import { BucketRole } from "./where_is";
import { BucketVisibility } from "./where_is";
/**
 * @generated from protobuf message sonrio.sonr.bucket.MsgCreateWhereIs
 */
export interface MsgCreateWhereIs {
    /**
     * @generated from protobuf field: string creator = 1;
     */
    creator: string;
    /**
     * @generated from protobuf field: string label = 2;
     */
    label: string;
    /**
     * @generated from protobuf field: sonrio.sonr.bucket.BucketVisibility visibility = 3;
     */
    visibility: BucketVisibility;
    /**
     * @generated from protobuf field: sonrio.sonr.bucket.BucketRole role = 4;
     */
    role: BucketRole;
    /**
     * @generated from protobuf field: repeated sonrio.sonr.bucket.BucketItem content = 5;
     */
    content: BucketItem[];
    /**
     * @generated from protobuf field: map<string, sonrio.sonr.bucket.AclJwks> content_acl = 6;
     */
    contentAcl: {
        [key: string]: AclJwks;
    };
}
/**
 * @generated from protobuf message sonrio.sonr.bucket.MsgCreateWhereIsResponse
 */
export interface MsgCreateWhereIsResponse {
    /**
     * @generated from protobuf field: int32 status = 1;
     */
    status: number;
    /**
     * @generated from protobuf field: sonrio.sonr.bucket.WhereIs where_is = 2;
     */
    whereIs?: WhereIs;
}
/**
 * @generated from protobuf message sonrio.sonr.bucket.MsgUpdateWhereIs
 */
export interface MsgUpdateWhereIs {
    /**
     * @generated from protobuf field: string creator = 1;
     */
    creator: string;
    /**
     * @generated from protobuf field: string did = 2;
     */
    did: string;
    /**
     * @generated from protobuf field: string label = 3;
     */
    label: string;
    /**
     * @generated from protobuf field: sonrio.sonr.bucket.BucketVisibility visibility = 4;
     */
    visibility: BucketVisibility;
    /**
     * @generated from protobuf field: sonrio.sonr.bucket.BucketRole role = 5;
     */
    role: BucketRole;
    /**
     * @generated from protobuf field: repeated sonrio.sonr.bucket.BucketItem content = 6;
     */
    content: BucketItem[];
    /**
     * @generated from protobuf field: map<string, sonrio.sonr.bucket.AclJwks> content_acl = 7;
     */
    contentAcl: {
        [key: string]: AclJwks;
    };
}
/**
 * @generated from protobuf message sonrio.sonr.bucket.MsgUpdateWhereIsResponse
 */
export interface MsgUpdateWhereIsResponse {
    /**
     * @generated from protobuf field: int32 status = 1;
     */
    status: number;
    /**
     * @generated from protobuf field: sonrio.sonr.bucket.WhereIs where_is = 2;
     */
    whereIs?: WhereIs;
}
/**
 * @generated from protobuf message sonrio.sonr.bucket.MsgDeleteWhereIs
 */
export interface MsgDeleteWhereIs {
    /**
     * @generated from protobuf field: string creator = 1;
     */
    creator: string;
    /**
     * @generated from protobuf field: string did = 2;
     */
    did: string;
}
/**
 * @generated from protobuf message sonrio.sonr.bucket.MsgDeleteWhereIsResponse
 */
export interface MsgDeleteWhereIsResponse {
    /**
     * @generated from protobuf field: int32 status = 1;
     */
    status: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class MsgCreateWhereIs$Type extends MessageType<MsgCreateWhereIs> {
    constructor() {
        super("sonrio.sonr.bucket.MsgCreateWhereIs", [
            { no: 1, name: "creator", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "label", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "visibility", kind: "enum", T: () => ["sonrio.sonr.bucket.BucketVisibility", BucketVisibility] },
            { no: 4, name: "role", kind: "enum", T: () => ["sonrio.sonr.bucket.BucketRole", BucketRole] },
            { no: 5, name: "content", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => BucketItem },
            { no: 6, name: "content_acl", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => AclJwks } }
        ]);
    }
    create(value?: PartialMessage<MsgCreateWhereIs>): MsgCreateWhereIs {
        const message = { creator: "", label: "", visibility: 0, role: 0, content: [], contentAcl: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MsgCreateWhereIs>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgCreateWhereIs): MsgCreateWhereIs {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string creator */ 1:
                    message.creator = reader.string();
                    break;
                case /* string label */ 2:
                    message.label = reader.string();
                    break;
                case /* sonrio.sonr.bucket.BucketVisibility visibility */ 3:
                    message.visibility = reader.int32();
                    break;
                case /* sonrio.sonr.bucket.BucketRole role */ 4:
                    message.role = reader.int32();
                    break;
                case /* repeated sonrio.sonr.bucket.BucketItem content */ 5:
                    message.content.push(BucketItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* map<string, sonrio.sonr.bucket.AclJwks> content_acl */ 6:
                    this.binaryReadMap6(message.contentAcl, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap6(map: MsgCreateWhereIs["contentAcl"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof MsgCreateWhereIs["contentAcl"] | undefined, val: MsgCreateWhereIs["contentAcl"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = AclJwks.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field sonrio.sonr.bucket.MsgCreateWhereIs.content_acl");
            }
        }
        map[key ?? ""] = val ?? AclJwks.create();
    }
    internalBinaryWrite(message: MsgCreateWhereIs, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string creator = 1; */
        if (message.creator !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.creator);
        /* string label = 2; */
        if (message.label !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.label);
        /* sonrio.sonr.bucket.BucketVisibility visibility = 3; */
        if (message.visibility !== 0)
            writer.tag(3, WireType.Varint).int32(message.visibility);
        /* sonrio.sonr.bucket.BucketRole role = 4; */
        if (message.role !== 0)
            writer.tag(4, WireType.Varint).int32(message.role);
        /* repeated sonrio.sonr.bucket.BucketItem content = 5; */
        for (let i = 0; i < message.content.length; i++)
            BucketItem.internalBinaryWrite(message.content[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* map<string, sonrio.sonr.bucket.AclJwks> content_acl = 6; */
        for (let k of Object.keys(message.contentAcl)) {
            writer.tag(6, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            AclJwks.internalBinaryWrite(message.contentAcl[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.sonr.bucket.MsgCreateWhereIs
 */
export const MsgCreateWhereIs = new MsgCreateWhereIs$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgCreateWhereIsResponse$Type extends MessageType<MsgCreateWhereIsResponse> {
    constructor() {
        super("sonrio.sonr.bucket.MsgCreateWhereIsResponse", [
            { no: 1, name: "status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "where_is", kind: "message", T: () => WhereIs }
        ]);
    }
    create(value?: PartialMessage<MsgCreateWhereIsResponse>): MsgCreateWhereIsResponse {
        const message = { status: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MsgCreateWhereIsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgCreateWhereIsResponse): MsgCreateWhereIsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 status */ 1:
                    message.status = reader.int32();
                    break;
                case /* sonrio.sonr.bucket.WhereIs where_is */ 2:
                    message.whereIs = WhereIs.internalBinaryRead(reader, reader.uint32(), options, message.whereIs);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MsgCreateWhereIsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 status = 1; */
        if (message.status !== 0)
            writer.tag(1, WireType.Varint).int32(message.status);
        /* sonrio.sonr.bucket.WhereIs where_is = 2; */
        if (message.whereIs)
            WhereIs.internalBinaryWrite(message.whereIs, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.sonr.bucket.MsgCreateWhereIsResponse
 */
export const MsgCreateWhereIsResponse = new MsgCreateWhereIsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgUpdateWhereIs$Type extends MessageType<MsgUpdateWhereIs> {
    constructor() {
        super("sonrio.sonr.bucket.MsgUpdateWhereIs", [
            { no: 1, name: "creator", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "did", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "label", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "visibility", kind: "enum", T: () => ["sonrio.sonr.bucket.BucketVisibility", BucketVisibility] },
            { no: 5, name: "role", kind: "enum", T: () => ["sonrio.sonr.bucket.BucketRole", BucketRole] },
            { no: 6, name: "content", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => BucketItem },
            { no: 7, name: "content_acl", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => AclJwks } }
        ]);
    }
    create(value?: PartialMessage<MsgUpdateWhereIs>): MsgUpdateWhereIs {
        const message = { creator: "", did: "", label: "", visibility: 0, role: 0, content: [], contentAcl: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MsgUpdateWhereIs>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgUpdateWhereIs): MsgUpdateWhereIs {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string creator */ 1:
                    message.creator = reader.string();
                    break;
                case /* string did */ 2:
                    message.did = reader.string();
                    break;
                case /* string label */ 3:
                    message.label = reader.string();
                    break;
                case /* sonrio.sonr.bucket.BucketVisibility visibility */ 4:
                    message.visibility = reader.int32();
                    break;
                case /* sonrio.sonr.bucket.BucketRole role */ 5:
                    message.role = reader.int32();
                    break;
                case /* repeated sonrio.sonr.bucket.BucketItem content */ 6:
                    message.content.push(BucketItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* map<string, sonrio.sonr.bucket.AclJwks> content_acl */ 7:
                    this.binaryReadMap7(message.contentAcl, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap7(map: MsgUpdateWhereIs["contentAcl"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof MsgUpdateWhereIs["contentAcl"] | undefined, val: MsgUpdateWhereIs["contentAcl"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = AclJwks.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field sonrio.sonr.bucket.MsgUpdateWhereIs.content_acl");
            }
        }
        map[key ?? ""] = val ?? AclJwks.create();
    }
    internalBinaryWrite(message: MsgUpdateWhereIs, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string creator = 1; */
        if (message.creator !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.creator);
        /* string did = 2; */
        if (message.did !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.did);
        /* string label = 3; */
        if (message.label !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.label);
        /* sonrio.sonr.bucket.BucketVisibility visibility = 4; */
        if (message.visibility !== 0)
            writer.tag(4, WireType.Varint).int32(message.visibility);
        /* sonrio.sonr.bucket.BucketRole role = 5; */
        if (message.role !== 0)
            writer.tag(5, WireType.Varint).int32(message.role);
        /* repeated sonrio.sonr.bucket.BucketItem content = 6; */
        for (let i = 0; i < message.content.length; i++)
            BucketItem.internalBinaryWrite(message.content[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* map<string, sonrio.sonr.bucket.AclJwks> content_acl = 7; */
        for (let k of Object.keys(message.contentAcl)) {
            writer.tag(7, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            AclJwks.internalBinaryWrite(message.contentAcl[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.sonr.bucket.MsgUpdateWhereIs
 */
export const MsgUpdateWhereIs = new MsgUpdateWhereIs$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgUpdateWhereIsResponse$Type extends MessageType<MsgUpdateWhereIsResponse> {
    constructor() {
        super("sonrio.sonr.bucket.MsgUpdateWhereIsResponse", [
            { no: 1, name: "status", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "where_is", kind: "message", T: () => WhereIs }
        ]);
    }
    create(value?: PartialMessage<MsgUpdateWhereIsResponse>): MsgUpdateWhereIsResponse {
        const message = { status: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MsgUpdateWhereIsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgUpdateWhereIsResponse): MsgUpdateWhereIsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 status */ 1:
                    message.status = reader.int32();
                    break;
                case /* sonrio.sonr.bucket.WhereIs where_is */ 2:
                    message.whereIs = WhereIs.internalBinaryRead(reader, reader.uint32(), options, message.whereIs);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MsgUpdateWhereIsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 status = 1; */
        if (message.status !== 0)
            writer.tag(1, WireType.Varint).int32(message.status);
        /* sonrio.sonr.bucket.WhereIs where_is = 2; */
        if (message.whereIs)
            WhereIs.internalBinaryWrite(message.whereIs, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.sonr.bucket.MsgUpdateWhereIsResponse
 */
export const MsgUpdateWhereIsResponse = new MsgUpdateWhereIsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgDeleteWhereIs$Type extends MessageType<MsgDeleteWhereIs> {
    constructor() {
        super("sonrio.sonr.bucket.MsgDeleteWhereIs", [
            { no: 1, name: "creator", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "did", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MsgDeleteWhereIs>): MsgDeleteWhereIs {
        const message = { creator: "", did: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MsgDeleteWhereIs>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgDeleteWhereIs): MsgDeleteWhereIs {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string creator */ 1:
                    message.creator = reader.string();
                    break;
                case /* string did */ 2:
                    message.did = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MsgDeleteWhereIs, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string creator = 1; */
        if (message.creator !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.creator);
        /* string did = 2; */
        if (message.did !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.did);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.sonr.bucket.MsgDeleteWhereIs
 */
export const MsgDeleteWhereIs = new MsgDeleteWhereIs$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgDeleteWhereIsResponse$Type extends MessageType<MsgDeleteWhereIsResponse> {
    constructor() {
        super("sonrio.sonr.bucket.MsgDeleteWhereIsResponse", [
            { no: 1, name: "status", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<MsgDeleteWhereIsResponse>): MsgDeleteWhereIsResponse {
        const message = { status: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MsgDeleteWhereIsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgDeleteWhereIsResponse): MsgDeleteWhereIsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 status */ 1:
                    message.status = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MsgDeleteWhereIsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 status = 1; */
        if (message.status !== 0)
            writer.tag(1, WireType.Varint).int32(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.sonr.bucket.MsgDeleteWhereIsResponse
 */
export const MsgDeleteWhereIsResponse = new MsgDeleteWhereIsResponse$Type();
/**
 * @generated ServiceType for protobuf service sonrio.sonr.bucket.Msg
 */
export const Msg = new ServiceType("sonrio.sonr.bucket.Msg", [
    { name: "CreateWhereIs", options: {}, I: MsgCreateWhereIs, O: MsgCreateWhereIsResponse },
    { name: "UpdateWhereIs", options: {}, I: MsgUpdateWhereIs, O: MsgUpdateWhereIsResponse },
    { name: "DeleteWhereIs", options: {}, I: MsgDeleteWhereIs, O: MsgDeleteWhereIsResponse }
]);
