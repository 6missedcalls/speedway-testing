// @generated by protobuf-ts 2.8.1 with parameter generate_dependencies,long_type_string
// @generated from protobuf file "registry/who_is.proto" (package "sonrio.sonr.registry", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { DIDDocument } from "./did";
/**
 * @generated from protobuf message sonrio.sonr.registry.WhoIs
 */
export interface WhoIs {
    /**
     * Alias is the list of registered `alsoKnownAs` identifiers of the User or Application
     *
     * @generated from protobuf field: repeated sonrio.sonr.registry.Alias alias = 1;
     */
    alias: Alias[];
    /**
     * Owner is the top level DID of the User or Application derived from the multisignature wallet.
     *
     * @generated from protobuf field: string owner = 2;
     */
    owner: string;
    /**
     * DIDDocument is the bytes representation of DIDDocument within the WhoIs. Initially marshalled as JSON.
     *
     * @generated from protobuf field: sonrio.sonr.registry.DIDDocument did_document = 3;
     */
    didDocument?: DIDDocument;
    /**
     * Credentials are the biometric info of the registered name and account encoded with public key
     *
     * @generated from protobuf field: repeated string controllers = 4;
     */
    controllers: string[];
    /**
     * Type is the kind of the entity. Possible values are: "user", "application"
     *
     * @generated from protobuf field: sonrio.sonr.registry.WhoIsType type = 5;
     */
    type: WhoIsType;
    /**
     * Timestamp is the time of the last update of the DID Document
     *
     * @generated from protobuf field: int64 timestamp = 6;
     */
    timestamp: string;
    /**
     * IsActive is the status of the DID Document
     *
     * @generated from protobuf field: bool is_active = 7;
     */
    isActive: boolean;
    /**
     * Metadata is a map of key-value pairs that can be used to store additional information about the DID Document
     *
     * @generated from protobuf field: map<string, string> metadata = 8;
     */
    metadata: {
        [key: string]: string;
    };
}
/**
 * Alias is a message detailing a known "alsoKnownAs" identifier of a DIDDocument and contains properties for transfer/exchange
 *
 * @generated from protobuf message sonrio.sonr.registry.Alias
 */
export interface Alias {
    /**
     * Name is the string name of an Alias
     *
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * IsForSale is the boolean value indicating if the Alias is for sale
     *
     * @generated from protobuf field: bool is_for_sale = 2;
     */
    isForSale: boolean;
    /**
     * Amount is the amount listed for purchasing the Alias from the User/Application
     *
     * @generated from protobuf field: int32 amount = 3;
     */
    amount: number;
}
/**
 * WhoIsType is the type of DIDDocument stored in the registry module
 *
 * @generated from protobuf enum sonrio.sonr.registry.WhoIsType
 */
export enum WhoIsType {
    /**
     * User is the type of the registered name
     *
     * @generated from protobuf enum value: USER = 0;
     */
    USER = 0,
    /**
     * Application is the type of the registered name
     *
     * @generated from protobuf enum value: APPLICATION = 1;
     */
    APPLICATION = 1
}
// @generated message type with reflection information, may provide speed optimized methods
class WhoIs$Type extends MessageType<WhoIs> {
    constructor() {
        super("sonrio.sonr.registry.WhoIs", [
            { no: 1, name: "alias", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Alias },
            { no: 2, name: "owner", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "did_document", kind: "message", T: () => DIDDocument },
            { no: 4, name: "controllers", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "type", kind: "enum", T: () => ["sonrio.sonr.registry.WhoIsType", WhoIsType] },
            { no: 6, name: "timestamp", kind: "scalar", T: 3 /*ScalarType.INT64*/ },
            { no: 7, name: "is_active", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "metadata", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } }
        ]);
    }
    create(value?: PartialMessage<WhoIs>): WhoIs {
        const message = { alias: [], owner: "", controllers: [], type: 0, timestamp: "0", isActive: false, metadata: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WhoIs>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WhoIs): WhoIs {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated sonrio.sonr.registry.Alias alias */ 1:
                    message.alias.push(Alias.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string owner */ 2:
                    message.owner = reader.string();
                    break;
                case /* sonrio.sonr.registry.DIDDocument did_document */ 3:
                    message.didDocument = DIDDocument.internalBinaryRead(reader, reader.uint32(), options, message.didDocument);
                    break;
                case /* repeated string controllers */ 4:
                    message.controllers.push(reader.string());
                    break;
                case /* sonrio.sonr.registry.WhoIsType type */ 5:
                    message.type = reader.int32();
                    break;
                case /* int64 timestamp */ 6:
                    message.timestamp = reader.int64().toString();
                    break;
                case /* bool is_active */ 7:
                    message.isActive = reader.bool();
                    break;
                case /* map<string, string> metadata */ 8:
                    this.binaryReadMap8(message.metadata, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap8(map: WhoIs["metadata"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof WhoIs["metadata"] | undefined, val: WhoIs["metadata"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field sonrio.sonr.registry.WhoIs.metadata");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message: WhoIs, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated sonrio.sonr.registry.Alias alias = 1; */
        for (let i = 0; i < message.alias.length; i++)
            Alias.internalBinaryWrite(message.alias[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string owner = 2; */
        if (message.owner !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.owner);
        /* sonrio.sonr.registry.DIDDocument did_document = 3; */
        if (message.didDocument)
            DIDDocument.internalBinaryWrite(message.didDocument, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated string controllers = 4; */
        for (let i = 0; i < message.controllers.length; i++)
            writer.tag(4, WireType.LengthDelimited).string(message.controllers[i]);
        /* sonrio.sonr.registry.WhoIsType type = 5; */
        if (message.type !== 0)
            writer.tag(5, WireType.Varint).int32(message.type);
        /* int64 timestamp = 6; */
        if (message.timestamp !== "0")
            writer.tag(6, WireType.Varint).int64(message.timestamp);
        /* bool is_active = 7; */
        if (message.isActive !== false)
            writer.tag(7, WireType.Varint).bool(message.isActive);
        /* map<string, string> metadata = 8; */
        for (let k of Object.keys(message.metadata))
            writer.tag(8, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.metadata[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.sonr.registry.WhoIs
 */
export const WhoIs = new WhoIs$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Alias$Type extends MessageType<Alias> {
    constructor() {
        super("sonrio.sonr.registry.Alias", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "is_for_sale", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "amount", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<Alias>): Alias {
        const message = { name: "", isForSale: false, amount: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Alias>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Alias): Alias {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* bool is_for_sale */ 2:
                    message.isForSale = reader.bool();
                    break;
                case /* int32 amount */ 3:
                    message.amount = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Alias, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* bool is_for_sale = 2; */
        if (message.isForSale !== false)
            writer.tag(2, WireType.Varint).bool(message.isForSale);
        /* int32 amount = 3; */
        if (message.amount !== 0)
            writer.tag(3, WireType.Varint).int32(message.amount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.sonr.registry.Alias
 */
export const Alias = new Alias$Type();
