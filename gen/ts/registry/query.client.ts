// @generated by protobuf-ts 2.8.1 with parameter generate_dependencies,long_type_string
// @generated from protobuf file "registry/query.proto" (package "sonrio.sonr.registry", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Query } from "./query";
import type { QueryWhoIsControllerResponse } from "./query";
import type { QueryWhoIsControllerRequest } from "./query";
import type { QueryWhoIsAliasResponse } from "./query";
import type { QueryWhoIsAliasRequest } from "./query";
import type { QueryAllWhoIsResponse } from "./query";
import type { QueryAllWhoIsRequest } from "./query";
import type { QueryWhoIsResponse } from "./query";
import type { QueryWhoIsRequest } from "./query";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { QueryParamsResponse } from "./query";
import type { QueryParamsRequest } from "./query";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * Query defines the gRPC querier service.
 *
 * @generated from protobuf service sonrio.sonr.registry.Query
 */
export interface IQueryClient {
    /**
     * Parameters queries the parameters of the module.
     *
     * @generated from protobuf rpc: Params(sonrio.sonr.registry.QueryParamsRequest) returns (sonrio.sonr.registry.QueryParamsResponse);
     */
    params(input: QueryParamsRequest, options?: RpcOptions): UnaryCall<QueryParamsRequest, QueryParamsResponse>;
    /**
     * Queries a WhoIs by id.
     *
     * @generated from protobuf rpc: WhoIs(sonrio.sonr.registry.QueryWhoIsRequest) returns (sonrio.sonr.registry.QueryWhoIsResponse);
     */
    whoIs(input: QueryWhoIsRequest, options?: RpcOptions): UnaryCall<QueryWhoIsRequest, QueryWhoIsResponse>;
    /**
     * Queries a list of WhoIs items.
     *
     * @generated from protobuf rpc: WhoIsAll(sonrio.sonr.registry.QueryAllWhoIsRequest) returns (sonrio.sonr.registry.QueryAllWhoIsResponse);
     */
    whoIsAll(input: QueryAllWhoIsRequest, options?: RpcOptions): UnaryCall<QueryAllWhoIsRequest, QueryAllWhoIsResponse>;
    /**
     * Queries a list of WhoIsAlias items.
     *
     * @generated from protobuf rpc: WhoIsAlias(sonrio.sonr.registry.QueryWhoIsAliasRequest) returns (sonrio.sonr.registry.QueryWhoIsAliasResponse);
     */
    whoIsAlias(input: QueryWhoIsAliasRequest, options?: RpcOptions): UnaryCall<QueryWhoIsAliasRequest, QueryWhoIsAliasResponse>;
    /**
     * Queries a list of WhoIsController items.
     *
     * @generated from protobuf rpc: WhoIsController(sonrio.sonr.registry.QueryWhoIsControllerRequest) returns (sonrio.sonr.registry.QueryWhoIsControllerResponse);
     */
    whoIsController(input: QueryWhoIsControllerRequest, options?: RpcOptions): UnaryCall<QueryWhoIsControllerRequest, QueryWhoIsControllerResponse>;
}
/**
 * Query defines the gRPC querier service.
 *
 * @generated from protobuf service sonrio.sonr.registry.Query
 */
export class QueryClient implements IQueryClient, ServiceInfo {
    typeName = Query.typeName;
    methods = Query.methods;
    options = Query.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Parameters queries the parameters of the module.
     *
     * @generated from protobuf rpc: Params(sonrio.sonr.registry.QueryParamsRequest) returns (sonrio.sonr.registry.QueryParamsResponse);
     */
    params(input: QueryParamsRequest, options?: RpcOptions): UnaryCall<QueryParamsRequest, QueryParamsResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryParamsRequest, QueryParamsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Queries a WhoIs by id.
     *
     * @generated from protobuf rpc: WhoIs(sonrio.sonr.registry.QueryWhoIsRequest) returns (sonrio.sonr.registry.QueryWhoIsResponse);
     */
    whoIs(input: QueryWhoIsRequest, options?: RpcOptions): UnaryCall<QueryWhoIsRequest, QueryWhoIsResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryWhoIsRequest, QueryWhoIsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Queries a list of WhoIs items.
     *
     * @generated from protobuf rpc: WhoIsAll(sonrio.sonr.registry.QueryAllWhoIsRequest) returns (sonrio.sonr.registry.QueryAllWhoIsResponse);
     */
    whoIsAll(input: QueryAllWhoIsRequest, options?: RpcOptions): UnaryCall<QueryAllWhoIsRequest, QueryAllWhoIsResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryAllWhoIsRequest, QueryAllWhoIsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Queries a list of WhoIsAlias items.
     *
     * @generated from protobuf rpc: WhoIsAlias(sonrio.sonr.registry.QueryWhoIsAliasRequest) returns (sonrio.sonr.registry.QueryWhoIsAliasResponse);
     */
    whoIsAlias(input: QueryWhoIsAliasRequest, options?: RpcOptions): UnaryCall<QueryWhoIsAliasRequest, QueryWhoIsAliasResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryWhoIsAliasRequest, QueryWhoIsAliasResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Queries a list of WhoIsController items.
     *
     * @generated from protobuf rpc: WhoIsController(sonrio.sonr.registry.QueryWhoIsControllerRequest) returns (sonrio.sonr.registry.QueryWhoIsControllerResponse);
     */
    whoIsController(input: QueryWhoIsControllerRequest, options?: RpcOptions): UnaryCall<QueryWhoIsControllerRequest, QueryWhoIsControllerResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryWhoIsControllerRequest, QueryWhoIsControllerResponse>("unary", this._transport, method, opt, input);
    }
}
