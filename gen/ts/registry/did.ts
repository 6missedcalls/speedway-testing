// @generated by protobuf-ts 2.8.1 with parameter generate_dependencies,long_type_string
// @generated from protobuf file "registry/did.proto" (package "sonrio.sonr.registry", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message sonrio.sonr.registry.DIDDocument
 */
export interface DIDDocument {
    /**
     * @generated from protobuf field: repeated string context = 1;
     */
    context: string[]; // optional
    /**
     * @generated from protobuf field: string id = 2;
     */
    id: string;
    /**
     * @generated from protobuf field: repeated string controller = 3;
     */
    controller: string[]; // optional
    /**
     * @generated from protobuf field: repeated sonrio.sonr.registry.VerificationMethod verification_method = 4;
     */
    verificationMethod: VerificationMethod[]; // optional
    /**
     * @generated from protobuf field: repeated string authentication = 5;
     */
    authentication: string[]; // optional
    /**
     * @generated from protobuf field: repeated string assertion_method = 6;
     */
    assertionMethod: string[]; // optional
    /**
     * @generated from protobuf field: repeated string capability_invocation = 7;
     */
    capabilityInvocation: string[]; // optional
    /**
     * @generated from protobuf field: repeated string capability_delegation = 8;
     */
    capabilityDelegation: string[]; // optional
    /**
     * @generated from protobuf field: repeated string key_agreement = 9;
     */
    keyAgreement: string[]; // optional
    /**
     * @generated from protobuf field: repeated sonrio.sonr.registry.Service service = 10;
     */
    service: Service[]; // optional
    /**
     * @generated from protobuf field: repeated string also_known_as = 11;
     */
    alsoKnownAs: string[]; // optional
}
/**
 * @generated from protobuf message sonrio.sonr.registry.VerificationMethod
 */
export interface VerificationMethod {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string type = 2;
     */
    type: string;
    /**
     * @generated from protobuf field: string controller = 3;
     */
    controller: string;
    /**
     * @generated from protobuf field: repeated sonrio.sonr.registry.KeyValuePair public_key_jwk = 4;
     */
    publicKeyJwk: KeyValuePair[]; // optional
    /**
     * @generated from protobuf field: string public_key_base58 = 5;
     */
    publicKeyBase58: string; // optional
    /**
     * @generated from protobuf field: bytes credential_json = 6;
     */
    credentialJson: Uint8Array; // optional
}
/**
 * @generated from protobuf message sonrio.sonr.registry.Service
 */
export interface Service {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string type = 2;
     */
    type: string;
    /**
     * @generated from protobuf field: repeated sonrio.sonr.registry.KeyValuePair service_endpoint = 3;
     */
    serviceEndpoint: KeyValuePair[];
}
/**
 * @generated from protobuf message sonrio.sonr.registry.KeyValuePair
 */
export interface KeyValuePair {
    /**
     * @generated from protobuf field: string key = 1;
     */
    key: string;
    /**
     * @generated from protobuf field: string value = 2;
     */
    value: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class DIDDocument$Type extends MessageType<DIDDocument> {
    constructor() {
        super("sonrio.sonr.registry.DIDDocument", [
            { no: 1, name: "context", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "controller", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "verification_method", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => VerificationMethod },
            { no: 5, name: "authentication", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "assertion_method", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "capability_invocation", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "capability_delegation", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "key_agreement", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "service", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Service },
            { no: 11, name: "also_known_as", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DIDDocument>): DIDDocument {
        const message = { context: [], id: "", controller: [], verificationMethod: [], authentication: [], assertionMethod: [], capabilityInvocation: [], capabilityDelegation: [], keyAgreement: [], service: [], alsoKnownAs: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DIDDocument>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DIDDocument): DIDDocument {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string context */ 1:
                    message.context.push(reader.string());
                    break;
                case /* string id */ 2:
                    message.id = reader.string();
                    break;
                case /* repeated string controller */ 3:
                    message.controller.push(reader.string());
                    break;
                case /* repeated sonrio.sonr.registry.VerificationMethod verification_method */ 4:
                    message.verificationMethod.push(VerificationMethod.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated string authentication */ 5:
                    message.authentication.push(reader.string());
                    break;
                case /* repeated string assertion_method */ 6:
                    message.assertionMethod.push(reader.string());
                    break;
                case /* repeated string capability_invocation */ 7:
                    message.capabilityInvocation.push(reader.string());
                    break;
                case /* repeated string capability_delegation */ 8:
                    message.capabilityDelegation.push(reader.string());
                    break;
                case /* repeated string key_agreement */ 9:
                    message.keyAgreement.push(reader.string());
                    break;
                case /* repeated sonrio.sonr.registry.Service service */ 10:
                    message.service.push(Service.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated string also_known_as */ 11:
                    message.alsoKnownAs.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DIDDocument, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string context = 1; */
        for (let i = 0; i < message.context.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.context[i]);
        /* string id = 2; */
        if (message.id !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.id);
        /* repeated string controller = 3; */
        for (let i = 0; i < message.controller.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.controller[i]);
        /* repeated sonrio.sonr.registry.VerificationMethod verification_method = 4; */
        for (let i = 0; i < message.verificationMethod.length; i++)
            VerificationMethod.internalBinaryWrite(message.verificationMethod[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* repeated string authentication = 5; */
        for (let i = 0; i < message.authentication.length; i++)
            writer.tag(5, WireType.LengthDelimited).string(message.authentication[i]);
        /* repeated string assertion_method = 6; */
        for (let i = 0; i < message.assertionMethod.length; i++)
            writer.tag(6, WireType.LengthDelimited).string(message.assertionMethod[i]);
        /* repeated string capability_invocation = 7; */
        for (let i = 0; i < message.capabilityInvocation.length; i++)
            writer.tag(7, WireType.LengthDelimited).string(message.capabilityInvocation[i]);
        /* repeated string capability_delegation = 8; */
        for (let i = 0; i < message.capabilityDelegation.length; i++)
            writer.tag(8, WireType.LengthDelimited).string(message.capabilityDelegation[i]);
        /* repeated string key_agreement = 9; */
        for (let i = 0; i < message.keyAgreement.length; i++)
            writer.tag(9, WireType.LengthDelimited).string(message.keyAgreement[i]);
        /* repeated sonrio.sonr.registry.Service service = 10; */
        for (let i = 0; i < message.service.length; i++)
            Service.internalBinaryWrite(message.service[i], writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* repeated string also_known_as = 11; */
        for (let i = 0; i < message.alsoKnownAs.length; i++)
            writer.tag(11, WireType.LengthDelimited).string(message.alsoKnownAs[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.sonr.registry.DIDDocument
 */
export const DIDDocument = new DIDDocument$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VerificationMethod$Type extends MessageType<VerificationMethod> {
    constructor() {
        super("sonrio.sonr.registry.VerificationMethod", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "controller", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "public_key_jwk", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => KeyValuePair },
            { no: 5, name: "public_key_base58", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "credential_json", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<VerificationMethod>): VerificationMethod {
        const message = { id: "", type: "", controller: "", publicKeyJwk: [], publicKeyBase58: "", credentialJson: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VerificationMethod>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VerificationMethod): VerificationMethod {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string type */ 2:
                    message.type = reader.string();
                    break;
                case /* string controller */ 3:
                    message.controller = reader.string();
                    break;
                case /* repeated sonrio.sonr.registry.KeyValuePair public_key_jwk */ 4:
                    message.publicKeyJwk.push(KeyValuePair.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string public_key_base58 */ 5:
                    message.publicKeyBase58 = reader.string();
                    break;
                case /* bytes credential_json */ 6:
                    message.credentialJson = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VerificationMethod, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string type = 2; */
        if (message.type !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.type);
        /* string controller = 3; */
        if (message.controller !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.controller);
        /* repeated sonrio.sonr.registry.KeyValuePair public_key_jwk = 4; */
        for (let i = 0; i < message.publicKeyJwk.length; i++)
            KeyValuePair.internalBinaryWrite(message.publicKeyJwk[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* string public_key_base58 = 5; */
        if (message.publicKeyBase58 !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.publicKeyBase58);
        /* bytes credential_json = 6; */
        if (message.credentialJson.length)
            writer.tag(6, WireType.LengthDelimited).bytes(message.credentialJson);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.sonr.registry.VerificationMethod
 */
export const VerificationMethod = new VerificationMethod$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Service$Type extends MessageType<Service> {
    constructor() {
        super("sonrio.sonr.registry.Service", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "service_endpoint", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => KeyValuePair }
        ]);
    }
    create(value?: PartialMessage<Service>): Service {
        const message = { id: "", type: "", serviceEndpoint: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Service>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Service): Service {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string type */ 2:
                    message.type = reader.string();
                    break;
                case /* repeated sonrio.sonr.registry.KeyValuePair service_endpoint */ 3:
                    message.serviceEndpoint.push(KeyValuePair.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Service, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string type = 2; */
        if (message.type !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.type);
        /* repeated sonrio.sonr.registry.KeyValuePair service_endpoint = 3; */
        for (let i = 0; i < message.serviceEndpoint.length; i++)
            KeyValuePair.internalBinaryWrite(message.serviceEndpoint[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.sonr.registry.Service
 */
export const Service = new Service$Type();
// @generated message type with reflection information, may provide speed optimized methods
class KeyValuePair$Type extends MessageType<KeyValuePair> {
    constructor() {
        super("sonrio.sonr.registry.KeyValuePair", [
            { no: 1, name: "key", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "value", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<KeyValuePair>): KeyValuePair {
        const message = { key: "", value: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<KeyValuePair>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: KeyValuePair): KeyValuePair {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string key */ 1:
                    message.key = reader.string();
                    break;
                case /* string value */ 2:
                    message.value = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: KeyValuePair, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string key = 1; */
        if (message.key !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.key);
        /* string value = 2; */
        if (message.value !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.sonr.registry.KeyValuePair
 */
export const KeyValuePair = new KeyValuePair$Type();
