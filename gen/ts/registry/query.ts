// @generated by protobuf-ts 2.8.1 with parameter generate_dependencies,long_type_string
// @generated from protobuf file "registry/query.proto" (package "sonrio.sonr.registry", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { PageResponse } from "../cosmos/base/query/v1beta1/pagination";
import { PageRequest } from "../cosmos/base/query/v1beta1/pagination";
import { WhoIs } from "./who_is";
import { Params } from "./params";
/**
 * QueryParamsRequest is request type for the Query/Params RPC method.
 *
 * @generated from protobuf message sonrio.sonr.registry.QueryParamsRequest
 */
export interface QueryParamsRequest {
}
/**
 * QueryParamsResponse is response type for the Query/Params RPC method.
 *
 * @generated from protobuf message sonrio.sonr.registry.QueryParamsResponse
 */
export interface QueryParamsResponse {
    /**
     * params holds all the parameters of this module.
     *
     * @generated from protobuf field: sonrio.sonr.registry.Params params = 1;
     */
    params?: Params;
}
/**
 * @generated from protobuf message sonrio.sonr.registry.QueryWhoIsRequest
 */
export interface QueryWhoIsRequest {
    /**
     * @generated from protobuf field: string did = 1;
     */
    did: string;
}
/**
 * @generated from protobuf message sonrio.sonr.registry.QueryWhoIsResponse
 */
export interface QueryWhoIsResponse {
    /**
     * @generated from protobuf field: sonrio.sonr.registry.WhoIs WhoIs = 1 [json_name = "WhoIs"];
     */
    whoIs?: WhoIs;
}
/**
 * @generated from protobuf message sonrio.sonr.registry.QueryAllWhoIsRequest
 */
export interface QueryAllWhoIsRequest {
    /**
     * @generated from protobuf field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
     */
    pagination?: PageRequest;
}
/**
 * @generated from protobuf message sonrio.sonr.registry.QueryAllWhoIsResponse
 */
export interface QueryAllWhoIsResponse {
    /**
     * @generated from protobuf field: repeated sonrio.sonr.registry.WhoIs WhoIs = 1 [json_name = "WhoIs"];
     */
    whoIs: WhoIs[];
    /**
     * @generated from protobuf field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
     */
    pagination?: PageResponse;
}
/**
 * @generated from protobuf message sonrio.sonr.registry.QueryWhoIsAliasRequest
 */
export interface QueryWhoIsAliasRequest {
    /**
     * Alias of a WhoIs.
     *
     * @generated from protobuf field: string alias = 1;
     */
    alias: string;
}
/**
 * @generated from protobuf message sonrio.sonr.registry.QueryWhoIsAliasResponse
 */
export interface QueryWhoIsAliasResponse {
    /**
     * @generated from protobuf field: sonrio.sonr.registry.WhoIs WhoIs = 1 [json_name = "WhoIs"];
     */
    whoIs?: WhoIs;
}
/**
 * @generated from protobuf message sonrio.sonr.registry.QueryWhoIsControllerRequest
 */
export interface QueryWhoIsControllerRequest {
    /**
     * Controller did string
     *
     * @generated from protobuf field: string controller = 1;
     */
    controller: string;
}
/**
 * @generated from protobuf message sonrio.sonr.registry.QueryWhoIsControllerResponse
 */
export interface QueryWhoIsControllerResponse {
    /**
     * @generated from protobuf field: sonrio.sonr.registry.WhoIs WhoIs = 1 [json_name = "WhoIs"];
     */
    whoIs?: WhoIs;
}
// @generated message type with reflection information, may provide speed optimized methods
class QueryParamsRequest$Type extends MessageType<QueryParamsRequest> {
    constructor() {
        super("sonrio.sonr.registry.QueryParamsRequest", []);
    }
    create(value?: PartialMessage<QueryParamsRequest>): QueryParamsRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryParamsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryParamsRequest): QueryParamsRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: QueryParamsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.sonr.registry.QueryParamsRequest
 */
export const QueryParamsRequest = new QueryParamsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryParamsResponse$Type extends MessageType<QueryParamsResponse> {
    constructor() {
        super("sonrio.sonr.registry.QueryParamsResponse", [
            { no: 1, name: "params", kind: "message", T: () => Params, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value?: PartialMessage<QueryParamsResponse>): QueryParamsResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryParamsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryParamsResponse): QueryParamsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* sonrio.sonr.registry.Params params */ 1:
                    message.params = Params.internalBinaryRead(reader, reader.uint32(), options, message.params);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryParamsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* sonrio.sonr.registry.Params params = 1; */
        if (message.params)
            Params.internalBinaryWrite(message.params, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.sonr.registry.QueryParamsResponse
 */
export const QueryParamsResponse = new QueryParamsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryWhoIsRequest$Type extends MessageType<QueryWhoIsRequest> {
    constructor() {
        super("sonrio.sonr.registry.QueryWhoIsRequest", [
            { no: 1, name: "did", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<QueryWhoIsRequest>): QueryWhoIsRequest {
        const message = { did: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryWhoIsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryWhoIsRequest): QueryWhoIsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string did */ 1:
                    message.did = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryWhoIsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string did = 1; */
        if (message.did !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.did);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.sonr.registry.QueryWhoIsRequest
 */
export const QueryWhoIsRequest = new QueryWhoIsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryWhoIsResponse$Type extends MessageType<QueryWhoIsResponse> {
    constructor() {
        super("sonrio.sonr.registry.QueryWhoIsResponse", [
            { no: 1, name: "WhoIs", kind: "message", jsonName: "WhoIs", T: () => WhoIs, options: { "gogoproto.nullable": true } }
        ]);
    }
    create(value?: PartialMessage<QueryWhoIsResponse>): QueryWhoIsResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryWhoIsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryWhoIsResponse): QueryWhoIsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* sonrio.sonr.registry.WhoIs WhoIs = 1 [json_name = "WhoIs"];*/ 1:
                    message.whoIs = WhoIs.internalBinaryRead(reader, reader.uint32(), options, message.whoIs);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryWhoIsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* sonrio.sonr.registry.WhoIs WhoIs = 1 [json_name = "WhoIs"]; */
        if (message.whoIs)
            WhoIs.internalBinaryWrite(message.whoIs, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.sonr.registry.QueryWhoIsResponse
 */
export const QueryWhoIsResponse = new QueryWhoIsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryAllWhoIsRequest$Type extends MessageType<QueryAllWhoIsRequest> {
    constructor() {
        super("sonrio.sonr.registry.QueryAllWhoIsRequest", [
            { no: 1, name: "pagination", kind: "message", T: () => PageRequest }
        ]);
    }
    create(value?: PartialMessage<QueryAllWhoIsRequest>): QueryAllWhoIsRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryAllWhoIsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryAllWhoIsRequest): QueryAllWhoIsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* cosmos.base.query.v1beta1.PageRequest pagination */ 1:
                    message.pagination = PageRequest.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryAllWhoIsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* cosmos.base.query.v1beta1.PageRequest pagination = 1; */
        if (message.pagination)
            PageRequest.internalBinaryWrite(message.pagination, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.sonr.registry.QueryAllWhoIsRequest
 */
export const QueryAllWhoIsRequest = new QueryAllWhoIsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryAllWhoIsResponse$Type extends MessageType<QueryAllWhoIsResponse> {
    constructor() {
        super("sonrio.sonr.registry.QueryAllWhoIsResponse", [
            { no: 1, name: "WhoIs", kind: "message", jsonName: "WhoIs", repeat: 1 /*RepeatType.PACKED*/, T: () => WhoIs, options: { "gogoproto.nullable": false } },
            { no: 2, name: "pagination", kind: "message", T: () => PageResponse }
        ]);
    }
    create(value?: PartialMessage<QueryAllWhoIsResponse>): QueryAllWhoIsResponse {
        const message = { whoIs: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryAllWhoIsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryAllWhoIsResponse): QueryAllWhoIsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated sonrio.sonr.registry.WhoIs WhoIs = 1 [json_name = "WhoIs"];*/ 1:
                    message.whoIs.push(WhoIs.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* cosmos.base.query.v1beta1.PageResponse pagination */ 2:
                    message.pagination = PageResponse.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryAllWhoIsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated sonrio.sonr.registry.WhoIs WhoIs = 1 [json_name = "WhoIs"]; */
        for (let i = 0; i < message.whoIs.length; i++)
            WhoIs.internalBinaryWrite(message.whoIs[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* cosmos.base.query.v1beta1.PageResponse pagination = 2; */
        if (message.pagination)
            PageResponse.internalBinaryWrite(message.pagination, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.sonr.registry.QueryAllWhoIsResponse
 */
export const QueryAllWhoIsResponse = new QueryAllWhoIsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryWhoIsAliasRequest$Type extends MessageType<QueryWhoIsAliasRequest> {
    constructor() {
        super("sonrio.sonr.registry.QueryWhoIsAliasRequest", [
            { no: 1, name: "alias", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<QueryWhoIsAliasRequest>): QueryWhoIsAliasRequest {
        const message = { alias: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryWhoIsAliasRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryWhoIsAliasRequest): QueryWhoIsAliasRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string alias */ 1:
                    message.alias = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryWhoIsAliasRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string alias = 1; */
        if (message.alias !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.alias);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.sonr.registry.QueryWhoIsAliasRequest
 */
export const QueryWhoIsAliasRequest = new QueryWhoIsAliasRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryWhoIsAliasResponse$Type extends MessageType<QueryWhoIsAliasResponse> {
    constructor() {
        super("sonrio.sonr.registry.QueryWhoIsAliasResponse", [
            { no: 1, name: "WhoIs", kind: "message", jsonName: "WhoIs", T: () => WhoIs, options: { "gogoproto.nullable": true } }
        ]);
    }
    create(value?: PartialMessage<QueryWhoIsAliasResponse>): QueryWhoIsAliasResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryWhoIsAliasResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryWhoIsAliasResponse): QueryWhoIsAliasResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* sonrio.sonr.registry.WhoIs WhoIs = 1 [json_name = "WhoIs"];*/ 1:
                    message.whoIs = WhoIs.internalBinaryRead(reader, reader.uint32(), options, message.whoIs);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryWhoIsAliasResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* sonrio.sonr.registry.WhoIs WhoIs = 1 [json_name = "WhoIs"]; */
        if (message.whoIs)
            WhoIs.internalBinaryWrite(message.whoIs, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.sonr.registry.QueryWhoIsAliasResponse
 */
export const QueryWhoIsAliasResponse = new QueryWhoIsAliasResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryWhoIsControllerRequest$Type extends MessageType<QueryWhoIsControllerRequest> {
    constructor() {
        super("sonrio.sonr.registry.QueryWhoIsControllerRequest", [
            { no: 1, name: "controller", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<QueryWhoIsControllerRequest>): QueryWhoIsControllerRequest {
        const message = { controller: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryWhoIsControllerRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryWhoIsControllerRequest): QueryWhoIsControllerRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string controller */ 1:
                    message.controller = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryWhoIsControllerRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string controller = 1; */
        if (message.controller !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.controller);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.sonr.registry.QueryWhoIsControllerRequest
 */
export const QueryWhoIsControllerRequest = new QueryWhoIsControllerRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryWhoIsControllerResponse$Type extends MessageType<QueryWhoIsControllerResponse> {
    constructor() {
        super("sonrio.sonr.registry.QueryWhoIsControllerResponse", [
            { no: 1, name: "WhoIs", kind: "message", jsonName: "WhoIs", T: () => WhoIs, options: { "gogoproto.nullable": true } }
        ]);
    }
    create(value?: PartialMessage<QueryWhoIsControllerResponse>): QueryWhoIsControllerResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryWhoIsControllerResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryWhoIsControllerResponse): QueryWhoIsControllerResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* sonrio.sonr.registry.WhoIs WhoIs = 1 [json_name = "WhoIs"];*/ 1:
                    message.whoIs = WhoIs.internalBinaryRead(reader, reader.uint32(), options, message.whoIs);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryWhoIsControllerResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* sonrio.sonr.registry.WhoIs WhoIs = 1 [json_name = "WhoIs"]; */
        if (message.whoIs)
            WhoIs.internalBinaryWrite(message.whoIs, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.sonr.registry.QueryWhoIsControllerResponse
 */
export const QueryWhoIsControllerResponse = new QueryWhoIsControllerResponse$Type();
/**
 * @generated ServiceType for protobuf service sonrio.sonr.registry.Query
 */
export const Query = new ServiceType("sonrio.sonr.registry.Query", [
    { name: "Params", options: { "google.api.http": { get: "/sonr-io/sonr/registry/params" } }, I: QueryParamsRequest, O: QueryParamsResponse },
    { name: "WhoIs", options: { "google.api.http": { get: "/sonr-io/sonr/registry/who_is/{did}" } }, I: QueryWhoIsRequest, O: QueryWhoIsResponse },
    { name: "WhoIsAll", options: { "google.api.http": { get: "/sonr-io/sonr/registry/who_is" } }, I: QueryAllWhoIsRequest, O: QueryAllWhoIsResponse },
    { name: "WhoIsAlias", options: { "google.api.http": { get: "/sonr-io/sonr/registry/who_is_alias/{alias}" } }, I: QueryWhoIsAliasRequest, O: QueryWhoIsAliasResponse },
    { name: "WhoIsController", options: { "google.api.http": { get: "/sonr-io/sonr/registry/who_is_controller/{controller}" } }, I: QueryWhoIsControllerRequest, O: QueryWhoIsControllerResponse }
]);
