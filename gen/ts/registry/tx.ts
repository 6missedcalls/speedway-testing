// @generated by protobuf-ts 2.8.1 with parameter generate_dependencies,long_type_string
// @generated from protobuf file "registry/tx.proto" (package "sonrio.sonr.registry", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { WhoIs } from "./who_is";
import { WhoIsType } from "./who_is";
import { PubKey } from "../cosmos/crypto/secp256k1/keys";
/**
 * swagger:model MsgCreateWhoIs
 *
 * @generated from protobuf message sonrio.sonr.registry.MsgCreateWhoIs
 */
export interface MsgCreateWhoIs {
    /**
     * Creator is the wallet address of the creator of the transaction.
     *
     * @generated from protobuf field: string creator = 1;
     */
    creator: string;
    /**
     * Secp256k1PublicKey is the public key of the creator.
     *
     * @generated from protobuf field: cosmos.crypto.secp256k1.PubKey pubkey = 2;
     */
    pubkey?: PubKey;
    /**
     * DidDocument is the DID document to be stored, in JSON format (see https://w3c-ccg.github.io/did-spec/#did-json-ld).
     *
     * @generated from protobuf field: bytes did_document = 3;
     */
    didDocument: Uint8Array;
    /**
     * WhoIsType is the type of the WhoIs to be created. Possible values are: "USER", "APPLICATION".
     *
     * @generated from protobuf field: sonrio.sonr.registry.WhoIsType whois_type = 4;
     */
    whoisType: WhoIsType;
}
/**
 * @generated from protobuf message sonrio.sonr.registry.MsgCreateWhoIsResponse
 */
export interface MsgCreateWhoIsResponse {
    /**
     * Did is the top level DID of the created WhoIs.
     *
     * @generated from protobuf field: bool success = 1;
     */
    success: boolean;
    /**
     * WhoIs is the created WhoIs, contains the DID document and associated metadata.
     *
     * @generated from protobuf field: sonrio.sonr.registry.WhoIs who_is = 2;
     */
    whoIs?: WhoIs;
}
/**
 * @generated from protobuf message sonrio.sonr.registry.MsgUpdateWhoIs
 */
export interface MsgUpdateWhoIs {
    /**
     * Creator is the wallet address of the creator of the transaction.
     *
     * @generated from protobuf field: string creator = 1;
     */
    creator: string;
    /**
     * DidDocument is the DID document to be stored, in JSON format (see https://w3c-ccg.github.io/did-spec/#did-json-ld).
     *
     * @generated from protobuf field: bytes did_document = 2;
     */
    didDocument: Uint8Array;
    /**
     * Metadata is the metadata to be stored with the DID document.
     *
     * @generated from protobuf field: map<string, string> metadata = 3;
     */
    metadata: {
        [key: string]: string;
    };
}
/**
 * @generated from protobuf message sonrio.sonr.registry.MsgUpdateWhoIsResponse
 */
export interface MsgUpdateWhoIsResponse {
    /**
     * Did is the top level DID of the WhoIs.
     *
     * @generated from protobuf field: bool success = 1;
     */
    success: boolean;
    /**
     * WhoIs is the created WhoIs, contains the DID document and associated metadata.
     *
     * @generated from protobuf field: sonrio.sonr.registry.WhoIs who_is = 2;
     */
    whoIs?: WhoIs;
}
/**
 * @generated from protobuf message sonrio.sonr.registry.MsgDeactivateWhoIs
 */
export interface MsgDeactivateWhoIs {
    /**
     * Creator is the wallet address of the creator of the transaction.
     *
     * @generated from protobuf field: string creator = 1;
     */
    creator: string;
}
/**
 * @generated from protobuf message sonrio.sonr.registry.MsgDeactivateWhoIsResponse
 */
export interface MsgDeactivateWhoIsResponse {
    /**
     * Success is true if the WhoIs was successfully deactivated.
     *
     * @generated from protobuf field: bool success = 1;
     */
    success: boolean;
    /**
     * Did is the top level DID of the WhoIs.
     *
     * @generated from protobuf field: string did = 2;
     */
    did: string;
}
/**
 * @generated from protobuf message sonrio.sonr.registry.MsgBuyAlias
 */
export interface MsgBuyAlias {
    /**
     * Creator is the wallet address of the creator of the transaction.
     *
     * @generated from protobuf field: string creator = 1;
     */
    creator: string;
    /**
     * Name is the name of the alias app extension to be bought. i.e. example.snr/{name}
     *
     * @generated from protobuf field: string name = 2;
     */
    name: string;
}
/**
 * @generated from protobuf message sonrio.sonr.registry.MsgBuyAliasResponse
 */
export interface MsgBuyAliasResponse {
    /**
     * Did is the top level DID of the WhoIs.
     *
     * @generated from protobuf field: bool success = 1;
     */
    success: boolean;
    /**
     * WhoIs is the updated WhoIs, contains the DID document and associated metadata.
     *
     * @generated from protobuf field: sonrio.sonr.registry.WhoIs who_is = 2;
     */
    whoIs?: WhoIs;
}
/**
 * @generated from protobuf message sonrio.sonr.registry.MsgTransferAlias
 */
export interface MsgTransferAlias {
    /**
     * Creator is the wallet address of the creator of the transaction.
     *
     * @generated from protobuf field: string creator = 1;
     */
    creator: string;
    /**
     * Alias is the name of the user domain alias to be transferred to the recipient. i.e. {alias}.snr
     *
     * @generated from protobuf field: string alias = 2;
     */
    alias: string;
    /**
     * Recipient is the wallet address of the recipient of the alias.
     *
     * @generated from protobuf field: string recipient = 3;
     */
    recipient: string;
    /**
     * Amount is the amount of the alias to be transferred.
     *
     * @generated from protobuf field: int32 amount = 4;
     */
    amount: number;
}
/**
 * @generated from protobuf message sonrio.sonr.registry.MsgTransferAliasResponse
 */
export interface MsgTransferAliasResponse {
    /**
     * Success is true if the Alias was successfully transferred.
     *
     * @generated from protobuf field: bool success = 1;
     */
    success: boolean;
    /**
     * WhoIs is the updated WhoIs, contains the DID document and associated metadata.
     *
     * @generated from protobuf field: sonrio.sonr.registry.WhoIs who_is = 2;
     */
    whoIs?: WhoIs;
}
/**
 * @generated from protobuf message sonrio.sonr.registry.MsgSellAlias
 */
export interface MsgSellAlias {
    /**
     * Creator is the wallet address of the creator of the transaction.
     *
     * @generated from protobuf field: string creator = 1;
     */
    creator: string;
    /**
     * Alias is the name of the app alias to be transferred to the recipient.  i.e. example.snr/{name}
     *
     * @generated from protobuf field: string alias = 2;
     */
    alias: string;
    /**
     * Amount is the amount of the alias to be transferred.
     *
     * @generated from protobuf field: int32 amount = 3;
     */
    amount: number;
}
/**
 * @generated from protobuf message sonrio.sonr.registry.MsgSellAliasResponse
 */
export interface MsgSellAliasResponse {
    /**
     * Success is true if the Alias was successfully transferred.
     *
     * @generated from protobuf field: bool success = 1;
     */
    success: boolean;
    /**
     * WhoIs is the updated WhoIs, contains the DID document and associated metadata.
     *
     * @generated from protobuf field: sonrio.sonr.registry.WhoIs who_is = 2;
     */
    whoIs?: WhoIs;
}
// @generated message type with reflection information, may provide speed optimized methods
class MsgCreateWhoIs$Type extends MessageType<MsgCreateWhoIs> {
    constructor() {
        super("sonrio.sonr.registry.MsgCreateWhoIs", [
            { no: 1, name: "creator", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "pubkey", kind: "message", T: () => PubKey },
            { no: 3, name: "did_document", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 4, name: "whois_type", kind: "enum", T: () => ["sonrio.sonr.registry.WhoIsType", WhoIsType] }
        ]);
    }
    create(value?: PartialMessage<MsgCreateWhoIs>): MsgCreateWhoIs {
        const message = { creator: "", didDocument: new Uint8Array(0), whoisType: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MsgCreateWhoIs>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgCreateWhoIs): MsgCreateWhoIs {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string creator */ 1:
                    message.creator = reader.string();
                    break;
                case /* cosmos.crypto.secp256k1.PubKey pubkey */ 2:
                    message.pubkey = PubKey.internalBinaryRead(reader, reader.uint32(), options, message.pubkey);
                    break;
                case /* bytes did_document */ 3:
                    message.didDocument = reader.bytes();
                    break;
                case /* sonrio.sonr.registry.WhoIsType whois_type */ 4:
                    message.whoisType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MsgCreateWhoIs, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string creator = 1; */
        if (message.creator !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.creator);
        /* cosmos.crypto.secp256k1.PubKey pubkey = 2; */
        if (message.pubkey)
            PubKey.internalBinaryWrite(message.pubkey, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* bytes did_document = 3; */
        if (message.didDocument.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.didDocument);
        /* sonrio.sonr.registry.WhoIsType whois_type = 4; */
        if (message.whoisType !== 0)
            writer.tag(4, WireType.Varint).int32(message.whoisType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.sonr.registry.MsgCreateWhoIs
 */
export const MsgCreateWhoIs = new MsgCreateWhoIs$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgCreateWhoIsResponse$Type extends MessageType<MsgCreateWhoIsResponse> {
    constructor() {
        super("sonrio.sonr.registry.MsgCreateWhoIsResponse", [
            { no: 1, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "who_is", kind: "message", T: () => WhoIs }
        ]);
    }
    create(value?: PartialMessage<MsgCreateWhoIsResponse>): MsgCreateWhoIsResponse {
        const message = { success: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MsgCreateWhoIsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgCreateWhoIsResponse): MsgCreateWhoIsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool success */ 1:
                    message.success = reader.bool();
                    break;
                case /* sonrio.sonr.registry.WhoIs who_is */ 2:
                    message.whoIs = WhoIs.internalBinaryRead(reader, reader.uint32(), options, message.whoIs);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MsgCreateWhoIsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool success = 1; */
        if (message.success !== false)
            writer.tag(1, WireType.Varint).bool(message.success);
        /* sonrio.sonr.registry.WhoIs who_is = 2; */
        if (message.whoIs)
            WhoIs.internalBinaryWrite(message.whoIs, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.sonr.registry.MsgCreateWhoIsResponse
 */
export const MsgCreateWhoIsResponse = new MsgCreateWhoIsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgUpdateWhoIs$Type extends MessageType<MsgUpdateWhoIs> {
    constructor() {
        super("sonrio.sonr.registry.MsgUpdateWhoIs", [
            { no: 1, name: "creator", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "did_document", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 3, name: "metadata", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } }
        ]);
    }
    create(value?: PartialMessage<MsgUpdateWhoIs>): MsgUpdateWhoIs {
        const message = { creator: "", didDocument: new Uint8Array(0), metadata: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MsgUpdateWhoIs>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgUpdateWhoIs): MsgUpdateWhoIs {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string creator */ 1:
                    message.creator = reader.string();
                    break;
                case /* bytes did_document */ 2:
                    message.didDocument = reader.bytes();
                    break;
                case /* map<string, string> metadata */ 3:
                    this.binaryReadMap3(message.metadata, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap3(map: MsgUpdateWhoIs["metadata"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof MsgUpdateWhoIs["metadata"] | undefined, val: MsgUpdateWhoIs["metadata"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field sonrio.sonr.registry.MsgUpdateWhoIs.metadata");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message: MsgUpdateWhoIs, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string creator = 1; */
        if (message.creator !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.creator);
        /* bytes did_document = 2; */
        if (message.didDocument.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.didDocument);
        /* map<string, string> metadata = 3; */
        for (let k of Object.keys(message.metadata))
            writer.tag(3, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.metadata[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.sonr.registry.MsgUpdateWhoIs
 */
export const MsgUpdateWhoIs = new MsgUpdateWhoIs$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgUpdateWhoIsResponse$Type extends MessageType<MsgUpdateWhoIsResponse> {
    constructor() {
        super("sonrio.sonr.registry.MsgUpdateWhoIsResponse", [
            { no: 1, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "who_is", kind: "message", T: () => WhoIs }
        ]);
    }
    create(value?: PartialMessage<MsgUpdateWhoIsResponse>): MsgUpdateWhoIsResponse {
        const message = { success: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MsgUpdateWhoIsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgUpdateWhoIsResponse): MsgUpdateWhoIsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool success */ 1:
                    message.success = reader.bool();
                    break;
                case /* sonrio.sonr.registry.WhoIs who_is */ 2:
                    message.whoIs = WhoIs.internalBinaryRead(reader, reader.uint32(), options, message.whoIs);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MsgUpdateWhoIsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool success = 1; */
        if (message.success !== false)
            writer.tag(1, WireType.Varint).bool(message.success);
        /* sonrio.sonr.registry.WhoIs who_is = 2; */
        if (message.whoIs)
            WhoIs.internalBinaryWrite(message.whoIs, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.sonr.registry.MsgUpdateWhoIsResponse
 */
export const MsgUpdateWhoIsResponse = new MsgUpdateWhoIsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgDeactivateWhoIs$Type extends MessageType<MsgDeactivateWhoIs> {
    constructor() {
        super("sonrio.sonr.registry.MsgDeactivateWhoIs", [
            { no: 1, name: "creator", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MsgDeactivateWhoIs>): MsgDeactivateWhoIs {
        const message = { creator: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MsgDeactivateWhoIs>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgDeactivateWhoIs): MsgDeactivateWhoIs {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string creator */ 1:
                    message.creator = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MsgDeactivateWhoIs, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string creator = 1; */
        if (message.creator !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.creator);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.sonr.registry.MsgDeactivateWhoIs
 */
export const MsgDeactivateWhoIs = new MsgDeactivateWhoIs$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgDeactivateWhoIsResponse$Type extends MessageType<MsgDeactivateWhoIsResponse> {
    constructor() {
        super("sonrio.sonr.registry.MsgDeactivateWhoIsResponse", [
            { no: 1, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "did", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MsgDeactivateWhoIsResponse>): MsgDeactivateWhoIsResponse {
        const message = { success: false, did: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MsgDeactivateWhoIsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgDeactivateWhoIsResponse): MsgDeactivateWhoIsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool success */ 1:
                    message.success = reader.bool();
                    break;
                case /* string did */ 2:
                    message.did = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MsgDeactivateWhoIsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool success = 1; */
        if (message.success !== false)
            writer.tag(1, WireType.Varint).bool(message.success);
        /* string did = 2; */
        if (message.did !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.did);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.sonr.registry.MsgDeactivateWhoIsResponse
 */
export const MsgDeactivateWhoIsResponse = new MsgDeactivateWhoIsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgBuyAlias$Type extends MessageType<MsgBuyAlias> {
    constructor() {
        super("sonrio.sonr.registry.MsgBuyAlias", [
            { no: 1, name: "creator", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MsgBuyAlias>): MsgBuyAlias {
        const message = { creator: "", name: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MsgBuyAlias>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgBuyAlias): MsgBuyAlias {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string creator */ 1:
                    message.creator = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MsgBuyAlias, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string creator = 1; */
        if (message.creator !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.creator);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.sonr.registry.MsgBuyAlias
 */
export const MsgBuyAlias = new MsgBuyAlias$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgBuyAliasResponse$Type extends MessageType<MsgBuyAliasResponse> {
    constructor() {
        super("sonrio.sonr.registry.MsgBuyAliasResponse", [
            { no: 1, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "who_is", kind: "message", T: () => WhoIs }
        ]);
    }
    create(value?: PartialMessage<MsgBuyAliasResponse>): MsgBuyAliasResponse {
        const message = { success: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MsgBuyAliasResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgBuyAliasResponse): MsgBuyAliasResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool success */ 1:
                    message.success = reader.bool();
                    break;
                case /* sonrio.sonr.registry.WhoIs who_is */ 2:
                    message.whoIs = WhoIs.internalBinaryRead(reader, reader.uint32(), options, message.whoIs);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MsgBuyAliasResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool success = 1; */
        if (message.success !== false)
            writer.tag(1, WireType.Varint).bool(message.success);
        /* sonrio.sonr.registry.WhoIs who_is = 2; */
        if (message.whoIs)
            WhoIs.internalBinaryWrite(message.whoIs, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.sonr.registry.MsgBuyAliasResponse
 */
export const MsgBuyAliasResponse = new MsgBuyAliasResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgTransferAlias$Type extends MessageType<MsgTransferAlias> {
    constructor() {
        super("sonrio.sonr.registry.MsgTransferAlias", [
            { no: 1, name: "creator", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "alias", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "recipient", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "amount", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<MsgTransferAlias>): MsgTransferAlias {
        const message = { creator: "", alias: "", recipient: "", amount: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MsgTransferAlias>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgTransferAlias): MsgTransferAlias {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string creator */ 1:
                    message.creator = reader.string();
                    break;
                case /* string alias */ 2:
                    message.alias = reader.string();
                    break;
                case /* string recipient */ 3:
                    message.recipient = reader.string();
                    break;
                case /* int32 amount */ 4:
                    message.amount = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MsgTransferAlias, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string creator = 1; */
        if (message.creator !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.creator);
        /* string alias = 2; */
        if (message.alias !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.alias);
        /* string recipient = 3; */
        if (message.recipient !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.recipient);
        /* int32 amount = 4; */
        if (message.amount !== 0)
            writer.tag(4, WireType.Varint).int32(message.amount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.sonr.registry.MsgTransferAlias
 */
export const MsgTransferAlias = new MsgTransferAlias$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgTransferAliasResponse$Type extends MessageType<MsgTransferAliasResponse> {
    constructor() {
        super("sonrio.sonr.registry.MsgTransferAliasResponse", [
            { no: 1, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "who_is", kind: "message", T: () => WhoIs }
        ]);
    }
    create(value?: PartialMessage<MsgTransferAliasResponse>): MsgTransferAliasResponse {
        const message = { success: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MsgTransferAliasResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgTransferAliasResponse): MsgTransferAliasResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool success */ 1:
                    message.success = reader.bool();
                    break;
                case /* sonrio.sonr.registry.WhoIs who_is */ 2:
                    message.whoIs = WhoIs.internalBinaryRead(reader, reader.uint32(), options, message.whoIs);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MsgTransferAliasResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool success = 1; */
        if (message.success !== false)
            writer.tag(1, WireType.Varint).bool(message.success);
        /* sonrio.sonr.registry.WhoIs who_is = 2; */
        if (message.whoIs)
            WhoIs.internalBinaryWrite(message.whoIs, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.sonr.registry.MsgTransferAliasResponse
 */
export const MsgTransferAliasResponse = new MsgTransferAliasResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgSellAlias$Type extends MessageType<MsgSellAlias> {
    constructor() {
        super("sonrio.sonr.registry.MsgSellAlias", [
            { no: 1, name: "creator", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "alias", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "amount", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<MsgSellAlias>): MsgSellAlias {
        const message = { creator: "", alias: "", amount: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MsgSellAlias>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgSellAlias): MsgSellAlias {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string creator */ 1:
                    message.creator = reader.string();
                    break;
                case /* string alias */ 2:
                    message.alias = reader.string();
                    break;
                case /* int32 amount */ 3:
                    message.amount = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MsgSellAlias, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string creator = 1; */
        if (message.creator !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.creator);
        /* string alias = 2; */
        if (message.alias !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.alias);
        /* int32 amount = 3; */
        if (message.amount !== 0)
            writer.tag(3, WireType.Varint).int32(message.amount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.sonr.registry.MsgSellAlias
 */
export const MsgSellAlias = new MsgSellAlias$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgSellAliasResponse$Type extends MessageType<MsgSellAliasResponse> {
    constructor() {
        super("sonrio.sonr.registry.MsgSellAliasResponse", [
            { no: 1, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "who_is", kind: "message", T: () => WhoIs }
        ]);
    }
    create(value?: PartialMessage<MsgSellAliasResponse>): MsgSellAliasResponse {
        const message = { success: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MsgSellAliasResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgSellAliasResponse): MsgSellAliasResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool success */ 1:
                    message.success = reader.bool();
                    break;
                case /* sonrio.sonr.registry.WhoIs who_is */ 2:
                    message.whoIs = WhoIs.internalBinaryRead(reader, reader.uint32(), options, message.whoIs);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MsgSellAliasResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool success = 1; */
        if (message.success !== false)
            writer.tag(1, WireType.Varint).bool(message.success);
        /* sonrio.sonr.registry.WhoIs who_is = 2; */
        if (message.whoIs)
            WhoIs.internalBinaryWrite(message.whoIs, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.sonr.registry.MsgSellAliasResponse
 */
export const MsgSellAliasResponse = new MsgSellAliasResponse$Type();
/**
 * @generated ServiceType for protobuf service sonrio.sonr.registry.Msg
 */
export const Msg = new ServiceType("sonrio.sonr.registry.Msg", [
    { name: "CreateWhoIs", options: {}, I: MsgCreateWhoIs, O: MsgCreateWhoIsResponse },
    { name: "UpdateWhoIs", options: {}, I: MsgUpdateWhoIs, O: MsgUpdateWhoIsResponse },
    { name: "DeactivateWhoIs", options: {}, I: MsgDeactivateWhoIs, O: MsgDeactivateWhoIsResponse },
    { name: "BuyAlias", options: {}, I: MsgBuyAlias, O: MsgBuyAliasResponse },
    { name: "SellAlias", options: {}, I: MsgSellAlias, O: MsgSellAliasResponse },
    { name: "TransferAlias", options: {}, I: MsgTransferAlias, O: MsgTransferAliasResponse }
]);
