// @generated by protobuf-ts 2.8.1 with parameter generate_dependencies,long_type_string
// @generated from protobuf file "service/v1/exchange.proto" (package "sonrio.motor.service.v1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Peer } from "../../common/v1/info";
/**
 * @generated from protobuf message sonrio.motor.service.v1.MailboxMessage
 */
export interface MailboxMessage {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string; // ID is the Message ID
    /**
     * @generated from protobuf field: bytes body = 2;
     */
    body: Uint8Array; // Payload is the message data
    /**
     * @generated from protobuf field: sonrio.common.v1.Peer from = 3;
     */
    from?: Peer; // Users Peer Data
    /**
     * @generated from protobuf field: sonrio.common.v1.Peer to = 4;
     */
    to?: Peer; // Receivers Peer Data
    /**
     * @generated from protobuf field: bytes signature = 5;
     */
    signature: Uint8Array; // Signature of the Attached Data
    /**
     * @generated from protobuf field: int64 created_at = 6;
     */
    createdAt: string; // Timestamp
}
/**
 * Invitation Message sent on RPC
 *
 * @generated from protobuf message sonrio.motor.service.v1.InviteRequest
 */
export interface InviteRequest {
    /**
     * @generated from protobuf field: bytes body = 1;
     */
    body: Uint8Array; // Attached Data
    /**
     * @generated from protobuf field: bytes signature = 2;
     */
    signature: Uint8Array; // Signature of the Attached Data
    /**
     * @generated from protobuf field: sonrio.common.v1.Peer from = 3;
     */
    from?: Peer; // Users Peer Data
    /**
     * @generated from protobuf field: sonrio.common.v1.Peer to = 4;
     */
    to?: Peer; // Receivers Peer Data
}
/**
 * Reply Message sent on RPC
 *
 * @generated from protobuf message sonrio.motor.service.v1.InviteResponse
 */
export interface InviteResponse {
    /**
     * @generated from protobuf field: bool decision = 1;
     */
    decision: boolean; // Success
    /**
     * @generated from protobuf field: bytes body = 2;
     */
    body: Uint8Array; // Attached Data
    /**
     * @generated from protobuf field: bytes signature = 3;
     */
    signature: Uint8Array; // Signature of the Attached Data
    /**
     * @generated from protobuf field: sonrio.common.v1.Peer from = 4;
     */
    from?: Peer; // Users Peer Data
    /**
     * @generated from protobuf field: sonrio.common.v1.Peer to = 5;
     */
    to?: Peer; // Receivers Peer Data
}
// @generated message type with reflection information, may provide speed optimized methods
class MailboxMessage$Type extends MessageType<MailboxMessage> {
    constructor() {
        super("sonrio.motor.service.v1.MailboxMessage", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "body", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 3, name: "from", kind: "message", T: () => Peer },
            { no: 4, name: "to", kind: "message", T: () => Peer },
            { no: 5, name: "signature", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 6, name: "created_at", kind: "scalar", T: 3 /*ScalarType.INT64*/ }
        ]);
    }
    create(value?: PartialMessage<MailboxMessage>): MailboxMessage {
        const message = { id: "", body: new Uint8Array(0), signature: new Uint8Array(0), createdAt: "0" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MailboxMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MailboxMessage): MailboxMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* bytes body */ 2:
                    message.body = reader.bytes();
                    break;
                case /* sonrio.common.v1.Peer from */ 3:
                    message.from = Peer.internalBinaryRead(reader, reader.uint32(), options, message.from);
                    break;
                case /* sonrio.common.v1.Peer to */ 4:
                    message.to = Peer.internalBinaryRead(reader, reader.uint32(), options, message.to);
                    break;
                case /* bytes signature */ 5:
                    message.signature = reader.bytes();
                    break;
                case /* int64 created_at */ 6:
                    message.createdAt = reader.int64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MailboxMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* bytes body = 2; */
        if (message.body.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.body);
        /* sonrio.common.v1.Peer from = 3; */
        if (message.from)
            Peer.internalBinaryWrite(message.from, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* sonrio.common.v1.Peer to = 4; */
        if (message.to)
            Peer.internalBinaryWrite(message.to, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* bytes signature = 5; */
        if (message.signature.length)
            writer.tag(5, WireType.LengthDelimited).bytes(message.signature);
        /* int64 created_at = 6; */
        if (message.createdAt !== "0")
            writer.tag(6, WireType.Varint).int64(message.createdAt);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.motor.service.v1.MailboxMessage
 */
export const MailboxMessage = new MailboxMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InviteRequest$Type extends MessageType<InviteRequest> {
    constructor() {
        super("sonrio.motor.service.v1.InviteRequest", [
            { no: 1, name: "body", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "signature", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 3, name: "from", kind: "message", T: () => Peer },
            { no: 4, name: "to", kind: "message", T: () => Peer }
        ]);
    }
    create(value?: PartialMessage<InviteRequest>): InviteRequest {
        const message = { body: new Uint8Array(0), signature: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<InviteRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InviteRequest): InviteRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes body */ 1:
                    message.body = reader.bytes();
                    break;
                case /* bytes signature */ 2:
                    message.signature = reader.bytes();
                    break;
                case /* sonrio.common.v1.Peer from */ 3:
                    message.from = Peer.internalBinaryRead(reader, reader.uint32(), options, message.from);
                    break;
                case /* sonrio.common.v1.Peer to */ 4:
                    message.to = Peer.internalBinaryRead(reader, reader.uint32(), options, message.to);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InviteRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes body = 1; */
        if (message.body.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.body);
        /* bytes signature = 2; */
        if (message.signature.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.signature);
        /* sonrio.common.v1.Peer from = 3; */
        if (message.from)
            Peer.internalBinaryWrite(message.from, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* sonrio.common.v1.Peer to = 4; */
        if (message.to)
            Peer.internalBinaryWrite(message.to, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.motor.service.v1.InviteRequest
 */
export const InviteRequest = new InviteRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InviteResponse$Type extends MessageType<InviteResponse> {
    constructor() {
        super("sonrio.motor.service.v1.InviteResponse", [
            { no: 1, name: "decision", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "body", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 3, name: "signature", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 4, name: "from", kind: "message", T: () => Peer },
            { no: 5, name: "to", kind: "message", T: () => Peer }
        ]);
    }
    create(value?: PartialMessage<InviteResponse>): InviteResponse {
        const message = { decision: false, body: new Uint8Array(0), signature: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<InviteResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InviteResponse): InviteResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool decision */ 1:
                    message.decision = reader.bool();
                    break;
                case /* bytes body */ 2:
                    message.body = reader.bytes();
                    break;
                case /* bytes signature */ 3:
                    message.signature = reader.bytes();
                    break;
                case /* sonrio.common.v1.Peer from */ 4:
                    message.from = Peer.internalBinaryRead(reader, reader.uint32(), options, message.from);
                    break;
                case /* sonrio.common.v1.Peer to */ 5:
                    message.to = Peer.internalBinaryRead(reader, reader.uint32(), options, message.to);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InviteResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool decision = 1; */
        if (message.decision !== false)
            writer.tag(1, WireType.Varint).bool(message.decision);
        /* bytes body = 2; */
        if (message.body.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.body);
        /* bytes signature = 3; */
        if (message.signature.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.signature);
        /* sonrio.common.v1.Peer from = 4; */
        if (message.from)
            Peer.internalBinaryWrite(message.from, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* sonrio.common.v1.Peer to = 5; */
        if (message.to)
            Peer.internalBinaryWrite(message.to, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.motor.service.v1.InviteResponse
 */
export const InviteResponse = new InviteResponse$Type();
