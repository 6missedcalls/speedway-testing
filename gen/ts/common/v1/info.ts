// @generated by protobuf-ts 2.8.1 with parameter generate_dependencies,long_type_string
// @generated from protobuf file "common/v1/info.proto" (package "sonrio.common.v1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * Basic Info Sent to Peers to Establish Connections
 *
 * @generated from protobuf message sonrio.common.v1.Peer
 */
export interface Peer {
    /**
     * @generated from protobuf field: string peer_id = 1;
     */
    peerId: string; // Peer ID of Libp2p Peer
    /**
     * @generated from protobuf field: string did = 2;
     */
    did: string; // User Sonr Domain
    /**
     * @generated from protobuf field: sonrio.common.v1.Peer.Status status = 3;
     */
    status: Peer_Status; // Peer Status
}
/**
 * Peers Active Status
 *
 * @generated from protobuf enum sonrio.common.v1.Peer.Status
 */
export enum Peer_Status {
    /**
     * Offline - Not Online or Not a Full Node
     *
     * @generated from protobuf enum value: STATUS_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * Online - Full Node Available
     *
     * @generated from protobuf enum value: STATUS_ONLINE = 1;
     */
    ONLINE = 1,
    /**
     * Away - Not Online, but has a full node
     *
     * @generated from protobuf enum value: STATUS_AWAY = 2;
     */
    AWAY = 2,
    /**
     * Busy - Online, but busy with Transfer
     *
     * @generated from protobuf enum value: STATUS_BUSY = 3;
     */
    BUSY = 3
}
/**
 * AuthInfo is a object used by Motor clients to store authentication information in Biometric storage
 *
 * @generated from protobuf message sonrio.common.v1.AuthInfo
 */
export interface AuthInfo {
    /**
     * @generated from protobuf field: string address = 1;
     */
    address: string;
    /**
     * @generated from protobuf field: string did = 2;
     */
    did: string;
    /**
     * @generated from protobuf field: bytes aes_dsc_key = 3;
     */
    aesDscKey: Uint8Array;
    /**
     * @generated from protobuf field: bytes aes_psk_key = 4;
     */
    aesPskKey: Uint8Array;
    /**
     * @generated from protobuf field: string password = 5;
     */
    password: string;
    /**
     * @generated from protobuf field: int64 timestamp = 6;
     */
    timestamp: string;
}
/**
 * @generated from protobuf enum sonrio.common.v1.EntityKind
 */
export enum EntityKind {
    /**
     * @generated from protobuf enum value: ADDRESS = 0;
     */
    ADDRESS = 0,
    /**
     * @generated from protobuf enum value: DID = 1;
     */
    DID = 1,
    /**
     * @generated from protobuf enum value: CID = 2;
     */
    CID = 2
}
/**
 * @generated from protobuf enum sonrio.common.v1.BlockchainModule
 */
export enum BlockchainModule {
    /**
     * Query x/registry module
     *
     * @generated from protobuf enum value: REGISTRY = 0;
     */
    REGISTRY = 0,
    /**
     * Query x/schema module
     *
     * @generated from protobuf enum value: SCHEMA = 1;
     */
    SCHEMA = 1,
    /**
     * Query x/bucket module
     *
     * @generated from protobuf enum value: BUCKET = 2;
     */
    BUCKET = 2
}
/**
 * @generated from protobuf enum sonrio.common.v1.MotorCallbackMessage
 */
export enum MotorCallbackMessage {
    /**
     * @generated from protobuf enum value: MTR_INIT = 0;
     */
    MTR_INIT = 0,
    /**
     * @generated from protobuf enum value: MTR_FAUCET_RECEIVED = 1;
     */
    MTR_FAUCET_RECEIVED = 1,
    /**
     * @generated from protobuf enum value: MTR_SHARDS_CREATED = 2;
     */
    MTR_SHARDS_CREATED = 2,
    /**
     * @generated from protobuf enum value: MTR_VAULT_CREATED = 3;
     */
    MTR_VAULT_CREATED = 3,
    /**
     * @generated from protobuf enum value: MTR_ACCOUNT_CREATED = 4;
     */
    MTR_ACCOUNT_CREATED = 4,
    /**
     * @generated from protobuf enum value: MTR_LOGGED_IN = 5;
     */
    MTR_LOGGED_IN = 5
}
// @generated message type with reflection information, may provide speed optimized methods
class Peer$Type extends MessageType<Peer> {
    constructor() {
        super("sonrio.common.v1.Peer", [
            { no: 1, name: "peer_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "did", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "status", kind: "enum", T: () => ["sonrio.common.v1.Peer.Status", Peer_Status, "STATUS_"] }
        ]);
    }
    create(value?: PartialMessage<Peer>): Peer {
        const message = { peerId: "", did: "", status: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Peer>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Peer): Peer {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string peer_id */ 1:
                    message.peerId = reader.string();
                    break;
                case /* string did */ 2:
                    message.did = reader.string();
                    break;
                case /* sonrio.common.v1.Peer.Status status */ 3:
                    message.status = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Peer, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string peer_id = 1; */
        if (message.peerId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.peerId);
        /* string did = 2; */
        if (message.did !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.did);
        /* sonrio.common.v1.Peer.Status status = 3; */
        if (message.status !== 0)
            writer.tag(3, WireType.Varint).int32(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.common.v1.Peer
 */
export const Peer = new Peer$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AuthInfo$Type extends MessageType<AuthInfo> {
    constructor() {
        super("sonrio.common.v1.AuthInfo", [
            { no: 1, name: "address", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "did", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "aes_dsc_key", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 4, name: "aes_psk_key", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 5, name: "password", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "timestamp", kind: "scalar", T: 3 /*ScalarType.INT64*/ }
        ]);
    }
    create(value?: PartialMessage<AuthInfo>): AuthInfo {
        const message = { address: "", did: "", aesDscKey: new Uint8Array(0), aesPskKey: new Uint8Array(0), password: "", timestamp: "0" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AuthInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AuthInfo): AuthInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string address */ 1:
                    message.address = reader.string();
                    break;
                case /* string did */ 2:
                    message.did = reader.string();
                    break;
                case /* bytes aes_dsc_key */ 3:
                    message.aesDscKey = reader.bytes();
                    break;
                case /* bytes aes_psk_key */ 4:
                    message.aesPskKey = reader.bytes();
                    break;
                case /* string password */ 5:
                    message.password = reader.string();
                    break;
                case /* int64 timestamp */ 6:
                    message.timestamp = reader.int64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AuthInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string address = 1; */
        if (message.address !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.address);
        /* string did = 2; */
        if (message.did !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.did);
        /* bytes aes_dsc_key = 3; */
        if (message.aesDscKey.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.aesDscKey);
        /* bytes aes_psk_key = 4; */
        if (message.aesPskKey.length)
            writer.tag(4, WireType.LengthDelimited).bytes(message.aesPskKey);
        /* string password = 5; */
        if (message.password !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.password);
        /* int64 timestamp = 6; */
        if (message.timestamp !== "0")
            writer.tag(6, WireType.Varint).int64(message.timestamp);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.common.v1.AuthInfo
 */
export const AuthInfo = new AuthInfo$Type();
