// @generated by protobuf-ts 2.8.1 with parameter generate_dependencies,long_type_string
// @generated from protobuf file "common/v1/ipns.proto" (package "sonrio.common.v1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message sonrio.common.v1.IpnsEntry
 */
export interface IpnsEntry {
    /**
     * @generated from protobuf field: bytes value = 1;
     */
    value: Uint8Array;
    /**
     * @generated from protobuf field: bytes signature = 2;
     */
    signature: Uint8Array;
    /**
     * @generated from protobuf field: sonrio.common.v1.IpnsEntry.ValidityType validityType = 3;
     */
    validityType: IpnsEntry_ValidityType;
    /**
     * @generated from protobuf field: bytes validity = 4;
     */
    validity: Uint8Array;
    /**
     * @generated from protobuf field: uint64 sequence = 5;
     */
    sequence: string;
    /**
     * @generated from protobuf field: uint64 ttl = 6;
     */
    ttl: string;
    /**
     * @generated from protobuf field: bytes pubKey = 7;
     */
    pubKey: Uint8Array;
}
/**
 * @generated from protobuf enum sonrio.common.v1.IpnsEntry.ValidityType
 */
export enum IpnsEntry_ValidityType {
    /**
     * setting an EOL says "this record is valid until..."
     *
     * @generated from protobuf enum value: EOL = 0;
     */
    EOL = 0
}
// @generated message type with reflection information, may provide speed optimized methods
class IpnsEntry$Type extends MessageType<IpnsEntry> {
    constructor() {
        super("sonrio.common.v1.IpnsEntry", [
            { no: 1, name: "value", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "signature", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 3, name: "validityType", kind: "enum", T: () => ["sonrio.common.v1.IpnsEntry.ValidityType", IpnsEntry_ValidityType] },
            { no: 4, name: "validity", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 5, name: "sequence", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 6, name: "ttl", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 7, name: "pubKey", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<IpnsEntry>): IpnsEntry {
        const message = { value: new Uint8Array(0), signature: new Uint8Array(0), validityType: 0, validity: new Uint8Array(0), sequence: "0", ttl: "0", pubKey: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<IpnsEntry>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IpnsEntry): IpnsEntry {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes value */ 1:
                    message.value = reader.bytes();
                    break;
                case /* bytes signature */ 2:
                    message.signature = reader.bytes();
                    break;
                case /* sonrio.common.v1.IpnsEntry.ValidityType validityType */ 3:
                    message.validityType = reader.int32();
                    break;
                case /* bytes validity */ 4:
                    message.validity = reader.bytes();
                    break;
                case /* uint64 sequence */ 5:
                    message.sequence = reader.uint64().toString();
                    break;
                case /* uint64 ttl */ 6:
                    message.ttl = reader.uint64().toString();
                    break;
                case /* bytes pubKey */ 7:
                    message.pubKey = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IpnsEntry, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes value = 1; */
        if (message.value.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.value);
        /* bytes signature = 2; */
        if (message.signature.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.signature);
        /* sonrio.common.v1.IpnsEntry.ValidityType validityType = 3; */
        if (message.validityType !== 0)
            writer.tag(3, WireType.Varint).int32(message.validityType);
        /* bytes validity = 4; */
        if (message.validity.length)
            writer.tag(4, WireType.LengthDelimited).bytes(message.validity);
        /* uint64 sequence = 5; */
        if (message.sequence !== "0")
            writer.tag(5, WireType.Varint).uint64(message.sequence);
        /* uint64 ttl = 6; */
        if (message.ttl !== "0")
            writer.tag(6, WireType.Varint).uint64(message.ttl);
        /* bytes pubKey = 7; */
        if (message.pubKey.length)
            writer.tag(7, WireType.LengthDelimited).bytes(message.pubKey);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.common.v1.IpnsEntry
 */
export const IpnsEntry = new IpnsEntry$Type();
