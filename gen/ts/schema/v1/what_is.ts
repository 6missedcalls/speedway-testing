// @generated by protobuf-ts 2.8.1 with parameter generate_dependencies,long_type_string
// @generated from protobuf file "schema/v1/what_is.proto" (package "sonrio.sonr.schema", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { SchemaDefinition } from "./schema";
/**
 * @generated from protobuf message sonrio.sonr.schema.WhatIs
 */
export interface WhatIs {
    /**
     * DID is the DID of the object
     *
     * @generated from protobuf field: string did = 1;
     */
    did: string;
    /**
     * Object_doc is the object document
     *
     * @generated from protobuf field: sonrio.sonr.schema.SchemaDefinition schema = 2;
     */
    schema?: SchemaDefinition;
    /**
     * Creator is the DID of the creator
     *
     * @generated from protobuf field: string creator = 3;
     */
    creator: string;
    /**
     * Timestamp is the time of the last update of the DID Document
     *
     * @generated from protobuf field: int64 timestamp = 4;
     */
    timestamp: string;
    /**
     * IsActive is the status of the DID Document
     *
     * @generated from protobuf field: bool is_active = 5;
     */
    isActive: boolean;
    /**
     * Metadata is a map of key-value pairs that can be used to store additional information about the WhatIs (Schema)
     *
     * @generated from protobuf field: map<string, string> metadata = 6;
     */
    metadata: {
        [key: string]: string;
    };
}
// @generated message type with reflection information, may provide speed optimized methods
class WhatIs$Type extends MessageType<WhatIs> {
    constructor() {
        super("sonrio.sonr.schema.WhatIs", [
            { no: 1, name: "did", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "schema", kind: "message", T: () => SchemaDefinition },
            { no: 3, name: "creator", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "timestamp", kind: "scalar", T: 3 /*ScalarType.INT64*/ },
            { no: 5, name: "is_active", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "metadata", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } }
        ]);
    }
    create(value?: PartialMessage<WhatIs>): WhatIs {
        const message = { did: "", creator: "", timestamp: "0", isActive: false, metadata: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WhatIs>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WhatIs): WhatIs {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string did */ 1:
                    message.did = reader.string();
                    break;
                case /* sonrio.sonr.schema.SchemaDefinition schema */ 2:
                    message.schema = SchemaDefinition.internalBinaryRead(reader, reader.uint32(), options, message.schema);
                    break;
                case /* string creator */ 3:
                    message.creator = reader.string();
                    break;
                case /* int64 timestamp */ 4:
                    message.timestamp = reader.int64().toString();
                    break;
                case /* bool is_active */ 5:
                    message.isActive = reader.bool();
                    break;
                case /* map<string, string> metadata */ 6:
                    this.binaryReadMap6(message.metadata, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap6(map: WhatIs["metadata"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof WhatIs["metadata"] | undefined, val: WhatIs["metadata"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field sonrio.sonr.schema.WhatIs.metadata");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message: WhatIs, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string did = 1; */
        if (message.did !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.did);
        /* sonrio.sonr.schema.SchemaDefinition schema = 2; */
        if (message.schema)
            SchemaDefinition.internalBinaryWrite(message.schema, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string creator = 3; */
        if (message.creator !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.creator);
        /* int64 timestamp = 4; */
        if (message.timestamp !== "0")
            writer.tag(4, WireType.Varint).int64(message.timestamp);
        /* bool is_active = 5; */
        if (message.isActive !== false)
            writer.tag(5, WireType.Varint).bool(message.isActive);
        /* map<string, string> metadata = 6; */
        for (let k of Object.keys(message.metadata))
            writer.tag(6, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.metadata[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.sonr.schema.WhatIs
 */
export const WhatIs = new WhatIs$Type();
