// @generated by protobuf-ts 2.8.1 with parameter generate_dependencies,long_type_string
// @generated from protobuf file "schema/v1/schema.proto" (package "sonrio.sonr.schema", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * Defines key value pairs for indexable metadata related to the schema
 *
 * @generated from protobuf message sonrio.sonr.schema.MetadataDefintion
 */
export interface MetadataDefintion {
    /**
     * metadata key
     *
     * @generated from protobuf field: string key = 1;
     */
    key: string;
    /**
     * metadata value
     *
     * @generated from protobuf field: string value = 2;
     */
    value: string;
}
/**
 *
 * Defines the "kind" of an item within a collection for a SchemaKind that is "LIST"
 * Definition is recurssive to allow nesting of definitions
 *
 * @generated from protobuf message sonrio.sonr.schema.SchemaItemKindDefinition
 */
export interface SchemaItemKindDefinition {
    /**
     * Type of the item contained within the collection, must be of type SchemaKind
     *
     * @generated from protobuf field: sonrio.sonr.schema.SchemaKind field = 1;
     */
    field: SchemaKind;
    /**
     * Type of an item if field is of type list. usage is for defining multidimensional collections.
     *
     * @generated from protobuf field: sonrio.sonr.schema.SchemaItemKindDefinition item = 2;
     */
    item?: SchemaItemKindDefinition;
    /**
     * Type of link for the given item for schemas, type should be SCHEMA fields of type LINK
     *
     * @generated from protobuf field: sonrio.sonr.schema.LinkKind link_kind = 3;
     */
    linkKind: LinkKind;
    /**
     * String to denote URI for Link, should be defined if field is of type 'LINK'
     *
     * @generated from protobuf field: string link = 4;
     */
    link: string;
}
/**
 *
 * Defines a type for a given property within a Schema types conform to the IPLD Kind defintion
 * https://ipld.io/docs/data-model/kinds/
 *
 * @generated from protobuf message sonrio.sonr.schema.SchemaKindDefinition
 */
export interface SchemaKindDefinition {
    /**
     * Name of the property
     *
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * Type of a single schema property
     *
     * @generated from protobuf field: sonrio.sonr.schema.SchemaKind field = 2;
     */
    field: SchemaKind;
    /**
     * Optional field for a link context if `SchemaKind` is of type `Link`
     *
     * @generated from protobuf field: sonrio.sonr.schema.LinkKind link_kind = 3;
     */
    linkKind: LinkKind;
    /**
     * String to denote URI for Link, should be defined if field is of type 'LINK'
     *
     * @generated from protobuf field: string link = 4;
     */
    link: string;
    /**
     * optional field if field is of Kind List to define item types.
     *
     * @generated from protobuf field: sonrio.sonr.schema.SchemaItemKindDefinition item = 5;
     */
    item?: SchemaItemKindDefinition;
}
/**
 *
 * Defines a schema and additional metadata related to the definition
 *
 * @generated from protobuf message sonrio.sonr.schema.SchemaDefinition
 */
export interface SchemaDefinition {
    /**
     * The DID for this schema should not be populated by request
     *
     * @generated from protobuf field: string did = 1;
     */
    did: string;
    /**
     * The Creator address for the schema (from the wallet)
     *
     * @generated from protobuf field: string creator = 2;
     */
    creator: string;
    /**
     * an alternative reference point
     *
     * @generated from protobuf field: string label = 3;
     */
    label: string;
    /**
     * the properties of this schema
     *
     * @generated from protobuf field: repeated sonrio.sonr.schema.SchemaKindDefinition fields = 4;
     */
    fields: SchemaKindDefinition[];
}
/**
 * @generated from protobuf enum sonrio.sonr.schema.LinkKind
 */
export enum LinkKind {
    /**
     * @generated from protobuf enum value: UNKNOWN = 0;
     */
    UNKNOWN = 0,
    /**
     * @generated from protobuf enum value: OBJECT = 1;
     */
    OBJECT = 1,
    /**
     * @generated from protobuf enum value: SCHEMA = 2;
     */
    SCHEMA = 2,
    /**
     * @generated from protobuf enum value: BUCKET = 3;
     */
    BUCKET = 3
}
/**
 * @generated from protobuf enum sonrio.sonr.schema.SchemaKind
 */
export enum SchemaKind {
    /**
     * @generated from protobuf enum value: LIST = 0;
     */
    LIST = 0,
    /**
     * @generated from protobuf enum value: BOOL = 1;
     */
    BOOL = 1,
    /**
     * @generated from protobuf enum value: INT = 2;
     */
    INT = 2,
    /**
     * @generated from protobuf enum value: FLOAT = 3;
     */
    FLOAT = 3,
    /**
     * @generated from protobuf enum value: STRING = 4;
     */
    STRING = 4,
    /**
     * @generated from protobuf enum value: BYTES = 5;
     */
    BYTES = 5,
    /**
     * @generated from protobuf enum value: LINK = 6;
     */
    LINK = 6,
    /**
     * @generated from protobuf enum value: ANY = 7;
     */
    ANY = 7
}
// @generated message type with reflection information, may provide speed optimized methods
class MetadataDefintion$Type extends MessageType<MetadataDefintion> {
    constructor() {
        super("sonrio.sonr.schema.MetadataDefintion", [
            { no: 1, name: "key", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "value", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MetadataDefintion>): MetadataDefintion {
        const message = { key: "", value: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MetadataDefintion>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MetadataDefintion): MetadataDefintion {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string key */ 1:
                    message.key = reader.string();
                    break;
                case /* string value */ 2:
                    message.value = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MetadataDefintion, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string key = 1; */
        if (message.key !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.key);
        /* string value = 2; */
        if (message.value !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.sonr.schema.MetadataDefintion
 */
export const MetadataDefintion = new MetadataDefintion$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SchemaItemKindDefinition$Type extends MessageType<SchemaItemKindDefinition> {
    constructor() {
        super("sonrio.sonr.schema.SchemaItemKindDefinition", [
            { no: 1, name: "field", kind: "enum", T: () => ["sonrio.sonr.schema.SchemaKind", SchemaKind] },
            { no: 2, name: "item", kind: "message", T: () => SchemaItemKindDefinition },
            { no: 3, name: "link_kind", kind: "enum", T: () => ["sonrio.sonr.schema.LinkKind", LinkKind] },
            { no: 4, name: "link", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SchemaItemKindDefinition>): SchemaItemKindDefinition {
        const message = { field: 0, linkKind: 0, link: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SchemaItemKindDefinition>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SchemaItemKindDefinition): SchemaItemKindDefinition {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* sonrio.sonr.schema.SchemaKind field */ 1:
                    message.field = reader.int32();
                    break;
                case /* sonrio.sonr.schema.SchemaItemKindDefinition item */ 2:
                    message.item = SchemaItemKindDefinition.internalBinaryRead(reader, reader.uint32(), options, message.item);
                    break;
                case /* sonrio.sonr.schema.LinkKind link_kind */ 3:
                    message.linkKind = reader.int32();
                    break;
                case /* string link */ 4:
                    message.link = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SchemaItemKindDefinition, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* sonrio.sonr.schema.SchemaKind field = 1; */
        if (message.field !== 0)
            writer.tag(1, WireType.Varint).int32(message.field);
        /* sonrio.sonr.schema.SchemaItemKindDefinition item = 2; */
        if (message.item)
            SchemaItemKindDefinition.internalBinaryWrite(message.item, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* sonrio.sonr.schema.LinkKind link_kind = 3; */
        if (message.linkKind !== 0)
            writer.tag(3, WireType.Varint).int32(message.linkKind);
        /* string link = 4; */
        if (message.link !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.link);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.sonr.schema.SchemaItemKindDefinition
 */
export const SchemaItemKindDefinition = new SchemaItemKindDefinition$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SchemaKindDefinition$Type extends MessageType<SchemaKindDefinition> {
    constructor() {
        super("sonrio.sonr.schema.SchemaKindDefinition", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "field", kind: "enum", T: () => ["sonrio.sonr.schema.SchemaKind", SchemaKind] },
            { no: 3, name: "link_kind", kind: "enum", T: () => ["sonrio.sonr.schema.LinkKind", LinkKind] },
            { no: 4, name: "link", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "item", kind: "message", T: () => SchemaItemKindDefinition }
        ]);
    }
    create(value?: PartialMessage<SchemaKindDefinition>): SchemaKindDefinition {
        const message = { name: "", field: 0, linkKind: 0, link: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SchemaKindDefinition>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SchemaKindDefinition): SchemaKindDefinition {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* sonrio.sonr.schema.SchemaKind field */ 2:
                    message.field = reader.int32();
                    break;
                case /* sonrio.sonr.schema.LinkKind link_kind */ 3:
                    message.linkKind = reader.int32();
                    break;
                case /* string link */ 4:
                    message.link = reader.string();
                    break;
                case /* sonrio.sonr.schema.SchemaItemKindDefinition item */ 5:
                    message.item = SchemaItemKindDefinition.internalBinaryRead(reader, reader.uint32(), options, message.item);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SchemaKindDefinition, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* sonrio.sonr.schema.SchemaKind field = 2; */
        if (message.field !== 0)
            writer.tag(2, WireType.Varint).int32(message.field);
        /* sonrio.sonr.schema.LinkKind link_kind = 3; */
        if (message.linkKind !== 0)
            writer.tag(3, WireType.Varint).int32(message.linkKind);
        /* string link = 4; */
        if (message.link !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.link);
        /* sonrio.sonr.schema.SchemaItemKindDefinition item = 5; */
        if (message.item)
            SchemaItemKindDefinition.internalBinaryWrite(message.item, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.sonr.schema.SchemaKindDefinition
 */
export const SchemaKindDefinition = new SchemaKindDefinition$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SchemaDefinition$Type extends MessageType<SchemaDefinition> {
    constructor() {
        super("sonrio.sonr.schema.SchemaDefinition", [
            { no: 1, name: "did", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "creator", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "label", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "fields", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => SchemaKindDefinition }
        ]);
    }
    create(value?: PartialMessage<SchemaDefinition>): SchemaDefinition {
        const message = { did: "", creator: "", label: "", fields: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SchemaDefinition>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SchemaDefinition): SchemaDefinition {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string did */ 1:
                    message.did = reader.string();
                    break;
                case /* string creator */ 2:
                    message.creator = reader.string();
                    break;
                case /* string label */ 3:
                    message.label = reader.string();
                    break;
                case /* repeated sonrio.sonr.schema.SchemaKindDefinition fields */ 4:
                    message.fields.push(SchemaKindDefinition.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SchemaDefinition, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string did = 1; */
        if (message.did !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.did);
        /* string creator = 2; */
        if (message.creator !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.creator);
        /* string label = 3; */
        if (message.label !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.label);
        /* repeated sonrio.sonr.schema.SchemaKindDefinition fields = 4; */
        for (let i = 0; i < message.fields.length; i++)
            SchemaKindDefinition.internalBinaryWrite(message.fields[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.sonr.schema.SchemaDefinition
 */
export const SchemaDefinition = new SchemaDefinition$Type();
