// @generated by protobuf-ts 2.8.1 with parameter generate_dependencies,long_type_string
// @generated from protobuf file "schema/v1/query.proto" (package "sonrio.sonr.schema", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { SchemaDefinition } from "./schema";
import { PageResponse } from "../../cosmos/base/query/v1beta1/pagination";
import { WhatIs } from "./what_is";
import { PageRequest } from "../../cosmos/base/query/v1beta1/pagination";
import { Params } from "./params";
/**
 * QueryParamsRequest is request type for the Query/Params RPC method.
 *
 * @generated from protobuf message sonrio.sonr.schema.QueryParamsRequest
 */
export interface QueryParamsRequest {
}
/**
 * QueryParamsResponse is response type for the Query/Params RPC method.
 *
 * @generated from protobuf message sonrio.sonr.schema.QueryParamsResponse
 */
export interface QueryParamsResponse {
    /**
     * params holds all the parameters of this module.
     *
     * @generated from protobuf field: sonrio.sonr.schema.Params params = 1;
     */
    params?: Params;
}
/**
 * @generated from protobuf message sonrio.sonr.schema.QueryAllWhatIsRequest
 */
export interface QueryAllWhatIsRequest {
    /**
     * @generated from protobuf field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
     */
    pagination?: PageRequest;
}
/**
 * @generated from protobuf message sonrio.sonr.schema.QueryAllWhatIsResponse
 */
export interface QueryAllWhatIsResponse {
    /**
     * @generated from protobuf field: repeated sonrio.sonr.schema.WhatIs what_is = 1;
     */
    whatIs: WhatIs[];
    /**
     * @generated from protobuf field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
     */
    pagination?: PageResponse;
}
/**
 * @generated from protobuf message sonrio.sonr.schema.QuerySchemaRequest
 */
export interface QuerySchemaRequest {
    /**
     * @generated from protobuf field: string creator = 1;
     */
    creator: string;
    /**
     * @generated from protobuf field: string did = 2;
     */
    did: string;
}
/**
 * @generated from protobuf message sonrio.sonr.schema.QueryWhatIsRequest
 */
export interface QueryWhatIsRequest {
    /**
     * @generated from protobuf field: string creator = 1;
     */
    creator: string;
    /**
     * @generated from protobuf field: string did = 2;
     */
    did: string;
}
/**
 * @generated from protobuf message sonrio.sonr.schema.QueryWhatIsCreatorRequest
 */
export interface QueryWhatIsCreatorRequest {
    /**
     * address of the schema creator
     *
     * @generated from protobuf field: string creator = 1;
     */
    creator: string;
    /**
     * pageination values
     *
     * @generated from protobuf field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
     */
    pagination?: PageRequest;
}
/**
 * @generated from protobuf message sonrio.sonr.schema.QuerySchemaResponse
 */
export interface QuerySchemaResponse {
    /**
     * Definition of schema
     *
     * @generated from protobuf field: sonrio.sonr.schema.SchemaDefinition definition = 2;
     */
    definition?: SchemaDefinition;
}
/**
 * @generated from protobuf message sonrio.sonr.schema.QueryWhatIsByDidRequest
 */
export interface QueryWhatIsByDidRequest {
    /**
     * @generated from protobuf field: string did = 1;
     */
    did: string;
    /**
     * pageination values
     *
     * @generated from protobuf field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
     */
    pagination?: PageRequest;
}
/**
 * @generated from protobuf message sonrio.sonr.schema.QueryWhatIsResponse
 */
export interface QueryWhatIsResponse {
    /**
     * Schema Repersentation
     *
     * @generated from protobuf field: sonrio.sonr.schema.WhatIs what_is = 1;
     */
    whatIs?: WhatIs;
}
/**
 * @generated from protobuf message sonrio.sonr.schema.QueryWhatIsCreatorResponse
 */
export interface QueryWhatIsCreatorResponse {
    /**
     * Schema Repersentation
     *
     * @generated from protobuf field: repeated sonrio.sonr.schema.WhatIs what_is = 1;
     */
    whatIs: WhatIs[];
}
/**
 * @generated from protobuf message sonrio.sonr.schema.QueryWhatIsByDidResponse
 */
export interface QueryWhatIsByDidResponse {
    /**
     * @generated from protobuf field: sonrio.sonr.schema.WhatIs what_is = 1;
     */
    whatIs?: WhatIs;
}
// @generated message type with reflection information, may provide speed optimized methods
class QueryParamsRequest$Type extends MessageType<QueryParamsRequest> {
    constructor() {
        super("sonrio.sonr.schema.QueryParamsRequest", []);
    }
    create(value?: PartialMessage<QueryParamsRequest>): QueryParamsRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryParamsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryParamsRequest): QueryParamsRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: QueryParamsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.sonr.schema.QueryParamsRequest
 */
export const QueryParamsRequest = new QueryParamsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryParamsResponse$Type extends MessageType<QueryParamsResponse> {
    constructor() {
        super("sonrio.sonr.schema.QueryParamsResponse", [
            { no: 1, name: "params", kind: "message", T: () => Params, options: { "gogoproto.nullable": false } }
        ]);
    }
    create(value?: PartialMessage<QueryParamsResponse>): QueryParamsResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryParamsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryParamsResponse): QueryParamsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* sonrio.sonr.schema.Params params */ 1:
                    message.params = Params.internalBinaryRead(reader, reader.uint32(), options, message.params);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryParamsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* sonrio.sonr.schema.Params params = 1; */
        if (message.params)
            Params.internalBinaryWrite(message.params, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.sonr.schema.QueryParamsResponse
 */
export const QueryParamsResponse = new QueryParamsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryAllWhatIsRequest$Type extends MessageType<QueryAllWhatIsRequest> {
    constructor() {
        super("sonrio.sonr.schema.QueryAllWhatIsRequest", [
            { no: 1, name: "pagination", kind: "message", T: () => PageRequest }
        ]);
    }
    create(value?: PartialMessage<QueryAllWhatIsRequest>): QueryAllWhatIsRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryAllWhatIsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryAllWhatIsRequest): QueryAllWhatIsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* cosmos.base.query.v1beta1.PageRequest pagination */ 1:
                    message.pagination = PageRequest.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryAllWhatIsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* cosmos.base.query.v1beta1.PageRequest pagination = 1; */
        if (message.pagination)
            PageRequest.internalBinaryWrite(message.pagination, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.sonr.schema.QueryAllWhatIsRequest
 */
export const QueryAllWhatIsRequest = new QueryAllWhatIsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryAllWhatIsResponse$Type extends MessageType<QueryAllWhatIsResponse> {
    constructor() {
        super("sonrio.sonr.schema.QueryAllWhatIsResponse", [
            { no: 1, name: "what_is", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => WhatIs, options: { "gogoproto.nullable": false } },
            { no: 2, name: "pagination", kind: "message", T: () => PageResponse }
        ]);
    }
    create(value?: PartialMessage<QueryAllWhatIsResponse>): QueryAllWhatIsResponse {
        const message = { whatIs: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryAllWhatIsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryAllWhatIsResponse): QueryAllWhatIsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated sonrio.sonr.schema.WhatIs what_is */ 1:
                    message.whatIs.push(WhatIs.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* cosmos.base.query.v1beta1.PageResponse pagination */ 2:
                    message.pagination = PageResponse.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryAllWhatIsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated sonrio.sonr.schema.WhatIs what_is = 1; */
        for (let i = 0; i < message.whatIs.length; i++)
            WhatIs.internalBinaryWrite(message.whatIs[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* cosmos.base.query.v1beta1.PageResponse pagination = 2; */
        if (message.pagination)
            PageResponse.internalBinaryWrite(message.pagination, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.sonr.schema.QueryAllWhatIsResponse
 */
export const QueryAllWhatIsResponse = new QueryAllWhatIsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QuerySchemaRequest$Type extends MessageType<QuerySchemaRequest> {
    constructor() {
        super("sonrio.sonr.schema.QuerySchemaRequest", [
            { no: 1, name: "creator", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "did", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<QuerySchemaRequest>): QuerySchemaRequest {
        const message = { creator: "", did: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QuerySchemaRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QuerySchemaRequest): QuerySchemaRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string creator */ 1:
                    message.creator = reader.string();
                    break;
                case /* string did */ 2:
                    message.did = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QuerySchemaRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string creator = 1; */
        if (message.creator !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.creator);
        /* string did = 2; */
        if (message.did !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.did);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.sonr.schema.QuerySchemaRequest
 */
export const QuerySchemaRequest = new QuerySchemaRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryWhatIsRequest$Type extends MessageType<QueryWhatIsRequest> {
    constructor() {
        super("sonrio.sonr.schema.QueryWhatIsRequest", [
            { no: 1, name: "creator", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "did", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<QueryWhatIsRequest>): QueryWhatIsRequest {
        const message = { creator: "", did: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryWhatIsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryWhatIsRequest): QueryWhatIsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string creator */ 1:
                    message.creator = reader.string();
                    break;
                case /* string did */ 2:
                    message.did = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryWhatIsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string creator = 1; */
        if (message.creator !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.creator);
        /* string did = 2; */
        if (message.did !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.did);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.sonr.schema.QueryWhatIsRequest
 */
export const QueryWhatIsRequest = new QueryWhatIsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryWhatIsCreatorRequest$Type extends MessageType<QueryWhatIsCreatorRequest> {
    constructor() {
        super("sonrio.sonr.schema.QueryWhatIsCreatorRequest", [
            { no: 1, name: "creator", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "pagination", kind: "message", T: () => PageRequest }
        ]);
    }
    create(value?: PartialMessage<QueryWhatIsCreatorRequest>): QueryWhatIsCreatorRequest {
        const message = { creator: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryWhatIsCreatorRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryWhatIsCreatorRequest): QueryWhatIsCreatorRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string creator */ 1:
                    message.creator = reader.string();
                    break;
                case /* cosmos.base.query.v1beta1.PageRequest pagination */ 2:
                    message.pagination = PageRequest.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryWhatIsCreatorRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string creator = 1; */
        if (message.creator !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.creator);
        /* cosmos.base.query.v1beta1.PageRequest pagination = 2; */
        if (message.pagination)
            PageRequest.internalBinaryWrite(message.pagination, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.sonr.schema.QueryWhatIsCreatorRequest
 */
export const QueryWhatIsCreatorRequest = new QueryWhatIsCreatorRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QuerySchemaResponse$Type extends MessageType<QuerySchemaResponse> {
    constructor() {
        super("sonrio.sonr.schema.QuerySchemaResponse", [
            { no: 2, name: "definition", kind: "message", T: () => SchemaDefinition }
        ]);
    }
    create(value?: PartialMessage<QuerySchemaResponse>): QuerySchemaResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QuerySchemaResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QuerySchemaResponse): QuerySchemaResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* sonrio.sonr.schema.SchemaDefinition definition */ 2:
                    message.definition = SchemaDefinition.internalBinaryRead(reader, reader.uint32(), options, message.definition);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QuerySchemaResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* sonrio.sonr.schema.SchemaDefinition definition = 2; */
        if (message.definition)
            SchemaDefinition.internalBinaryWrite(message.definition, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.sonr.schema.QuerySchemaResponse
 */
export const QuerySchemaResponse = new QuerySchemaResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryWhatIsByDidRequest$Type extends MessageType<QueryWhatIsByDidRequest> {
    constructor() {
        super("sonrio.sonr.schema.QueryWhatIsByDidRequest", [
            { no: 1, name: "did", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "pagination", kind: "message", T: () => PageRequest }
        ]);
    }
    create(value?: PartialMessage<QueryWhatIsByDidRequest>): QueryWhatIsByDidRequest {
        const message = { did: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryWhatIsByDidRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryWhatIsByDidRequest): QueryWhatIsByDidRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string did */ 1:
                    message.did = reader.string();
                    break;
                case /* cosmos.base.query.v1beta1.PageRequest pagination */ 2:
                    message.pagination = PageRequest.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryWhatIsByDidRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string did = 1; */
        if (message.did !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.did);
        /* cosmos.base.query.v1beta1.PageRequest pagination = 2; */
        if (message.pagination)
            PageRequest.internalBinaryWrite(message.pagination, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.sonr.schema.QueryWhatIsByDidRequest
 */
export const QueryWhatIsByDidRequest = new QueryWhatIsByDidRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryWhatIsResponse$Type extends MessageType<QueryWhatIsResponse> {
    constructor() {
        super("sonrio.sonr.schema.QueryWhatIsResponse", [
            { no: 1, name: "what_is", kind: "message", T: () => WhatIs }
        ]);
    }
    create(value?: PartialMessage<QueryWhatIsResponse>): QueryWhatIsResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryWhatIsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryWhatIsResponse): QueryWhatIsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* sonrio.sonr.schema.WhatIs what_is */ 1:
                    message.whatIs = WhatIs.internalBinaryRead(reader, reader.uint32(), options, message.whatIs);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryWhatIsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* sonrio.sonr.schema.WhatIs what_is = 1; */
        if (message.whatIs)
            WhatIs.internalBinaryWrite(message.whatIs, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.sonr.schema.QueryWhatIsResponse
 */
export const QueryWhatIsResponse = new QueryWhatIsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryWhatIsCreatorResponse$Type extends MessageType<QueryWhatIsCreatorResponse> {
    constructor() {
        super("sonrio.sonr.schema.QueryWhatIsCreatorResponse", [
            { no: 1, name: "what_is", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => WhatIs }
        ]);
    }
    create(value?: PartialMessage<QueryWhatIsCreatorResponse>): QueryWhatIsCreatorResponse {
        const message = { whatIs: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryWhatIsCreatorResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryWhatIsCreatorResponse): QueryWhatIsCreatorResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated sonrio.sonr.schema.WhatIs what_is */ 1:
                    message.whatIs.push(WhatIs.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryWhatIsCreatorResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated sonrio.sonr.schema.WhatIs what_is = 1; */
        for (let i = 0; i < message.whatIs.length; i++)
            WhatIs.internalBinaryWrite(message.whatIs[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.sonr.schema.QueryWhatIsCreatorResponse
 */
export const QueryWhatIsCreatorResponse = new QueryWhatIsCreatorResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryWhatIsByDidResponse$Type extends MessageType<QueryWhatIsByDidResponse> {
    constructor() {
        super("sonrio.sonr.schema.QueryWhatIsByDidResponse", [
            { no: 1, name: "what_is", kind: "message", T: () => WhatIs }
        ]);
    }
    create(value?: PartialMessage<QueryWhatIsByDidResponse>): QueryWhatIsByDidResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryWhatIsByDidResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryWhatIsByDidResponse): QueryWhatIsByDidResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* sonrio.sonr.schema.WhatIs what_is */ 1:
                    message.whatIs = WhatIs.internalBinaryRead(reader, reader.uint32(), options, message.whatIs);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryWhatIsByDidResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* sonrio.sonr.schema.WhatIs what_is = 1; */
        if (message.whatIs)
            WhatIs.internalBinaryWrite(message.whatIs, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.sonr.schema.QueryWhatIsByDidResponse
 */
export const QueryWhatIsByDidResponse = new QueryWhatIsByDidResponse$Type();
/**
 * @generated ServiceType for protobuf service sonrio.sonr.schema.Query
 */
export const Query = new ServiceType("sonrio.sonr.schema.Query", [
    { name: "Params", options: { "google.api.http": { get: "/sonr-io/sonr/schema/params" } }, I: QueryParamsRequest, O: QueryParamsResponse },
    { name: "Schema", options: { "google.api.http": { get: "/sonr-io/sonr/schema/query/schema" } }, I: QuerySchemaRequest, O: QuerySchemaResponse },
    { name: "WhatIs", options: { "google.api.http": { get: "/sonr-io/sonr/schema/query/what_is" } }, I: QueryWhatIsRequest, O: QueryWhatIsResponse },
    { name: "WhatIsByCreator", options: { "google.api.http": { get: "/sonr-io/sonr/schema/query/what_is/{creator}" } }, I: QueryWhatIsCreatorRequest, O: QueryWhatIsCreatorResponse },
    { name: "WhatIsByDid", options: { "google.api.http": { get: "/sonr-io/sonr/schema/query/what_is/{did}" } }, I: QueryWhatIsByDidRequest, O: QueryWhatIsByDidResponse },
    { name: "WhatIsAll", options: { "google.api.http": { get: "/sonr-io/sonr/schema/query/all_schemas" } }, I: QueryAllWhatIsRequest, O: QueryAllWhatIsResponse }
]);
