// @generated by protobuf-ts 2.8.1 with parameter generate_dependencies,long_type_string
// @generated from protobuf file "schema/v1/document.proto" (package "sonrio.sonr.schema", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { SchemaKind } from "./schema";
import { LinkKind } from "./schema";
import { SchemaDefinition } from "./schema";
/**
 * @generated from protobuf message sonrio.sonr.schema.SchemaDocument
 */
export interface SchemaDocument {
    /**
     * the DID for this schema should not be populated by request
     *
     * @generated from protobuf field: string did = 1;
     */
    did: string;
    /**
     * @generated from protobuf field: string cid = 2;
     */
    cid: string;
    /**
     * @generated from protobuf field: string creator = 3;
     */
    creator: string;
    /**
     * The definition of the document used to build the values
     *
     * @generated from protobuf field: sonrio.sonr.schema.SchemaDefinition definition = 4;
     */
    definition?: SchemaDefinition;
    /**
     * the properties of this schemadocument
     *
     * @generated from protobuf field: repeated sonrio.sonr.schema.SchemaDocumentValue fields = 5;
     */
    fields: SchemaDocumentValue[];
}
/**
 * @generated from protobuf message sonrio.sonr.schema.BoolValue
 */
export interface BoolValue {
    /**
     * @generated from protobuf field: bool value = 1;
     */
    value: boolean;
}
/**
 * @generated from protobuf message sonrio.sonr.schema.StringValue
 */
export interface StringValue {
    /**
     * @generated from protobuf field: string value = 1;
     */
    value: string;
}
/**
 * @generated from protobuf message sonrio.sonr.schema.IntValue
 */
export interface IntValue {
    /**
     * @generated from protobuf field: int32 value = 1;
     */
    value: number;
}
/**
 * @generated from protobuf message sonrio.sonr.schema.FloatValue
 */
export interface FloatValue {
    /**
     * @generated from protobuf field: double value = 1;
     */
    value: number;
}
/**
 * @generated from protobuf message sonrio.sonr.schema.BytesValue
 */
export interface BytesValue {
    /**
     * @generated from protobuf field: bytes value = 1;
     */
    value: Uint8Array;
}
/**
 * @generated from protobuf message sonrio.sonr.schema.LinkValue
 */
export interface LinkValue {
    /**
     * @generated from protobuf field: sonrio.sonr.schema.LinkKind link = 1;
     */
    link: LinkKind;
    /**
     * @generated from protobuf field: string value = 2;
     */
    value: string;
}
/**
 * @generated from protobuf message sonrio.sonr.schema.ArrayValue
 */
export interface ArrayValue {
    /**
     * @generated from protobuf field: repeated sonrio.sonr.schema.SchemaDocumentValue value = 1;
     */
    value: SchemaDocumentValue[];
}
/**
 * @generated from protobuf message sonrio.sonr.schema.SchemaDocumentValue
 */
export interface SchemaDocumentValue {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * Type of a single schema property
     *
     * @generated from protobuf field: sonrio.sonr.schema.SchemaKind field = 2;
     */
    field: SchemaKind;
    /**
     * The value of the field
     *
     * @generated from protobuf field: sonrio.sonr.schema.BoolValue bool_value = 3;
     */
    boolValue?: BoolValue; // optional
    /**
     * @generated from protobuf field: sonrio.sonr.schema.StringValue string_value = 4;
     */
    stringValue?: StringValue; // optional
    /**
     * @generated from protobuf field: sonrio.sonr.schema.IntValue int_value = 5;
     */
    intValue?: IntValue; // optional
    /**
     * @generated from protobuf field: sonrio.sonr.schema.FloatValue float_value = 6;
     */
    floatValue?: FloatValue; // optional
    /**
     * @generated from protobuf field: sonrio.sonr.schema.BytesValue bytes_value = 7;
     */
    bytesValue?: BytesValue; // optional
    /**
     * @generated from protobuf field: sonrio.sonr.schema.LinkValue link_value = 8;
     */
    linkValue?: LinkValue; // optional
    /**
     * @generated from protobuf field: sonrio.sonr.schema.ArrayValue array_value = 9;
     */
    arrayValue?: ArrayValue; // optional
}
// @generated message type with reflection information, may provide speed optimized methods
class SchemaDocument$Type extends MessageType<SchemaDocument> {
    constructor() {
        super("sonrio.sonr.schema.SchemaDocument", [
            { no: 1, name: "did", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "cid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "creator", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "definition", kind: "message", T: () => SchemaDefinition },
            { no: 5, name: "fields", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => SchemaDocumentValue }
        ]);
    }
    create(value?: PartialMessage<SchemaDocument>): SchemaDocument {
        const message = { did: "", cid: "", creator: "", fields: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SchemaDocument>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SchemaDocument): SchemaDocument {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string did */ 1:
                    message.did = reader.string();
                    break;
                case /* string cid */ 2:
                    message.cid = reader.string();
                    break;
                case /* string creator */ 3:
                    message.creator = reader.string();
                    break;
                case /* sonrio.sonr.schema.SchemaDefinition definition */ 4:
                    message.definition = SchemaDefinition.internalBinaryRead(reader, reader.uint32(), options, message.definition);
                    break;
                case /* repeated sonrio.sonr.schema.SchemaDocumentValue fields */ 5:
                    message.fields.push(SchemaDocumentValue.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SchemaDocument, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string did = 1; */
        if (message.did !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.did);
        /* string cid = 2; */
        if (message.cid !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.cid);
        /* string creator = 3; */
        if (message.creator !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.creator);
        /* sonrio.sonr.schema.SchemaDefinition definition = 4; */
        if (message.definition)
            SchemaDefinition.internalBinaryWrite(message.definition, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* repeated sonrio.sonr.schema.SchemaDocumentValue fields = 5; */
        for (let i = 0; i < message.fields.length; i++)
            SchemaDocumentValue.internalBinaryWrite(message.fields[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.sonr.schema.SchemaDocument
 */
export const SchemaDocument = new SchemaDocument$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BoolValue$Type extends MessageType<BoolValue> {
    constructor() {
        super("sonrio.sonr.schema.BoolValue", [
            { no: 1, name: "value", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<BoolValue>): BoolValue {
        const message = { value: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BoolValue>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BoolValue): BoolValue {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool value */ 1:
                    message.value = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BoolValue, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool value = 1; */
        if (message.value !== false)
            writer.tag(1, WireType.Varint).bool(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.sonr.schema.BoolValue
 */
export const BoolValue = new BoolValue$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StringValue$Type extends MessageType<StringValue> {
    constructor() {
        super("sonrio.sonr.schema.StringValue", [
            { no: 1, name: "value", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<StringValue>): StringValue {
        const message = { value: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StringValue>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StringValue): StringValue {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string value */ 1:
                    message.value = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StringValue, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string value = 1; */
        if (message.value !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.sonr.schema.StringValue
 */
export const StringValue = new StringValue$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IntValue$Type extends MessageType<IntValue> {
    constructor() {
        super("sonrio.sonr.schema.IntValue", [
            { no: 1, name: "value", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<IntValue>): IntValue {
        const message = { value: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<IntValue>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IntValue): IntValue {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 value */ 1:
                    message.value = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IntValue, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 value = 1; */
        if (message.value !== 0)
            writer.tag(1, WireType.Varint).int32(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.sonr.schema.IntValue
 */
export const IntValue = new IntValue$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FloatValue$Type extends MessageType<FloatValue> {
    constructor() {
        super("sonrio.sonr.schema.FloatValue", [
            { no: 1, name: "value", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
    create(value?: PartialMessage<FloatValue>): FloatValue {
        const message = { value: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FloatValue>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FloatValue): FloatValue {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* double value */ 1:
                    message.value = reader.double();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FloatValue, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* double value = 1; */
        if (message.value !== 0)
            writer.tag(1, WireType.Bit64).double(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.sonr.schema.FloatValue
 */
export const FloatValue = new FloatValue$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BytesValue$Type extends MessageType<BytesValue> {
    constructor() {
        super("sonrio.sonr.schema.BytesValue", [
            { no: 1, name: "value", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<BytesValue>): BytesValue {
        const message = { value: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BytesValue>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BytesValue): BytesValue {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes value */ 1:
                    message.value = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BytesValue, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes value = 1; */
        if (message.value.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.sonr.schema.BytesValue
 */
export const BytesValue = new BytesValue$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinkValue$Type extends MessageType<LinkValue> {
    constructor() {
        super("sonrio.sonr.schema.LinkValue", [
            { no: 1, name: "link", kind: "enum", T: () => ["sonrio.sonr.schema.LinkKind", LinkKind] },
            { no: 2, name: "value", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LinkValue>): LinkValue {
        const message = { link: 0, value: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LinkValue>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LinkValue): LinkValue {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* sonrio.sonr.schema.LinkKind link */ 1:
                    message.link = reader.int32();
                    break;
                case /* string value */ 2:
                    message.value = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LinkValue, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* sonrio.sonr.schema.LinkKind link = 1; */
        if (message.link !== 0)
            writer.tag(1, WireType.Varint).int32(message.link);
        /* string value = 2; */
        if (message.value !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.sonr.schema.LinkValue
 */
export const LinkValue = new LinkValue$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ArrayValue$Type extends MessageType<ArrayValue> {
    constructor() {
        super("sonrio.sonr.schema.ArrayValue", [
            { no: 1, name: "value", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => SchemaDocumentValue }
        ]);
    }
    create(value?: PartialMessage<ArrayValue>): ArrayValue {
        const message = { value: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ArrayValue>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ArrayValue): ArrayValue {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated sonrio.sonr.schema.SchemaDocumentValue value */ 1:
                    message.value.push(SchemaDocumentValue.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ArrayValue, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated sonrio.sonr.schema.SchemaDocumentValue value = 1; */
        for (let i = 0; i < message.value.length; i++)
            SchemaDocumentValue.internalBinaryWrite(message.value[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.sonr.schema.ArrayValue
 */
export const ArrayValue = new ArrayValue$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SchemaDocumentValue$Type extends MessageType<SchemaDocumentValue> {
    constructor() {
        super("sonrio.sonr.schema.SchemaDocumentValue", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "field", kind: "enum", T: () => ["sonrio.sonr.schema.SchemaKind", SchemaKind] },
            { no: 3, name: "bool_value", kind: "message", T: () => BoolValue },
            { no: 4, name: "string_value", kind: "message", T: () => StringValue },
            { no: 5, name: "int_value", kind: "message", T: () => IntValue },
            { no: 6, name: "float_value", kind: "message", T: () => FloatValue },
            { no: 7, name: "bytes_value", kind: "message", T: () => BytesValue },
            { no: 8, name: "link_value", kind: "message", T: () => LinkValue },
            { no: 9, name: "array_value", kind: "message", T: () => ArrayValue }
        ]);
    }
    create(value?: PartialMessage<SchemaDocumentValue>): SchemaDocumentValue {
        const message = { name: "", field: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SchemaDocumentValue>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SchemaDocumentValue): SchemaDocumentValue {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* sonrio.sonr.schema.SchemaKind field */ 2:
                    message.field = reader.int32();
                    break;
                case /* sonrio.sonr.schema.BoolValue bool_value */ 3:
                    message.boolValue = BoolValue.internalBinaryRead(reader, reader.uint32(), options, message.boolValue);
                    break;
                case /* sonrio.sonr.schema.StringValue string_value */ 4:
                    message.stringValue = StringValue.internalBinaryRead(reader, reader.uint32(), options, message.stringValue);
                    break;
                case /* sonrio.sonr.schema.IntValue int_value */ 5:
                    message.intValue = IntValue.internalBinaryRead(reader, reader.uint32(), options, message.intValue);
                    break;
                case /* sonrio.sonr.schema.FloatValue float_value */ 6:
                    message.floatValue = FloatValue.internalBinaryRead(reader, reader.uint32(), options, message.floatValue);
                    break;
                case /* sonrio.sonr.schema.BytesValue bytes_value */ 7:
                    message.bytesValue = BytesValue.internalBinaryRead(reader, reader.uint32(), options, message.bytesValue);
                    break;
                case /* sonrio.sonr.schema.LinkValue link_value */ 8:
                    message.linkValue = LinkValue.internalBinaryRead(reader, reader.uint32(), options, message.linkValue);
                    break;
                case /* sonrio.sonr.schema.ArrayValue array_value */ 9:
                    message.arrayValue = ArrayValue.internalBinaryRead(reader, reader.uint32(), options, message.arrayValue);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SchemaDocumentValue, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* sonrio.sonr.schema.SchemaKind field = 2; */
        if (message.field !== 0)
            writer.tag(2, WireType.Varint).int32(message.field);
        /* sonrio.sonr.schema.BoolValue bool_value = 3; */
        if (message.boolValue)
            BoolValue.internalBinaryWrite(message.boolValue, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* sonrio.sonr.schema.StringValue string_value = 4; */
        if (message.stringValue)
            StringValue.internalBinaryWrite(message.stringValue, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* sonrio.sonr.schema.IntValue int_value = 5; */
        if (message.intValue)
            IntValue.internalBinaryWrite(message.intValue, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* sonrio.sonr.schema.FloatValue float_value = 6; */
        if (message.floatValue)
            FloatValue.internalBinaryWrite(message.floatValue, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* sonrio.sonr.schema.BytesValue bytes_value = 7; */
        if (message.bytesValue)
            BytesValue.internalBinaryWrite(message.bytesValue, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* sonrio.sonr.schema.LinkValue link_value = 8; */
        if (message.linkValue)
            LinkValue.internalBinaryWrite(message.linkValue, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* sonrio.sonr.schema.ArrayValue array_value = 9; */
        if (message.arrayValue)
            ArrayValue.internalBinaryWrite(message.arrayValue, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.sonr.schema.SchemaDocumentValue
 */
export const SchemaDocumentValue = new SchemaDocumentValue$Type();
