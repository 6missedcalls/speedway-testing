// @generated by protobuf-ts 2.8.1 with parameter generate_dependencies,long_type_string
// @generated from protobuf file "schema/v1/tx.proto" (package "sonrio.sonr.schema", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { WhatIs } from "./what_is";
import { MetadataDefintion } from "./schema";
import { SchemaKindDefinition } from "./schema";
/**
 * @generated from protobuf message sonrio.sonr.schema.MsgCreateSchema
 */
export interface MsgCreateSchema {
    /**
     * Address of the creator account
     * can be an application address or user address
     *
     * @generated from protobuf field: string creator = 1;
     */
    creator: string;
    /**
     * label for the schema.
     *
     * @generated from protobuf field: string label = 2;
     */
    label: string;
    /**
     * List of Kind Definitions for the schema
     *
     * @generated from protobuf field: repeated sonrio.sonr.schema.SchemaKindDefinition fields = 3;
     */
    fields: SchemaKindDefinition[];
    /**
     * Metadata is a map of key-value pairs that can be used to store additional information about the WhatIs (Schema)
     *
     * @generated from protobuf field: repeated sonrio.sonr.schema.MetadataDefintion metadata = 4;
     */
    metadata: MetadataDefintion[];
}
/**
 * @generated from protobuf message sonrio.sonr.schema.MsgCreateSchemaResponse
 */
export interface MsgCreateSchemaResponse {
    /**
     * Status code of the response
     *
     * @generated from protobuf field: int32 code = 1;
     */
    code: number;
    /**
     * @generated from protobuf field: string message = 2;
     */
    message: string;
    /**
     * WhatIs object created on chain
     *
     * @generated from protobuf field: sonrio.sonr.schema.WhatIs what_is = 3;
     */
    whatIs?: WhatIs;
}
/**
 * @generated from protobuf message sonrio.sonr.schema.MsgDeprecateSchema
 */
export interface MsgDeprecateSchema {
    /**
     * @generated from protobuf field: string creator = 1;
     */
    creator: string;
    /**
     * @generated from protobuf field: string did = 2;
     */
    did: string;
}
/**
 * @generated from protobuf message sonrio.sonr.schema.MsgDeprecateSchemaResponse
 */
export interface MsgDeprecateSchemaResponse {
    /**
     * @generated from protobuf field: int32 code = 1;
     */
    code: number;
    /**
     * @generated from protobuf field: string message = 2;
     */
    message: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class MsgCreateSchema$Type extends MessageType<MsgCreateSchema> {
    constructor() {
        super("sonrio.sonr.schema.MsgCreateSchema", [
            { no: 1, name: "creator", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "label", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "fields", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => SchemaKindDefinition },
            { no: 4, name: "metadata", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MetadataDefintion }
        ]);
    }
    create(value?: PartialMessage<MsgCreateSchema>): MsgCreateSchema {
        const message = { creator: "", label: "", fields: [], metadata: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MsgCreateSchema>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgCreateSchema): MsgCreateSchema {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string creator */ 1:
                    message.creator = reader.string();
                    break;
                case /* string label */ 2:
                    message.label = reader.string();
                    break;
                case /* repeated sonrio.sonr.schema.SchemaKindDefinition fields */ 3:
                    message.fields.push(SchemaKindDefinition.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated sonrio.sonr.schema.MetadataDefintion metadata */ 4:
                    message.metadata.push(MetadataDefintion.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MsgCreateSchema, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string creator = 1; */
        if (message.creator !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.creator);
        /* string label = 2; */
        if (message.label !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.label);
        /* repeated sonrio.sonr.schema.SchemaKindDefinition fields = 3; */
        for (let i = 0; i < message.fields.length; i++)
            SchemaKindDefinition.internalBinaryWrite(message.fields[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated sonrio.sonr.schema.MetadataDefintion metadata = 4; */
        for (let i = 0; i < message.metadata.length; i++)
            MetadataDefintion.internalBinaryWrite(message.metadata[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.sonr.schema.MsgCreateSchema
 */
export const MsgCreateSchema = new MsgCreateSchema$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgCreateSchemaResponse$Type extends MessageType<MsgCreateSchemaResponse> {
    constructor() {
        super("sonrio.sonr.schema.MsgCreateSchemaResponse", [
            { no: 1, name: "code", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "what_is", kind: "message", T: () => WhatIs }
        ]);
    }
    create(value?: PartialMessage<MsgCreateSchemaResponse>): MsgCreateSchemaResponse {
        const message = { code: 0, message: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MsgCreateSchemaResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgCreateSchemaResponse): MsgCreateSchemaResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 code */ 1:
                    message.code = reader.int32();
                    break;
                case /* string message */ 2:
                    message.message = reader.string();
                    break;
                case /* sonrio.sonr.schema.WhatIs what_is */ 3:
                    message.whatIs = WhatIs.internalBinaryRead(reader, reader.uint32(), options, message.whatIs);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MsgCreateSchemaResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 code = 1; */
        if (message.code !== 0)
            writer.tag(1, WireType.Varint).int32(message.code);
        /* string message = 2; */
        if (message.message !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.message);
        /* sonrio.sonr.schema.WhatIs what_is = 3; */
        if (message.whatIs)
            WhatIs.internalBinaryWrite(message.whatIs, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.sonr.schema.MsgCreateSchemaResponse
 */
export const MsgCreateSchemaResponse = new MsgCreateSchemaResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgDeprecateSchema$Type extends MessageType<MsgDeprecateSchema> {
    constructor() {
        super("sonrio.sonr.schema.MsgDeprecateSchema", [
            { no: 1, name: "creator", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "did", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MsgDeprecateSchema>): MsgDeprecateSchema {
        const message = { creator: "", did: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MsgDeprecateSchema>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgDeprecateSchema): MsgDeprecateSchema {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string creator */ 1:
                    message.creator = reader.string();
                    break;
                case /* string did */ 2:
                    message.did = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MsgDeprecateSchema, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string creator = 1; */
        if (message.creator !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.creator);
        /* string did = 2; */
        if (message.did !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.did);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.sonr.schema.MsgDeprecateSchema
 */
export const MsgDeprecateSchema = new MsgDeprecateSchema$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgDeprecateSchemaResponse$Type extends MessageType<MsgDeprecateSchemaResponse> {
    constructor() {
        super("sonrio.sonr.schema.MsgDeprecateSchemaResponse", [
            { no: 1, name: "code", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MsgDeprecateSchemaResponse>): MsgDeprecateSchemaResponse {
        const message = { code: 0, message: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MsgDeprecateSchemaResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgDeprecateSchemaResponse): MsgDeprecateSchemaResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 code */ 1:
                    message.code = reader.int32();
                    break;
                case /* string message */ 2:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MsgDeprecateSchemaResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 code = 1; */
        if (message.code !== 0)
            writer.tag(1, WireType.Varint).int32(message.code);
        /* string message = 2; */
        if (message.message !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sonrio.sonr.schema.MsgDeprecateSchemaResponse
 */
export const MsgDeprecateSchemaResponse = new MsgDeprecateSchemaResponse$Type();
/**
 * @generated ServiceType for protobuf service sonrio.sonr.schema.Msg
 */
export const Msg = new ServiceType("sonrio.sonr.schema.Msg", [
    { name: "CreateSchema", options: {}, I: MsgCreateSchema, O: MsgCreateSchemaResponse },
    { name: "DeprecateSchema", options: {}, I: MsgDeprecateSchema, O: MsgDeprecateSchemaResponse }
]);
