// @generated by protobuf-ts 2.8.1 with parameter generate_dependencies,long_type_string
// @generated from protobuf file "schema/v1/query.proto" (package "sonrio.sonr.schema", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Query } from "./query";
import type { QueryAllWhatIsResponse } from "./query";
import type { QueryAllWhatIsRequest } from "./query";
import type { QueryWhatIsByDidResponse } from "./query";
import type { QueryWhatIsByDidRequest } from "./query";
import type { QueryWhatIsCreatorResponse } from "./query";
import type { QueryWhatIsCreatorRequest } from "./query";
import type { QueryWhatIsResponse } from "./query";
import type { QueryWhatIsRequest } from "./query";
import type { QuerySchemaResponse } from "./query";
import type { QuerySchemaRequest } from "./query";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { QueryParamsResponse } from "./query";
import type { QueryParamsRequest } from "./query";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * Query defines the gRPC querier service.
 *
 * @generated from protobuf service sonrio.sonr.schema.Query
 */
export interface IQueryClient {
    /**
     * Parameters queries the parameters of the module.
     *
     * @generated from protobuf rpc: Params(sonrio.sonr.schema.QueryParamsRequest) returns (sonrio.sonr.schema.QueryParamsResponse);
     */
    params(input: QueryParamsRequest, options?: RpcOptions): UnaryCall<QueryParamsRequest, QueryParamsResponse>;
    /**
     * Queries a Schema by creator and did
     *
     * @generated from protobuf rpc: Schema(sonrio.sonr.schema.QuerySchemaRequest) returns (sonrio.sonr.schema.QuerySchemaResponse);
     */
    schema(input: QuerySchemaRequest, options?: RpcOptions): UnaryCall<QuerySchemaRequest, QuerySchemaResponse>;
    /**
     * Queries a whatis by creator and did
     *
     * @generated from protobuf rpc: WhatIs(sonrio.sonr.schema.QueryWhatIsRequest) returns (sonrio.sonr.schema.QueryWhatIsResponse);
     */
    whatIs(input: QueryWhatIsRequest, options?: RpcOptions): UnaryCall<QueryWhatIsRequest, QueryWhatIsResponse>;
    /**
     * Queries a whatis by creator
     *
     * @generated from protobuf rpc: WhatIsByCreator(sonrio.sonr.schema.QueryWhatIsCreatorRequest) returns (sonrio.sonr.schema.QueryWhatIsCreatorResponse);
     */
    whatIsByCreator(input: QueryWhatIsCreatorRequest, options?: RpcOptions): UnaryCall<QueryWhatIsCreatorRequest, QueryWhatIsCreatorResponse>;
    /**
     * Queries a whatis by did
     *
     * @generated from protobuf rpc: WhatIsByDid(sonrio.sonr.schema.QueryWhatIsByDidRequest) returns (sonrio.sonr.schema.QueryWhatIsByDidResponse);
     */
    whatIsByDid(input: QueryWhatIsByDidRequest, options?: RpcOptions): UnaryCall<QueryWhatIsByDidRequest, QueryWhatIsByDidResponse>;
    /**
     * Queries all whatIs definitions supports pagination
     *
     * @generated from protobuf rpc: WhatIsAll(sonrio.sonr.schema.QueryAllWhatIsRequest) returns (sonrio.sonr.schema.QueryAllWhatIsResponse);
     */
    whatIsAll(input: QueryAllWhatIsRequest, options?: RpcOptions): UnaryCall<QueryAllWhatIsRequest, QueryAllWhatIsResponse>;
}
/**
 * Query defines the gRPC querier service.
 *
 * @generated from protobuf service sonrio.sonr.schema.Query
 */
export class QueryClient implements IQueryClient, ServiceInfo {
    typeName = Query.typeName;
    methods = Query.methods;
    options = Query.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Parameters queries the parameters of the module.
     *
     * @generated from protobuf rpc: Params(sonrio.sonr.schema.QueryParamsRequest) returns (sonrio.sonr.schema.QueryParamsResponse);
     */
    params(input: QueryParamsRequest, options?: RpcOptions): UnaryCall<QueryParamsRequest, QueryParamsResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryParamsRequest, QueryParamsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Queries a Schema by creator and did
     *
     * @generated from protobuf rpc: Schema(sonrio.sonr.schema.QuerySchemaRequest) returns (sonrio.sonr.schema.QuerySchemaResponse);
     */
    schema(input: QuerySchemaRequest, options?: RpcOptions): UnaryCall<QuerySchemaRequest, QuerySchemaResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<QuerySchemaRequest, QuerySchemaResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Queries a whatis by creator and did
     *
     * @generated from protobuf rpc: WhatIs(sonrio.sonr.schema.QueryWhatIsRequest) returns (sonrio.sonr.schema.QueryWhatIsResponse);
     */
    whatIs(input: QueryWhatIsRequest, options?: RpcOptions): UnaryCall<QueryWhatIsRequest, QueryWhatIsResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryWhatIsRequest, QueryWhatIsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Queries a whatis by creator
     *
     * @generated from protobuf rpc: WhatIsByCreator(sonrio.sonr.schema.QueryWhatIsCreatorRequest) returns (sonrio.sonr.schema.QueryWhatIsCreatorResponse);
     */
    whatIsByCreator(input: QueryWhatIsCreatorRequest, options?: RpcOptions): UnaryCall<QueryWhatIsCreatorRequest, QueryWhatIsCreatorResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryWhatIsCreatorRequest, QueryWhatIsCreatorResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Queries a whatis by did
     *
     * @generated from protobuf rpc: WhatIsByDid(sonrio.sonr.schema.QueryWhatIsByDidRequest) returns (sonrio.sonr.schema.QueryWhatIsByDidResponse);
     */
    whatIsByDid(input: QueryWhatIsByDidRequest, options?: RpcOptions): UnaryCall<QueryWhatIsByDidRequest, QueryWhatIsByDidResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryWhatIsByDidRequest, QueryWhatIsByDidResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Queries all whatIs definitions supports pagination
     *
     * @generated from protobuf rpc: WhatIsAll(sonrio.sonr.schema.QueryAllWhatIsRequest) returns (sonrio.sonr.schema.QueryAllWhatIsResponse);
     */
    whatIsAll(input: QueryAllWhatIsRequest, options?: RpcOptions): UnaryCall<QueryAllWhatIsRequest, QueryAllWhatIsResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<QueryAllWhatIsRequest, QueryAllWhatIsResponse>("unary", this._transport, method, opt, input);
    }
}
